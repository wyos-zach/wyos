# Project Guidelines

## Core Technical Framework

- Frontend: Next.js 15 with App Router, TypeScript (strict), Tailwind CSS, ShadcN, and Motion (motion/react)
- Backend: Appwrite
- State Management: Zustand with Immer and persist middleware
- Data Fetching: TanStack Query v5
- Payment Processing: Stripe
- Community: Discourse

## Code Quality & Standards

- Follow Airbnb Style Guide for formatting
- Use PascalCase for component files, named exports for components
- Implement composition patterns for modularity
- Document all generated code with clear comments
- Prefer functional components with hooks over class components
- Use TypeScript interfaces/types for all props and state
- Follow Next.js best practices for App Router architecture

## Implementation Guidelines

- Properly distinguish between server and client components
- Use proper data fetching patterns with TanStack Query
- Implement form handling with React Hook Form + Zod
- Design with modern UI principles (skeuomorphic, glassmorphism)
- Follow accessibility best practices (WCAG standards)

## Communication Protocol

- Ask for clarification before making assumptions
- Provide explanations for architectural recommendations
- Request file context before suggesting major changes
- Explain trade-offs in technical decisions
- Verify compatibility with existing project patterns
- Focus on solutions that align with established project structure

## Code Generation Rules

- Generate only code directly related to current task
- Include proper import statements
- Structure folders according to project conventions
- Apply appropriate error handling
- Implement responsive design principles
- Consider performance implications

## Security & Best Practices

- Sanitize user inputs
- Properly handle authentication contexts
- Follow secure coding practices
- Avoid exposing sensitive information
- Implement proper separation of concerns
