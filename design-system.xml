This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, src/components/design-system/atoms/avatar-section.tsx, src/components/design-system/atoms/badge-section.tsx, src/components/design-system/atoms/breadcrumb-section.tsx, src/components/design-system/atoms/button-section.tsx, src/components/design-system/atoms/card-section.tsx, src/components/design-system/atoms/checkbox-section.tsx, src/components/design-system/atoms/icon-section.tsx, src/components/design-system/atoms/input-section.tsx, src/components/design-system/atoms/label-section.tsx, src/components/design-system/atoms/radio-group-section.tsx, src/components/design-system/atoms/rating-section.tsx, src/components/design-system/atoms/select-section.tsx, src/components/design-system/atoms/skeleton-section.tsx, src/components/design-system/atoms/spinner-section.tsx, src/components/design-system/atoms/tabs-section.tsx, src/components/design-system/atoms/textarea-section.tsx, src/components/design-system/atoms/toast-section.tsx, src/components/design-system/atoms/toggle-section.tsx, src/components/design-system/molecules/accordion-section.tsx, src/components/design-system/molecules/auth-button-section.tsx, src/components/design-system/molecules/auth-fields-section.tsx, src/components/design-system/molecules/auth-form-section.tsx, src/components/design-system/molecules/auth-header-section.tsx, src/components/design-system/molecules/cards-section.tsx, src/components/design-system/molecules/category-nav-section.tsx, src/components/design-system/molecules/comments-section.tsx, src/components/design-system/molecules/dialogs-section.tsx, src/components/design-system/molecules/dropdown-section.tsx, src/components/design-system/molecules/filter-bar-section.tsx, src/components/design-system/molecules/form-field-section.tsx, src/components/design-system/molecules/input-group-section.tsx, src/components/design-system/molecules/search-bar-section.tsx, src/components/design-system/molecules/social-auth-section.tsx, src/components/design-system/organisms/grid-section.tsx, src/components/design-system/styles/colors-section.tsx, src/components/design-system/styles/typography-section.tsx, src/components/ui/atoms/avatar.tsx, src/components/ui/atoms/badge.tsx, src/components/ui/atoms/breadcrumb.tsx, src/components/ui/atoms/button.tsx, src/components/ui/atoms/card.tsx, src/components/ui/atoms/checkbox.tsx, src/components/ui/atoms/icon.tsx, src/components/ui/atoms/input.tsx, src/components/ui/atoms/label.tsx, src/components/ui/atoms/radio-group.tsx, src/components/ui/atoms/select.tsx, src/components/ui/atoms/skeleton.tsx, src/components/ui/atoms/spinner.tsx, src/components/ui/atoms/star-rating.tsx, src/components/ui/atoms/tabs.tsx, src/components/ui/atoms/textarea.tsx, src/components/ui/atoms/toast.tsx, src/components/ui/atoms/toggle.tsx, src/components/ui/molecules/accordion.tsx, src/components/ui/molecules/AuthButtons.tsx, src/components/ui/molecules/AuthFields.tsx, src/components/ui/molecules/AuthForm.tsx, src/components/ui/molecules/AuthHeader.tsx, src/components/ui/molecules/CategoryNav.tsx, src/components/ui/molecules/CommentForm.tsx, src/components/ui/molecules/CommentItem.tsx, src/components/ui/molecules/dropdown.tsx, src/components/ui/molecules/FilterBar.tsx, src/components/ui/molecules/FormField.tsx, src/components/ui/molecules/InputGroup.tsx, src/components/ui/molecules/SearchBar.tsx, src/components/ui/molecules/SocialAuth.tsx, src/components/ui/organisms/ContentCard.tsx, src/components/ui/organisms/sidebar-nav.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.repomix/
  bundles.json
functions/
  stripe-subscriptions/
    src/
      appwrite.js
      main.js
      stripe.js
      utils.js
    static/
      index.html
    .gitignore
    .prettierrc.json
    env.d.ts
    package.json
    README.md
src/
  app/
    (auth)/
      forgot-password/
        page.tsx
      login/
        page.test.tsx
        page.tsx
      register/
        page.tsx
      request-verification/
        page.tsx
      reset-password/
        page.tsx
      verify-email/
        page.tsx
      layout.test.tsx
      layout.tsx
    (core)/
      community/
        layout.tsx
        loading.tsx
        page.tsx
      dashboard/
        page.tsx
      design-system/
        atoms/
          page.tsx
        molecules/
          page.tsx
        organisms/
          page.tsx
        sections/
          page.tsx
        styles/
          page.tsx
        layout.tsx
        page.tsx
      knowledge/
        [categorySlug]/
          [slug]/
            page.tsx
          page.tsx
        error.tsx
        generateMetadata.ts
        layout.tsx
        loading.tsx
        page.tsx
      resources/
        [categorySlug]/
          [slug]/
            page.tsx
          page.tsx
        error.tsx
        layout.tsx
        loading.tsx
        page.test.tsx
        page.tsx
    (marketing)/
      about/
        page.tsx
      membership/
        page.tsx
      layout.tsx
      page.tsx
    (subscription)/
      cancel/
        page.tsx
      success/
        page.tsx
      error.tsx
      layout.tsx
      loading.tsx
    api/
      discourse/
        sso/
          route.ts
      image/
        route.ts
      revalidate/
        route.ts
      webhooks/
        appwrite/
          route.ts
    auth/
      callback/
        route.ts
    globals.css
    layout.tsx
    not-found.tsx
  components/
    auth/
      auth-flow.test.tsx
      AuthButtons.tsx
      ForgotPasswordForm.test.tsx
      ForgotPasswordForm.tsx
      LoginFields.test.tsx
      LoginFields.tsx
      LoginHeader.tsx
      MobileAuthButtons.tsx
      RegisterFields.test.tsx
      RegisterFields.tsx
      RegisterHeader.tsx
      RequestVerificationForm.test.tsx
      RequestVerificationForm.tsx
      ResetPasswordForm.test.tsx
      ResetPasswordForm.tsx
      SocialAuth.test.tsx
      VerifyEmailForm.test.tsx
      VerifyEmailForm.tsx
    core/
      community/
        CommunityCTA.tsx
        CommunityIntro.tsx
      knowledge/
        entries/
          ArticleEntry.tsx
          DefaultEntry.tsx
          EntryModal.tsx
          HowToEntry.tsx
          InfographicEntry.tsx
        hero/
          EnhancedIntroduction.tsx
          KnowledgeHero.tsx
        CategoryHeader.tsx
        EnhancedCategoryHeader.tsx
        EnhancedKnowledgeCategoryCard.tsx
        EnhancedKnowledgeCategoryGrid.tsx
        EnhancedKnowledgeGrid.tsx
        FeaturedKnowledge.tsx
        FilterPanel.tsx
        KnowledgeCard.tsx
        KnowledgeCardSkeleton.tsx
        KnowledgeCategoryCard.tsx
        KnowledgeCategoryGrid.tsx
        KnowledgeEntryHeader.tsx
        KnowledgeGrid.tsx
        LoadingOverlay.tsx
        SearchBar.tsx
        UrlSync.tsx
      resources/
        entries/
          DefaultEntry.tsx
        CategoryHeader.tsx
        CategoryNavWrapper.tsx
        FeaturedResources.tsx
        LoadingOverlay.tsx
        ResourceCard.tsx
        ResourceCardSkeleton.tsx
        ResourceCategoryCard.tsx
        ResourceCategoryGrid.test.tsx
        ResourceCategoryGrid.tsx
        ResourceGrid.tsx
        ResourceHeader.tsx
        UrlSync.tsx
    design-system/
      atoms/
        avatar-section.tsx
        badge-section.tsx
        breadcrumb-section.tsx
        button-section.tsx
        card-section.tsx
        checkbox-section.tsx
        icon-section.tsx
        input-section.tsx
        label-section.tsx
        radio-group-section.tsx
        rating-section.tsx
        select-section.tsx
        skeleton-section.tsx
        spinner-section.tsx
        tabs-section.tsx
        textarea-section.tsx
        toast-section.tsx
        toggle-section.tsx
      molecules/
        accordion-section.tsx
        auth-button-section.tsx
        auth-fields-section.tsx
        auth-form-section.tsx
        auth-header-section.tsx
        cards-section.tsx
        category-nav-section.tsx
        comments-section.tsx
        dialogs-section.tsx
        dropdown-section.tsx
        filter-bar-section.tsx
        form-field-section.tsx
        input-group-section.tsx
        search-bar-section.tsx
        social-auth-section.tsx
      organisms/
        grid-section.tsx
      styles/
        colors-section.tsx
        typography-section.tsx
      inputs-section.tsx
    marketing/
      about/
        About.tsx
        AboutHero.tsx
        OurStory.tsx
        WhatWeBelieve.tsx
        WhoWeAre.tsx
      home/
        CorePillars.tsx
        FounderNote.tsx
        FoundingMember.tsx
        Hero.tsx
        HeroScrollAnimation.tsx
        InternetsAMess.tsx
        NoBs.tsx
        NotForEveryone.tsx
      membership/
        AffiliateNote.tsx
        FoundingMemberOffer.tsx
        IdealMember.tsx
        MemberBenefits.tsx
        MembershipHero.tsx
        MembershipIntro.tsx
        WhyNotFree.tsx
    shared/
      navigation/
        DesktopNavLinks.tsx
        MemberNavLinks.tsx
        MobileMenu.tsx
        Navbar.tsx
        PublicNavLinks.tsx
      CTA.tsx
      Footer.tsx
      InfiniteGrid.tsx
      premium-card.tsx
      wyosIcon.tsx
    ui/
      atoms/
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        card.tsx
        checkbox.tsx
        icon.tsx
        input.tsx
        label.tsx
        radio-group.tsx
        select.tsx
        skeleton.tsx
        spinner.tsx
        star-rating.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toggle.tsx
      molecules/
        accordion.tsx
        AuthButtons.tsx
        AuthFields.tsx
        AuthForm.tsx
        AuthHeader.tsx
        CategoryNav.tsx
        CommentForm.tsx
        CommentItem.tsx
        dropdown.tsx
        FilterBar.tsx
        FormField.tsx
        InputGroup.tsx
        SearchBar.tsx
        SocialAuth.tsx
      organisms/
        ContentCard.tsx
        sidebar-nav.tsx
      action-search-bar.tsx
      aurora-background.tsx
      beams-background.tsx
      button.test.tsx
      checkbox.tsx
      container-scroll-animation.tsx
      container.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      fading-divider.tsx
      form.tsx
      glowing-effect.tsx
      hover-border-gradient.tsx
      hover-button.tsx
      input-with-label-animation.tsx
      input.tsx
      label.tsx
      loading-spinner.tsx
      magic-card.tsx
      modal-pricing.tsx
      navigation-menu.tsx
      section.tsx
      separator.tsx
      sheet.tsx
      shiny-button.tsx
      spotlight.tsx
      text-effect.tsx
      text-reveal.tsx
      toaster.tsx
      tooltip.tsx
      typography.tsx
  lib/
    api/
      knowledge/
        hooks.ts
      resources/
        hooks.ts
    config/
      env.ts
    hooks/
      auth/
        useForgotPassword.ts
        useLogin.ts
        useRegister.ts
        useResetPassword.ts
        useVerifyEmail.ts
      shared/
        useDebounce.ts
        useMobile.ts
        useOutsideClick.tsx
        useScroll.ts
        useScrollDirection.ts
        useToast.ts
      useKnowledgeRevalidation.ts
      useResourcesRevalidation.ts
    providers/
      query-provider.tsx
      smooth-scroll.tsx
    repositories/
      core/
        appwrite-base.repository.ts
        errors.ts
        types.ts
      knowledge/
        knowledge.repository.ts
      resources/
        resource.repository.ts
    utils.ts
    webhooks.ts
  models/
    client/
      config.ts
    server/
      api.ts
      config.ts
      dbSetup.ts
      knowledge.ts
      resources.ts
      storageSetup.ts
    name.ts
  store/
    Auth.ts
    Content.ts
    Ui.ts
    useKnowledgeStore.ts
    useResourcesStore.ts
  types/
    auth/
      auth.ts
    core/
      knowledge/
        category.ts
        entry.ts
        index.ts
        query.ts
      resources/
        category.ts
        entry.ts
        index.ts
        query.ts
      shared/
        pagination.ts
    marketing/
      pricing.ts
    shared/
      animations.ts
      appwrite.ts
      collections.ts
      layout.ts
  middleware.ts
.deepsource.toml
.gitignore
.prettierrc
appwrite.json
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
repomix.config.json
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomix/bundles.json">
{
  "bundles": {
    "styling": {
      "name": "styling",
      "created": "2025-03-06T20:24:58.066Z",
      "lastUsed": "2025-03-06T21:22:28.138Z",
      "tags": [],
      "files": [
        "src/app/globals.css",
        "tailwind.config.ts"
      ]
    },
    "design-system": {
      "name": "design-system",
      "description": "design system files",
      "created": "2025-03-06T20:27:35.152Z",
      "lastUsed": "2025-03-06T21:26:38.966Z",
      "tags": [
        "design",
        "styling"
      ],
      "files": [
        "src/components/design-system/atoms/avatar-section.tsx",
        "src/components/design-system/atoms/badge-section.tsx",
        "src/components/design-system/atoms/breadcrumb-section.tsx",
        "src/components/design-system/atoms/button-section.tsx",
        "src/components/design-system/atoms/card-section.tsx",
        "src/components/design-system/atoms/checkbox-section.tsx",
        "src/components/design-system/atoms/icon-section.tsx",
        "src/components/design-system/atoms/input-section.tsx",
        "src/components/design-system/atoms/label-section.tsx",
        "src/components/design-system/atoms/radio-group-section.tsx",
        "src/components/design-system/atoms/rating-section.tsx",
        "src/components/design-system/atoms/select-section.tsx",
        "src/components/design-system/atoms/skeleton-section.tsx",
        "src/components/design-system/atoms/spinner-section.tsx",
        "src/components/design-system/atoms/tabs-section.tsx",
        "src/components/design-system/atoms/textarea-section.tsx",
        "src/components/design-system/atoms/toast-section.tsx",
        "src/components/design-system/atoms/toggle-section.tsx",
        "src/components/design-system/molecules/accordion-section.tsx",
        "src/components/design-system/molecules/auth-button-section.tsx",
        "src/components/design-system/molecules/auth-fields-section.tsx",
        "src/components/design-system/molecules/auth-form-section.tsx",
        "src/components/design-system/molecules/auth-header-section.tsx",
        "src/components/design-system/molecules/cards-section.tsx",
        "src/components/design-system/molecules/category-nav-section.tsx",
        "src/components/design-system/molecules/comments-section.tsx",
        "src/components/design-system/molecules/dialogs-section.tsx",
        "src/components/design-system/molecules/dropdown-section.tsx",
        "src/components/design-system/molecules/filter-bar-section.tsx",
        "src/components/design-system/molecules/form-field-section.tsx",
        "src/components/design-system/molecules/input-group-section.tsx",
        "src/components/design-system/molecules/search-bar-section.tsx",
        "src/components/design-system/molecules/social-auth-section.tsx",
        "src/components/design-system/organisms/grid-section.tsx",
        "src/components/design-system/styles/colors-section.tsx",
        "src/components/design-system/styles/typography-section.tsx",
        "src/components/ui/atoms/avatar.tsx",
        "src/components/ui/atoms/badge.tsx",
        "src/components/ui/atoms/breadcrumb.tsx",
        "src/components/ui/atoms/button.tsx",
        "src/components/ui/atoms/card.tsx",
        "src/components/ui/atoms/checkbox.tsx",
        "src/components/ui/atoms/icon.tsx",
        "src/components/ui/atoms/input.tsx",
        "src/components/ui/atoms/label.tsx",
        "src/components/ui/atoms/radio-group.tsx",
        "src/components/ui/atoms/select.tsx",
        "src/components/ui/atoms/skeleton.tsx",
        "src/components/ui/atoms/spinner.tsx",
        "src/components/ui/atoms/star-rating.tsx",
        "src/components/ui/atoms/tabs.tsx",
        "src/components/ui/atoms/textarea.tsx",
        "src/components/ui/atoms/toast.tsx",
        "src/components/ui/atoms/toggle.tsx",
        "src/components/ui/molecules/accordion.tsx",
        "src/components/ui/molecules/AuthButtons.tsx",
        "src/components/ui/molecules/AuthFields.tsx",
        "src/components/ui/molecules/AuthForm.tsx",
        "src/components/ui/molecules/AuthHeader.tsx",
        "src/components/ui/molecules/CategoryNav.tsx",
        "src/components/ui/molecules/CommentForm.tsx",
        "src/components/ui/molecules/CommentItem.tsx",
        "src/components/ui/molecules/dropdown.tsx",
        "src/components/ui/molecules/FilterBar.tsx",
        "src/components/ui/molecules/FormField.tsx",
        "src/components/ui/molecules/InputGroup.tsx",
        "src/components/ui/molecules/SearchBar.tsx",
        "src/components/ui/molecules/SocialAuth.tsx",
        "src/components/ui/organisms/ContentCard.tsx",
        "src/components/ui/organisms/sidebar-nav.tsx"
      ]
    }
  }
}
</file>

<file path="functions/stripe-subscriptions/src/appwrite.js">
import { Client, Users } from 'node-appwrite';

const LabelsSubscriber = 'subscriber';

class AppwriteService {
  constructor(apiKey) {
    const client = new Client();
    client
      .setEndpoint(process.env.APPWRITE_FUNCTION_API_ENDPOINT)
      .setProject(process.env.APPWRITE_FUNCTION_PROJECT_ID)
      .setKey(apiKey);

    this.users = new Users(client);
  }

  /**
   * @param {string} userId
   * @returns {Promise<void>}
   */
  async deleteSubscription(userId) {
    const labels = (await this.users.get(userId)).labels.filter(
      (label) => label !== LabelsSubscriber
    );

    await this.users.updateLabels(userId, labels);
  }

  /**
   * @param {string} userId
   * @returns {Promise<void>}
   */
  async createSubscription(userId) {
    const labels = (await this.users.get(userId)).labels;
    labels.push(LabelsSubscriber);

    await this.users.updateLabels(userId, labels);
  }
}

export default AppwriteService;
</file>

<file path="functions/stripe-subscriptions/src/main.js">
import StripeService from './stripe.js';
import AppwriteService from './appwrite.js';
import { getStaticFile, interpolate, throwIfMissing } from './utils.js';

export default async (context) => {
  const { req, res, log, error } = context;

  throwIfMissing(process.env, ['STRIPE_SECRET_KEY', 'STRIPE_WEBHOOK_SECRET']);

  if (req.method === 'GET') {
    const html = interpolate(getStaticFile('index.html'), {
      APPWRITE_FUNCTION_API_ENDPOINT:
        process.env.APPWRITE_FUNCTION_API_ENDPOINT,
      APPWRITE_FUNCTION_PROJECT_ID: process.env.APPWRITE_FUNCTION_PROJECT_ID,
      APPWRITE_FUNCTION_ID: process.env.APPWRITE_FUNCTION_ID,
    });

    return res.text(html, 200, { 'Content-Type': 'text/html; charset=utf-8' });
  }

  const appwrite = new AppwriteService(context.req.headers['x-appwrite-key']);
  const stripe = new StripeService();

  switch (req.path) {
    case '/subscribe':
      const fallbackUrl = req.scheme + '://' + req.headers['host'] + '/';

      const successUrl = req.body?.successUrl ?? fallbackUrl;
      const failureUrl = req.body?.failureUrl ?? fallbackUrl;

      const userId = req.headers['x-appwrite-user-id'];
      if (!userId) {
        error('User ID not found in request.');
        return res.redirect(failureUrl, 303);
      }

      const session = await stripe.checkoutSubscription(
        context,
        userId,
        successUrl,
        failureUrl
      );
      if (!session) {
        error('Failed to create Stripe checkout session.');
        return res.redirect(failureUrl, 303);
      }

      context.log('Session:');
      context.log(session);

      log(`Created Stripe checkout session for user ${userId}.`);
      return res.redirect(session.url, 303);

    case '/webhook':
      const event = stripe.validateWebhook(context, req);
      if (!event) {
        return res.json({ success: false }, 401);
      }

      context.log('Event:');
      context.log(event);

      if (event.type === 'customer.subscription.created') {
        const session = event.data.object;
        const userId = session.metadata.userId;

        await appwrite.createSubscription(userId);
        log(`Created subscription for user ${userId}`);
        return res.json({ success: true });
      }

      if (event.type === 'customer.subscription.deleted') {
        const session = event.data.object;
        const userId = session.metadata.userId;

        await appwrite.deleteSubscription(userId);
        log(`Deleted subscription for user ${userId}`);
        return res.json({ success: true });
      }

      return res.json({ success: true });

    default:
      return res.text('Not Found', 404);
  }
};
</file>

<file path="functions/stripe-subscriptions/src/stripe.js">
/// <reference types="stripe-event-types" />

import stripe from 'stripe';

class StripeService {
  constructor() {
    // Note: stripe cjs API types are faulty
    /** @type {import('stripe').Stripe} */
    // @ts-ignore
    this.client = stripe(process.env.STRIPE_SECRET_KEY);
  }

  /**
   * @param {string} userId
   * @param {string} successUrl
   * @param {string} failureUrl
   */
  async checkoutSubscription(context, userId, successUrl, failureUrl) {
    /** @type {import('stripe').Stripe.Checkout.SessionCreateParams.LineItem} */
    const lineItem = {
      price_data: {
        unit_amount: 1000, // $10.00
        currency: 'usd',
        recurring: {
          interval: 'month',
        },
        product_data: {
          name: 'Premium Subscription',
        },
      },
      quantity: 1,
    };

    try {
      return await this.client.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: [lineItem],
        success_url: successUrl,
        cancel_url: failureUrl,
        client_reference_id: userId,
        subscription_data: {
          metadata: {
            userId,
          },
        },
        mode: 'subscription',
      });
    } catch (err) {
      context.error(err);
      return null;
    }
  }

  /**
   * @returns {import("stripe").Stripe.DiscriminatedEvent | null}
   */
  validateWebhook(context, req) {
    try {
      const event = this.client.webhooks.constructEvent(
        req.bodyBinary,
        req.headers['stripe-signature'],
        process.env.STRIPE_WEBHOOK_SECRET
      );
      return /** @type {import("stripe").Stripe.DiscriminatedEvent} */ (event);
    } catch (err) {
      context.error(err);
      return null;
    }
  }
}

export default StripeService;
</file>

<file path="functions/stripe-subscriptions/src/utils.js">
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

/**
 * Throws an error if any of the keys are missing from the object
 * @param {*} obj
 * @param {string[]} keys
 * @throws {Error}
 */
export function throwIfMissing(obj, keys) {
  const missing = [];
  for (let key of keys) {
    if (!(key in obj) || !obj[key]) {
      missing.push(key);
    }
  }
  if (missing.length > 0) {
    throw new Error(`Missing required fields: ${missing.join(', ')}`);
  }
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const staticFolder = path.join(__dirname, '../static');

/**
 * Returns the contents of a file in the static folder
 * @param {string} fileName
 * @returns {string} Contents of static/{fileName}
 */
export function getStaticFile(fileName) {
  return fs.readFileSync(path.join(staticFolder, fileName)).toString();
}

/**
 * @param {string} template
 * @param {Record<string, string | undefined>} values
 * @returns {string}
 */
export function interpolate(template, values) {
  return template.replace(/{{([^}]+)}}/g, (_, key) => values[key] || '');
}
</file>

<file path="functions/stripe-subscriptions/static/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Stripe Subscriptions demo</title>

    <link rel="stylesheet" href="https://unpkg.com/@appwrite.io/pink@0" />
    <link rel="stylesheet" href="https://unpkg.com/@appwrite.io/pink-icons@0" />

    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
  </head>
  <body class="theme-dark">
    <main class="main-content">
      <div class="top-cover u-padding-block-end-56">
        <div class="container">
          <div
            class="u-flex u-gap-16 u-flex-justify-center u-margin-block-start-16"
          >
            <h1 class="heading-level-1">Stripe Subscriptions demo</h1>
            <code class="u-un-break-text"></code>
          </div>
          <p
            class="body-text-1 u-normal u-margin-block-start-8"
            style="max-width: 50rem"
          >
            Use this demo to create Stripe subscription. Once subscribed, label
            is added to an user. You can then use this to give permissions to
            subscribers only.
          </p>
        </div>
      </div>
      <div x-data="{}" class="container u-margin-block-start-negative-56">
        <div class="card u-flex u-gap-24 u-flex-vertical">
          <template x-if="$store.auth.user === null">
            <p>Loading..</p>
          </template>
          <template x-if="$store.auth.user === false">
            <div>
              <p class="heading-level-4">Subscription status</p>
              <p class="text u-margin-block-start-8">
                Only registered users can create subscriptions.
              </p>

              <button
                x-on:click="$store.auth.register()"
                class="button u-margin-block-start-16"
              >
                <span class="text">Register as anonymous</span>
              </button>
            </div>
          </template>
          <template x-if="$store.auth.user">
            <div>
              <p class="heading-level-4">Subscription status</p>

              <div class="u-margin-block-start-8">
                <template x-if="$store.auth.user.labels.includes('subscriber')">
                  <div class="status is-complete">
                    <span class="status-icon"></span>
                    <span class="text">Subscribed</span>
                  </div>
                </template>
                <template
                  x-if="!$store.auth.user.labels.includes('subscriber')"
                >
                  <div>
                    <div class="status is-failed">
                      <span class="status-icon"></span>
                      <span class="text">Not subscibed</span>
                    </div>

                    <section
                      class="alert is-standalone is-info u-margin-block-start-16"
                    >
                      <div class="alert-grid">
                        <span class="icon-info" aria-hidden="true"></span>
                        <div class="alert-content">
                          <h6 class="alert-title">
                            Payment processing can take some time.
                          </h6>
                          <p class="alert-message">
                            If you paid, please wait a few minutes and refresh
                            the page.
                          </p>
                        </div>
                      </div>
                    </section>
                  </div>
                </template>
              </div>

              <div class="u-flex u-gap-16">
                <template
                  x-if="!$store.auth.user.labels.includes('subscriber')"
                >
                  <button
                    x-on:click="subscribe()"
                    class="button u-margin-block-start-16"
                  >
                    <span class="text">Subscribe with Stripe</span>
                  </button>
                </template>

                <button
                  x-on:click="$store.auth.signOut()"
                  class="button is-secondary u-margin-block-start-16"
                >
                  <span class="text">Sign out</span>
                </button>
              </div>
            </div>
          </template>
        </div>
      </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/appwrite@12.0.0"></script>
    <script>
      const { Client, Account, Functions } = Appwrite;
      const client = new Client()
        .setEndpoint('{{APPWRITE_FUNCTION_API_ENDPOINT}}')
        .setProject('{{APPWRITE_FUNCTION_PROJECT_ID}}');
      const account = new Account(client);
      const functions = new Functions(client);

      async function subscribe() {
        const execution = await functions.createExecution(
          '{{APPWRITE_FUNCTION_ID}}',
          JSON.stringify({
            failureUrl: window.location.href,
            successUrl: window.location.href,
          }),
          false,
          '/subscribe',
          'POST',
          {
            'Content-Type': 'application/json',
          }
        );
        const url =
          execution.responseHeaders.find(
            (header) => header.name === 'location'
          ) ?? {};
        window.location.replace(url.value ?? '/');
      }

      document.addEventListener('alpine:init', async () => {
        Alpine.store('auth', {
          user: null, // null = loading, false = not logged in, object = logged in

          async init() {
            try {
              this.user = await account.get();
            } catch (err) {
              console.warn(err);
              this.user = false;
            }
          },

          async register() {
            await account.createAnonymousSession();
            this.user = await account.get();
          },
          async signOut() {
            await account.deleteSession('current');
            this.user = false;
          },
        });
      });
    </script>
  </body>
</html>
</file>

<file path="functions/stripe-subscriptions/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Directory used by Appwrite CLI for local development
.appwrite
</file>

<file path="functions/stripe-subscriptions/.prettierrc.json">
{
  "trailingComma": "es5",
  "tabWidth": 2,
  "semi": true,
  "singleQuote": true
}
</file>

<file path="functions/stripe-subscriptions/env.d.ts">
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      APPWRITE_FUNCTION_API_ENDPOINT: string;
      APPWRITE_FUNCTION_PROJECT_ID: string;
      STRIPE_SECRET_KEY: string;
      STRIPE_WEBHOOK_SECRET: string;
    }
  }
}

export {};
</file>

<file path="functions/stripe-subscriptions/package.json">
{
  "name": "subscriptions-with-stripe",
  "version": "1.0.0",
  "description": "",
  "main": "src/main.js",
  "type": "module",
  "scripts": {
    "format": "prettier --write ."
  },
  "dependencies": {
    "node-appwrite": "^12.0.1",
    "stripe": "^15.7.0"
  },
  "devDependencies": {
    "prettier": "^3.2.5",
    "stripe-event-types": "^3.1.0"
  }
}
</file>

<file path="functions/stripe-subscriptions/README.md">
# 💳 Node.js Stripe Subscriptions Function

Receive recurring card payments and grant subscribers extra permissions.

## 🧰 Usage

### `POST /subscribe`

This endpoint initiates a Stripe checkout session for a subscription. The user ID is fetched from the headers of the request. If the user ID is not found or a Stripe checkout session could not be created, the request will be redirected to a cancel URL.

**Parameters**

| Name               | Description                                               | Location | Type               | Sample Value                |
| ------------------ | --------------------------------------------------------- | -------- | ------------------ | --------------------------- |
| x-appwrite-user-id | User ID from Appwrite.                                    | Header   | String             | 642...7cd                   |
| Content-Type       | The content type of the request body                      | Header   | `application/json` | N/A                         |
| successUrl         | The URL to redirect to after a successful payment.        | Body     | String             | https://example.com/success |
| failureUrl         | The URL to redirect to after a cancelled payment attempt. | Body     | String             | https://example.com/failure |

**Response**

Sample `303` Response:

The response is a redirect to the Stripe checkout session URL or to the cancel URL if an error occurs

```text
Location: https://checkout.stripe.com/pay/cs_test_...#fidkdWxOYHwnP
```

```text
Location: https://mywebapp.com/cancel
```

### `POST /webhook`

This endpoint is a webhook that handles two types of events from Stripe: `customer.subscription.created` and `customer.subscription.deleted`. It validates the incoming request using the Stripe's validateWebhook method. If the validation fails, a `401` response is sent.

**Parameters**

| Name | Description                  | Location | Type   | Sample Value                                                          |
| ---- | ---------------------------- | -------- | ------ | --------------------------------------------------------------------- |
| None | Webhook payload from Stripe. | Body     | Object | [See Stripe documentation](https://stripe.com/docs/api/events/object) |

**Response**

Sample `200` Response:

In case of `customer.subscription.created` event, it gives user `subscriber` label.
In case of `customer.subscription.deleted` event, it takes `subscriber` label away from user.

```json
{ "success": true }
```

Sample `401` Response:

```json
{ "success": false }
```

## ⚙️ Configuration

| Setting           | Value         |
| ----------------- | ------------- |
| Runtime           | Node (18.0)   |
| Entrypoint        | `src/main.js` |
| Build Commands    | `npm install` |
| Permissions       | `any`         |
| Timeout (Seconds) | 15            |

> If using a demo web app to subscribe, make sure to add your function domain as a web platform to your Appwrite project. Doing this fixes CORS errors and allows proper functionality.

## 🔒 Environment Variables

### STRIPE_SECRET_KEY

Secret for sending requests to the Stripe API.

| Question      | Answer                                           |
| ------------- | ------------------------------------------------ |
| Required      | Yes                                              |
| Sample Value  | `sk_test_51J...`                                 |
| Documentation | [Stripe: API Keys](https://stripe.com/docs/keys) |

### STRIPE_WEBHOOK_SECRET

Secret used to validate the Stripe Webhook signature.

| Question      | Answer                                               |
| ------------- | ---------------------------------------------------- |
| Required      | Yes                                                  |
| Sample Value  | `whsec_...`                                          |
| Documentation | [Stripe: Webhooks](https://stripe.com/docs/webhooks) |
</file>

<file path="src/app/(auth)/forgot-password/page.tsx">
'use client';

import { ForgotPasswordForm } from '@/components/auth/ForgotPasswordForm';

export default function ForgotPasswordPage() {
  return <ForgotPasswordForm />;
}
</file>

<file path="src/app/(auth)/login/page.test.tsx">
/**
 * @jest-environment jsdom
 */
import { render, screen } from '@/__tests__/test-utils';
import LoginPage from './page';

// Mock all imports properly
jest.mock('@/components/auth/forms/login/LoginHeader', () => ({
  LoginHeader: function MockLoginHeader() {
    return <div data-testid='login-header'>Mocked Login Header</div>;
  },
}));

jest.mock('@/components/auth/forms/login/LoginFields', () => ({
  LoginFields: function MockLoginFields() {
    return <div data-testid='login-fields'>Mocked Login Fields</div>;
  },
}));

jest.mock('@/components/auth/SocialAuth', () => ({
  SocialAuth: function MockSocialAuth() {
    return <div data-testid='social-auth'>Mocked Social Auth</div>;
  },
}));

interface RippleButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children?: React.ReactNode;
}

jest.mock('@/components/ui/ripple-button', () => ({
  RippleButton: function MockRippleButton(props: RippleButtonProps) {
    return <button data-testid='ripple-button' {...props} />;
  },
}));

jest.mock('@/lib/hooks/auth/useLogin', () => ({
  useLoginForm: () => ({
    isLoading: false,
    error: null,
    handleSubmit: jest.fn((e) => e.preventDefault()),
  }),
}));

describe('LoginPage', () => {
  it('renders login page components', () => {
    render(<LoginPage />);

    expect(screen.getByTestId('login-header')).toBeInTheDocument();
    expect(screen.getByTestId('login-fields')).toBeInTheDocument();
    expect(screen.getByTestId('ripple-button')).toBeInTheDocument();
    expect(screen.getByTestId('social-auth')).toBeInTheDocument();
    expect(screen.getByRole('button')).toHaveTextContent('Login');
  });
});
</file>

<file path="src/app/(auth)/login/page.tsx">
'use client';

import { LoginHeader } from '@/components/auth/LoginHeader';
import { LoginFields } from '@/components/auth/LoginFields';
import { SocialAuth } from '@/components/ui/molecules/SocialAuth';
import { HoverButton } from '@/components/ui/hover-button';
import { useLoginForm } from '@/lib/hooks/auth/useLogin';

export default function LoginPage() {
  const { isLoading, error, handleSubmit } = useLoginForm();

  return (
    <div className='mx-auto w-full max-w-md rounded-none border border-solid border-white/30 bg-white p-4 shadow-input dark:bg-black md:rounded-2xl md:p-8'>
      <LoginHeader error={error} />

      <form className='my-8 space-y-4' onSubmit={handleSubmit}>
        <LoginFields isLoading={isLoading} />

        <HoverButton type='submit' disabled={isLoading} className='w-full'>
          {isLoading ? 'Logging in...' : 'Login'}
        </HoverButton>

        <SocialAuth isLoading={isLoading} />
      </form>
    </div>
  );
}
</file>

<file path="src/app/(auth)/register/page.tsx">
'use client';

import { RegisterHeader } from '@/components/auth/RegisterHeader';
import { RegisterFields } from '@/components/auth/RegisterFields';
import { SocialAuth } from '@/components/ui/molecules/SocialAuth';
import { Button } from '@/components/ui/atoms/button';
import { useRegisterForm } from '@/lib/hooks/auth/useRegister';
import { motion } from 'motion/react';

export default function Register() {
  const { isLoading, error, handleSubmit } = useRegisterForm();

  return (
    <div className='relative mx-auto w-full max-w-lg'>
      <div className='absolute inset-0 -z-10'>
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.15),transparent_50%)]' />
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className='relative overflow-hidden rounded-lg border border-zinc-800/50 bg-zinc-900/50 p-6 backdrop-blur-sm md:p-8'
      >
        <div className='absolute inset-0 -z-10 bg-gradient-to-b from-blue-950/50 to-transparent' />

        <RegisterHeader error={error} />

        <form onSubmit={handleSubmit} className='mt-8 space-y-6'>
          <RegisterFields isLoading={isLoading} />

          <Button
            type='submit'
            disabled={isLoading}
            className='w-full bg-blue-900 text-white hover:bg-blue-800 focus:ring-2 focus:ring-blue-900/50 disabled:bg-zinc-800 disabled:text-zinc-400'
          >
            {isLoading ? (
              <span className='flex items-center justify-center gap-2'>
                <svg className='h-5 w-5 animate-spin' viewBox='0 0 24 24'>
                  <circle
                    className='opacity-25'
                    cx='12'
                    cy='12'
                    r='10'
                    stroke='currentColor'
                    strokeWidth='4'
                    fill='none'
                  />
                  <path
                    className='opacity-75'
                    fill='currentColor'
                    d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'
                  />
                </svg>
                Creating Account...
              </span>
            ) : (
              'Write Your Story'
            )}
          </Button>

          <div className='relative my-8'>
            <div className='absolute inset-0 flex items-center'>
              <div className='w-full border-t border-zinc-800/50' />
            </div>
            <div className='relative flex justify-center text-sm'>
              <span className='bg-zinc-900/50 px-2 text-zinc-500'>
                Or continue with
              </span>
            </div>
          </div>

          <SocialAuth isLoading={isLoading} />
        </form>
      </motion.div>
    </div>
  );
}
</file>

<file path="src/app/(auth)/request-verification/page.tsx">
'use client';

import { RequestVerificationForm } from '@/components/auth/RequestVerificationForm';

export default function VerificationPage() {
  return <RequestVerificationForm />;
}
</file>

<file path="src/app/(auth)/reset-password/page.tsx">
'use client';

import { ResetPasswordForm } from '@/components/auth/ResetPasswordForm';
import { useSearchParams } from 'next/navigation';

export default function ResetPasswordPage() {
  const searchParams = useSearchParams();
  const userId = searchParams.get('userId') || '';
  const secret = searchParams.get('secret') || '';

  return <ResetPasswordForm userId={userId} secret={secret} />;
}
</file>

<file path="src/app/(auth)/verify-email/page.tsx">
'use client';

import { VerifyEmailForm } from '@/components/auth/VerifyEmailForm';
import { useSearchParams } from 'next/navigation';

export default function VerifyEmailPage() {
  const searchParams = useSearchParams();
  const userId = searchParams.get('userId') || '';
  const secret = searchParams.get('secret') || '';

  return <VerifyEmailForm userId={userId} secret={secret} />;
}
</file>

<file path="src/app/(auth)/layout.test.tsx">
// src/app/(auth)/layout.test.tsx
/**
 * @jest-environment jsdom
 * @description Tests for the authentication layout
 */
import { render, screen, waitFor, act } from '@/__tests__/test-utils';
import AuthLayout from './layout';
import { useAuthStore } from '@/store/Auth';
import { useRouter } from 'next/navigation';

// Mock the Auth store and Next.js router
jest.mock('@/store/Auth', () => ({
  useAuthStore: jest.fn(),
}));

jest.mock('next/navigation', () => ({
  useRouter: jest.fn(),
}));

describe('AuthLayout', () => {
  const mockVerifySession = jest.fn();
  const mockReplace = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useRouter as jest.Mock).mockReturnValue({
      replace: mockReplace,
    });
  });

  it('shows loading spinner while checking authentication', async () => {
    // Mock verifySession to return a promise that doesn't resolve immediately
    mockVerifySession.mockImplementation(() => new Promise(() => {}));
    
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      session: null,
      hydrated: true,
      verifySession: mockVerifySession,
    });

    await act(async () => {
      render(
        <AuthLayout>
          <div data-testid='child-content'>Test Content</div>
        </AuthLayout>
      );
    });

    // Wait for the component to render the loading state
    await waitFor(() => {
      expect(screen.getByRole('status')).toBeInTheDocument();
    });
    expect(screen.queryByTestId('child-content')).not.toBeInTheDocument();
  });

  it('redirects authenticated users to dashboard', async () => {
    // Mock verifySession to resolve immediately
    mockVerifySession.mockResolvedValue(undefined);
    
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      session: { $id: 'test-session' },
      hydrated: true,
      verifySession: mockVerifySession,
    });

    await act(async () => {
      render(
        <AuthLayout>
          <div data-testid='child-content'>Test Content</div>
        </AuthLayout>
      );
    });

    await waitFor(() => {
      expect(mockReplace).toHaveBeenCalledWith('/dashboard');
    });
  });

  it('renders children for unauthenticated users', async () => {
    mockVerifySession.mockResolvedValueOnce(undefined);

    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      session: null,
      hydrated: true,
      verifySession: mockVerifySession,
    });

    await act(async () => {
      render(
        <AuthLayout>
          <div data-testid='child-content'>Test Content</div>
        </AuthLayout>
      );
    });

    await waitFor(() => {
      expect(screen.getByTestId('child-content')).toBeInTheDocument();
    });
  });
});
</file>

<file path="src/app/(auth)/layout.tsx">
'use client';

import { useAuthStore } from '@/store/Auth';
import { useRouter } from 'next/navigation';
import * as React from 'react';
import { LoadingSpinner } from '@/components/ui/loading-spinner';

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { session, hydrated, verifySession } = useAuthStore();
  const router = useRouter();
  const [isLoading, setIsLoading] = React.useState(true);

  React.useEffect(() => {
    const checkSession = async (): Promise<void> => {
      if (hydrated) {
        try {
          await verifySession();
        } finally {
          setIsLoading(false);
        }
      }
    };

    void checkSession();
  }, [hydrated, verifySession]);

  React.useEffect(() => {
    if (!isLoading && session) {
      router.replace('/dashboard');
    }
  }, [isLoading, session, router]);

  // Show loading state while checking authentication
  if (isLoading) {
    return (
      <div className='flex min-h-screen items-center justify-center'>
        <LoadingSpinner />
      </div>
    );
  }

  // Redirect authenticated users
  if (session) {
    return null;
  }

  return (
    <main className='flex min-h-screen w-full items-center justify-center bg-background px-4 py-12'>
      <div className='w-full max-w-[480px]'>{children}</div>
    </main>
  );
}
</file>

<file path="src/app/(core)/community/layout.tsx">
import type { Metadata } from 'next';
import { Container } from '@/components/ui/container';

export const metadata: Metadata = {
  title: 'Community - WYOS',
  description: 'Connect with authentic individuals committed to real growth',
};

export default function CommunityLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className='relative flex min-h-screen flex-col'>
      <Container as='main' className='flex-1 py-8 md:py-12 lg:py-16'>
        {children}
      </Container>
    </div>
  );
}
</file>

<file path="src/app/(core)/community/loading.tsx">
import { Skeleton } from '@/components/ui/atoms/skeleton';

export default function CommunityLoading() {
  return (
    <div className='space-y-8'>
      <Skeleton className='h-8 w-1/2 rounded-lg' />
      <div className='space-y-4'>
        {[...Array(3)].map((_, i) => (
          <Skeleton
            key={`community-skeleton-${i + 1}`}
            className='h-4 w-full rounded-lg'
          />
        ))}
      </div>
      <Skeleton className='h-12 w-48 rounded-lg' />
    </div>
  );
}
</file>

<file path="src/app/(core)/community/page.tsx">
import { Suspense } from 'react';
import { PageHeader } from '@/components/shared/PageHeader';
import { CommunityIntro } from '@/components/core/community/CommunityIntro';
import { CommunityCTA } from '@/components/core/community/CommunityCTA';
import CommunityLoading from './loading';

export default function CommunityPage() {
  return (
    <>
      <PageHeader
        title='WYOS Community'
        description='Real conversations with people committed to growth'
        pattern='dots'
        size='large'
        align='center'
      />
      <Suspense fallback={<CommunityLoading />}>
        <div className='space-y-12'>
          <CommunityIntro />
          <CommunityCTA />
        </div>
      </Suspense>
    </>
  );
}
</file>

<file path="src/app/(core)/dashboard/page.tsx">
'use client';

import { useAuthStore } from '@/store/Auth';

export default function DashboardPage() {
  const { user } = useAuthStore();

  if (!user) {
    return null;
  }

  return (
    <div className="container mx-auto mt-8">
      <div className="grid gap-4">
        {/* Add your dashboard content here */}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(core)/design-system/atoms/page.tsx">
import { AvatarSection } from '@/components/design-system/atoms/avatar-section';
import { BadgeSection } from '@/components/design-system/atoms/badge-section';
import { ButtonSection } from '@/components/design-system/atoms/button-section';
import { CardSection } from '@/components/design-system/atoms/card-section';
import { CheckboxSection } from '@/components/design-system/atoms/checkbox-section';
import { IconSection } from '@/components/design-system/atoms/icon-section';
import { LabelSection } from '@/components/design-system/atoms/label-section';
import { SelectSection } from '@/components/design-system/atoms/select-section';
import { SpinnerSection } from '@/components/design-system/atoms/spinner-section';
import { RatingSection } from '@/components/design-system/atoms/rating-section';
import { TextareaSection } from '@/components/design-system/atoms/textarea-section';
import { InputSection } from '@/components/design-system/atoms/input-section';
import { ToggleSection } from '@/components/design-system/atoms/toggle-section';
import { BreadcrumbSection } from '@/components/design-system/atoms/breadcrumb-section';
import { RadioGroupSection } from '@/components/design-system/atoms/radio-group-section';
import { SkeletonSection } from '@/components/design-system/atoms/skeleton-section';
import { TabsSection } from '@/components/design-system/atoms/tabs-section';
import { ToastSection } from '@/components/design-system/atoms/toast-section';

export default function AtomsPage() {
  return (
    <div className='space-y-10'>
      <h1 className='font-heading text-4xl font-bold'>Atoms</h1>
      <p className='text-lg text-muted-foreground'>
        Basic building blocks of the interface that can't be broken down any
        further without ceasing to be functional.
      </p>

      {/* Sections with dividers */}
      <div className='space-y-10'>
        <AvatarSection />
        <Divider />
        <BadgeSection />
        <Divider />
        <ButtonSection />
        <Divider />
        <BreadcrumbSection />
        <Divider />
        <CardSection />
        <Divider />
        <CheckboxSection />
        <Divider />
        <IconSection />
        <Divider />
        <InputSection />
        <Divider />
        <LabelSection />
        <Divider />
        <RadioGroupSection />
        <Divider />
        <RatingSection />
        <Divider />
        <SelectSection />
        <Divider />
        <SkeletonSection />
        <Divider />
        <SpinnerSection />
        <Divider />
        <TabsSection />
        <Divider />
        <TextareaSection />
        <Divider />
        <ToastSection />
        <Divider />
        <ToggleSection />
        <Divider />
      </div>
    </div>
  );
}

function Divider() {
  return <hr className='my-8 border-t border-gray-300 dark:border-gray-700' />;
}
</file>

<file path="src/app/(core)/design-system/molecules/page.tsx">
import { CardsSection } from '@/components/design-system/molecules/cards-section';
import { DialogsSection } from '@/components/design-system/molecules/dialogs-section';
import { CategoryNavSection } from '@/components/design-system/molecules/category-nav-section';
import { CommentsSection } from '@/components/design-system/molecules/comments-section';
import { FilterBarSection } from '@/components/design-system/molecules/filter-bar-section';
import { FormFieldSection } from '@/components/design-system/molecules/form-field-section';
import { InputGroupSection } from '@/components/design-system/molecules/input-group-section';
import { SearchBarSection } from '@/components/design-system/molecules/search-bar-section';
import { AccordionSection } from '@/components/design-system/molecules/accordion-section';
import { DropdownMenuSection } from '@/components/design-system/molecules/dropdown-section';
import { AuthButtonsSection } from '@/components/design-system/molecules/auth-button-section';
import { AuthFieldsSection } from '@/components/design-system/molecules/auth-fields-section';
import { AuthFormSection } from '@/components/design-system/molecules/auth-form-section';
import { SocialAuthSection } from '@/components/design-system/molecules/social-auth-section';
import { AuthHeaderSection } from '@/components/design-system/molecules/auth-header-section';

export default function MoleculesPage() {
  return (
    <div className='space-y-10'>
      <h1 className='font-heading text-4xl font-bold'>Molecules</h1>
      <p className='text-lg text-muted-foreground'>
        Molecules are combinations of atoms that form reusable components like
        cards and dialogs.
      </p>
      <AccordionSection />
      <Divider />
      <AuthButtonsSection />
      <Divider />
      <AuthFieldsSection />
      <Divider />
      <AuthFormSection />
      <Divider />
      <AuthHeaderSection />
      <Divider />
      <CardsSection />
      <Divider />
      <CategoryNavSection />
      <Divider />
      <CommentsSection />
      <Divider />
      <DialogsSection />
      <Divider />
      <DropdownMenuSection />
      <Divider />
      <FilterBarSection />
      <Divider />
      <FormFieldSection />
      <Divider />
      <InputGroupSection />
      <Divider />
      <SearchBarSection />
      <Divider />
      <SocialAuthSection />
      <Divider />
    </div>
  );
}

function Divider() {
  return <hr className='my-8 border-t border-gray-300 dark:border-gray-700' />;
}
</file>

<file path="src/app/(core)/design-system/organisms/page.tsx">
import { KnowledgeGridSection } from '@/components/design-system/organisms/grid-section';

export default function OrganismsPage() {
  return (
    <div className='space-y-10'>
      <h1 className='font-heading text-4xl font-bold'>Organisms</h1>
      <p className='text-lg text-muted-foreground'>
        Organisms are complex components composed of molecules and atoms, such
        as grid layouts.
      </p>
      <KnowledgeGridSection />
    </div>
  );
}
</file>

<file path="src/app/(core)/design-system/sections/page.tsx">
import { InputsSection } from '@/components/design-system/inputs-section';

export default function AtomsPage() {
  return (
    <div className='space-y-10'>
      <h1 className='font-heading text-4xl font-bold'>Atoms</h1>
      <p className='text-lg text-muted-foreground'>
        Basic building blocks of the interface that can't be broken down any
        further without ceasing to be functional.
      </p>
      <InputsSection />
      {/* Add more atomic components here */}
    </div>
  );
}
</file>

<file path="src/app/(core)/design-system/styles/page.tsx">
import { ColorsSection } from '@/components/design-system/styles/colors-section';
import { TypographySection } from '@/components/design-system/styles/typography-section';

export default function StylesPage() {
  return (
    <div className='space-y-10'>
      <h1 className='font-heading text-4xl font-bold'>Styles</h1>
      <p className='text-lg text-muted-foreground'>
        Styles define the foundational visual language of the application,
        including colors and typography.
      </p>
      <TypographySection />
      <ColorsSection />
    </div>
  );
}
</file>

<file path="src/app/(core)/design-system/layout.tsx">
import { SidebarNav } from '@/components/ui/organisms/sidebar-nav';

export default function DesignSystemLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className='container flex gap-10 py-28'>
      <aside className='w-64 flex-shrink-0'>
        <SidebarNav />
      </aside>
      <main className='flex-grow'>{children}</main>
    </div>
  );
}
</file>

<file path="src/app/(core)/design-system/page.tsx">
import type { Metadata } from 'next';
import Link from 'next/link';

export const metadata: Metadata = {
  title: 'Design System | WYOS',
  description: 'A comprehensive showcase of the WYOS design system components',
};

export default function DesignSystemPage() {
  return (
    <div className='container py-10'>
      <h1 className='mb-8 mt-8 font-heading text-4xl font-bold'>
        WYOS Design System
      </h1>
      <p className='mb-10 text-lg'>
        Welcome to the WYOS Design System. This comprehensive guide showcases
        all UI components, styles, and patterns used throughout the WYOS
        application.
      </p>

      <div className='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
        <CategoryCard
          title='Atoms'
          description='Basic building blocks of the interface'
          href='/design-system/atoms'
        />
        <CategoryCard
          title='Molecules'
          description='Combinations of atoms that form simple UI components'
          href='/design-system/molecules'
        />
        <CategoryCard
          title='Organisms'
          description='Complex UI components composed of molecules and atoms'
          href='/design-system/organisms'
        />
        <CategoryCard
          title='Templates'
          description='Page-level objects that place components into a layout'
          href='/design-system/templates'
        />
        <CategoryCard
          title='Pages'
          description='Specific instances of templates with real content'
          href='/design-system/pages'
        />
        <CategoryCard
          title='Styles'
          description='Colors, typography, and other foundational styles'
          href='/design-system/styles'
        />
      </div>
    </div>
  );
}

function CategoryCard({
  title,
  description,
  href,
}: {
  title: string;
  description: string;
  href: string;
}) {
  return (
    <Link
      href={href}
      className='block rounded-lg border p-6 transition-colors hover:bg-muted'
    >
      <h2 className='mb-2 font-heading text-2xl font-semibold'>{title}</h2>
      <p className='text-muted-foreground'>{description}</p>
    </Link>
  );
}
</file>

<file path="src/app/(core)/knowledge/[categorySlug]/[slug]/page.tsx">
import { notFound } from 'next/navigation';
import { KnowledgeService } from '@/models/server/knowledge';
import KnowledgeEntryHeader from '@/components/core/knowledge/KnowledgeEntryHeader';
import ArticleEntry from '@/components/core/knowledge/entries/ArticleEntry';
import VideoEntry from '@/components/core/knowledge/entries/VideoEntry';
import HowToEntry from '@/components/core/knowledge/entries/HowToEntry';
import InfographicEntry from '@/components/core/knowledge/entries/InfographicEntry';
import DefaultEntry from '@/components/core/knowledge/entries/DefaultEntry';
import type { JSX } from 'react';

// We declare that params is a Promise of our expected shape.
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string; categorySlug: string }>;
}): Promise<JSX.Element> {
  // Await params. We rename categorySlug to _unusedCategorySlug since it isn’t used.
  const { slug, categorySlug: _unusedCategorySlug } = await params;

  function getEntryComponent(type: string) {
    switch (type) {
      case 'article':
        return ArticleEntry;
      case 'video':
        return VideoEntry;
      case 'how-to':
        return HowToEntry;
      case 'infographic':
        return InfographicEntry;
      default:
        return DefaultEntry;
    }
  }

  try {
    const entry = await KnowledgeService.getEntryBySlug(slug);
    if (!entry) return notFound();

    const EntryComponent = getEntryComponent(entry.type);
    return (
      <article className='mx-auto max-w-3xl px-4 py-8'>
        <KnowledgeEntryHeader entry={entry} />
        <EntryComponent entry={entry} />
      </article>
    );
  } catch (error) {
    console.error('Knowledge entry page error:', error);
    return notFound();
  }
}
</file>

<file path="src/app/(core)/knowledge/[categorySlug]/page.tsx">
import { KnowledgeService } from '@/models/server/knowledge';
import { EnhancedKnowledgeGrid } from '@/components/core/knowledge/EnhancedKnowledgeGrid';
import { EnhancedCategoryHeader } from '@/components/core/knowledge/EnhancedCategoryHeader';
import type { KnowledgeEntry } from '@/types/core/knowledge';

// Declare that params is a Promise carrying our URL parameter.
export default async function CategoryPage({
  params,
}: {
  params: Promise<{ categorySlug: string }>;
}) {
  const { categorySlug } = await params;

  try {
    const category = await KnowledgeService.getCategoryBySlug(categorySlug);
    if (!category) {
      return (
        <div className='mx-auto max-w-3xl px-4 py-8'>
          <h1>Category Not Found</h1>
          <p>
            We couldn&apos;t find any information for the category "
            {categorySlug}".
          </p>
        </div>
      );
    }

    const response = await KnowledgeService.listKnowledgeEntries({
      categoryId: category.$id,
    });

    const initialData = {
      documents: response.documents as KnowledgeEntry[],
      total: response.total,
      hasMore: response.total > 9,
      nextPage: 2,
    };

    return (
      <div className='space-y-12'>
        <EnhancedCategoryHeader
          category={category}
          totalEntries={response.total}
        />
        <EnhancedKnowledgeGrid
          initialData={initialData}
          categorySlug={categorySlug}
        />
      </div>
    );
  } catch (error) {
    console.error('Error in KnowledgeCategoryPage:', error);
    return (
      <div className='mx-auto max-w-3xl px-4 py-8'>
        <h1>Error Loading Category</h1>
        <p>There was an error loading this category. Please try again later.</p>
      </div>
    );
  }
}
</file>

<file path="src/app/(core)/knowledge/error.tsx">
'use client';

export default function Error({
  _error,
  reset,
}: {
  _error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <div className='flex h-screen flex-col items-center justify-center'>
      <h2 className='text-center text-2xl font-bold'>Something went wrong!</h2>
      <button
        onClick={reset}
        className='mt-4 rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600'
      >
        Try again
      </button>
    </div>
  );
}
</file>

<file path="src/app/(core)/knowledge/generateMetadata.ts">
import { KnowledgeService } from '@/models/server/knowledge';

export async function generateStaticParams() {
  const categories = await KnowledgeService.getKnowledgeCategories();
  return categories.map((category) => ({
    categorySlug: category.slug,
  }));
}
</file>

<file path="src/app/(core)/knowledge/layout.tsx">
'use client';

import { useAuthStore } from '@/store/Auth';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import { LoadingSpinner } from '@/components/ui/loading-spinner';

export default function KnowledgeLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { session, hydrated } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    if (hydrated && !session) {
      router.push('/login?redirect=/knowledge');
    }
  }, [hydrated, session, router]);

  if (!hydrated || !session) {
    return (
      <div className='flex min-h-screen items-center justify-center'>
        <LoadingSpinner />
      </div>
    );
  }

  // Removed the Container component to allow full-width backgrounds
  return (
    <div className='relative flex min-h-screen flex-col'>
      {children}
    </div>
  );
}
</file>

<file path="src/app/(core)/knowledge/loading.tsx">
import { Skeleton } from '@/components/ui/atoms/skeleton';

export default function KnowledgeLoading() {
  return (
    <div className='space-y-20'>
      {/* Category Grid Loading */}
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(6)].map((_, i) => (
          <Skeleton key={i} className='aspect-video rounded-xl' />
        ))}
      </div>

      {/* Featured Loading */}
      <div className='space-y-8'>
        <Skeleton className='h-8 w-1/4 rounded-lg' />
        <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className='h-64 rounded-xl' />
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(core)/knowledge/page.tsx">
'use client';

import { Suspense } from 'react';
import { EnhancedKnowledgeCategoryGrid } from '@/components/core/knowledge/EnhancedKnowledgeCategoryGrid';
import { CategoryNav } from '@/components/ui/molecules/CategoryNav';
import { KnowledgeHero } from '@/components/core/knowledge/hero/KnowledgeHero';
import { EnhancedIntroduction } from '@/components/core/knowledge/hero/EnhancedIntroduction';
import KnowledgeLoading from './loading';
import { motion } from 'motion/react';

export default function KnowledgePage() {
  return (
    <div className='flex min-h-screen flex-col bg-[#0c0c10]'>
      {/* Hero Section */}
      <KnowledgeHero
        title='Knowledge Hub'
        description='Curated wisdom for intentional living'
      />

      {/* Main Content */}
      <div className='relative'>
        {/* Gradient connector between hero and content */}
        <div className='absolute inset-x-0 top-0 h-32 bg-gradient-to-b from-[#0c0c10] to-[#0c0c10]/0'></div>

        {/* Introduction Section - Properly positioned */}
        <div className='relative z-10 mx-auto max-w-7xl px-4 pt-24'>
          <EnhancedIntroduction />
        </div>

        {/* Category Grid Section with Seamless Background */}
        <div className='relative mt-20 pb-32'>
          {/* Subtle background for depth - Full width, no limitations */}
          <div className='absolute inset-0 bg-[radial-gradient(ellipse_at_top,rgba(59,130,246,0.1),transparent_70%)] opacity-30' />
          <div className='absolute inset-0 bg-[linear-gradient(to_right,#ffffff02_1px,transparent_1px),linear-gradient(to_bottom,#ffffff02_1px,transparent_1px)] bg-[size:80px_80px] opacity-30' />

          {/* Content */}
          <div className='relative z-10'>
            {/* Section Heading */}
            <div className='mx-auto mb-12 max-w-7xl px-4 text-center'>
              <h2 className='text-3xl font-bold tracking-tight text-white md:text-4xl'>
                Explore Categories
              </h2>
            </div>

            {/* Category Navigation */}
            <CategoryNav 
              categories={[
                { id: '1', name: 'Mindfulness', slug: 'mindfulness' },
                { id: '2', name: 'Productivity', slug: 'productivity' },
                { id: '3', name: 'Wellness', slug: 'wellness' },
                { id: '4', name: 'Philosophy', slug: 'philosophy' },
                { id: '5', name: 'Technology', slug: 'technology' }
              ]}
              selectedCategory={null}
              onSelectAction={(slug) => {
                // Handle category selection - in a real implementation, this would update state
                // or dispatch an action to your Zustand store
                if (slug) {
                  // Navigate or filter by category
                } else {
                  // Show all categories
                }
              }}
            />

            {/* Category Grid and Community Section */}
            <Suspense fallback={<KnowledgeLoading />}>
              <div className='mx-auto max-w-7xl px-4'>
                {/* Category Grid */}
                <EnhancedKnowledgeCategoryGrid />

                {/* Community Suggestions Section */}
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 }}
                  className='mx-auto mt-40 max-w-4xl rounded-xl border border-zinc-800/50 bg-zinc-900/30 p-10 text-center backdrop-blur-sm'
                >
                  <h3 className='mb-4 text-2xl font-medium'>
                    Help Us Grow This Collection
                  </h3>
                  <p className='mx-auto max-w-2xl text-zinc-400'>
                    Found something that's genuinely helped you and should be
                    included here? We're building this knowledge base together.
                    Share your suggestions with us to help others discover
                    valuable insights.
                  </p>
                </motion.div>
              </div>
            </Suspense>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(core)/resources/[categorySlug]/[slug]/page.tsx">
import { notFound } from 'next/navigation';
import { ResourceService } from '@/models/server/resources';
import ResourceHeader from '@/components/core/resources/ResourceHeader';
import AppResource from '@/components/core/resources/entries/AppEntry';
import DefaultResource from '@/components/core/resources/entries/DefaultEntry';

// Declare params as a Promise carrying our URL parameters.
export default async function Page({
  params,
}: {
  params: Promise<{ categorySlug: string; slug: string }>;
}) {
  // We rename categorySlug to _unusedCategorySlug since it isn’t used here.
  const { slug, categorySlug: _unusedCategorySlug } = await params;

  const entry = await ResourceService.getEntryBySlug(slug);
  if (!entry) return notFound();

  const EntryComponent = entry.type === 'app' ? AppResource : DefaultResource;
  return (
    <article className='mx-auto max-w-3xl px-4 py-8'>
      <ResourceHeader entry={entry} />
      <EntryComponent entry={entry} />
    </article>
  );
}
</file>

<file path="src/app/(core)/resources/[categorySlug]/page.tsx">
import { ResourceService } from '@/models/server/resources';
import { ResourceGrid } from '@/components/core/resources/ResourceGrid';
import { CategoryHeader } from '@/components/core/resources/CategoryHeader';
import type { ResourceEntry } from '@/types/core/resources/entry';

export default async function ResourceCategoryPage({
  params,
}: {
  params: Promise<{ categorySlug: string }>;
}) {
  const { categorySlug } = await params;

  try {
    // Fetch the category using its slug.
    const category = await ResourceService.getCategoryBySlug(categorySlug);
    if (!category) {
      return (
        <div className='mx-auto max-w-3xl px-4 py-8'>
          <h1>Category Not Found</h1>
          <p>
            We couldn’t find any information for the category:{' '}
            <strong>{categorySlug}</strong>.
          </p>
        </div>
      );
    }

    // Fetch the resource entries that belong to this category using its $id.
    const response = await ResourceService.listResourceEntries({
      categoryId: category.$id,
    });

    // If no entries are found, show a friendly message.
    if (response.total === 0) {
      return (
        <div className='mx-auto max-w-3xl px-4 py-8'>
          <h1>No Entries Found</h1>
          <p>
            There are no resource entries in the category:{' '}
            <strong>{category.name}</strong>.
          </p>
        </div>
      );
    }

    const initialData = {
      documents: response.documents as ResourceEntry[],
      total: response.total,
      hasMore: response.total > 9,
      nextPage: 2,
    };

    return (
      <div className='space-y-12'>
        <CategoryHeader category={category} totalEntries={response.total} />
        <ResourceGrid initialData={initialData} categoryId={category.$id} />
      </div>
    );
  } catch (error) {
    console.error('Error in ResourceCategoryPage:', error);
    return (
      <div className='mx-auto max-w-3xl px-4 py-8'>
        <h1>Error Loading Category</h1>
        <p>There was an error loading this category. Please try again later.</p>
      </div>
    );
  }
}
</file>

<file path="src/app/(core)/resources/error.tsx">
'use client';

import { Button } from '@/components/ui/atoms/button';
import { useRouter } from 'next/navigation';

export default function ResourcesError({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  const router = useRouter();

  return (
    <div className='rounded-lg border border-destructive bg-destructive/10 p-8 text-center'>
      <h2 className='mb-4 text-xl font-semibold text-destructive'>
        Failed to load Resources.
      </h2>
      <p className='mb-4'>{error.message}</p>
      <div className='flex justify-center gap-4'>
        <Button
          onClick={reset}
          className='rounded bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90'
        >
          Try Again
        </Button>
        <Button
          onClick={() => router.push('/resources')}
          className='rounded bg-secondary px-4 py-2 text-secondary-foreground hover:bg-secondary/90'
        >
          Back to Resources
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(core)/resources/layout.tsx">
'use client';

import { Container } from '@/components/ui/container';
import { useAuthStore } from '@/store/Auth';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import { LoadingSpinner } from '@/components/ui/loading-spinner';

export default function ResourcesLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { session, hydrated } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    if (hydrated && !session) {
      router.push('/login?redirect=/resources');
    }
  }, [hydrated, session, router]);

  if (!hydrated || !session) {
    return (
      <div className='flex min-h-screen items-center justify-center'>
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <div className='relative flex min-h-screen flex-col'>
      <Container as='main' className='flex-1 py-8 md:py-12 lg:py-16'>
        {children}
      </Container>
    </div>
  );
}
</file>

<file path="src/app/(core)/resources/loading.tsx">
import { Skeleton } from '@/components/ui/atoms/skeleton';

export default function ResourceLoading() {
  return (
    <div className='space-y-20'>
      {/* Category Grid Loading */}
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(6)].map((_, i) => (
          <Skeleton key={i} className='aspect-video rounded-xl' />
        ))}
      </div>

      {/* Featured Loading */}
      <div className='space-y-8'>
        <Skeleton className='h-8 w-1/4 rounded-lg' />
        <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className='h-64 rounded-xl' />
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(core)/resources/page.test.tsx">
/**
 * @jest-environment jsdom
 */
import { render, screen } from '@/__tests__/test-utils';
import ResourcesPage from './page';

// Mock all imported components
jest.mock('@/components/shared/layout/PageHeader', () => ({
  PageHeader: function MockPageHeader({ title }: { title: string }) {
    return <h1 data-testid="page-header">{title}</h1>;
  },
}));

jest.mock('@/components/core/resources/CategoryNav', () => ({
  CategoryNav: function MockCategoryNav() {
    return <nav data-testid="category-nav">Category Navigation</nav>;
  },
}));

jest.mock('@/components/core/resources/ResourceCategoryGrid', () => ({
  ResourceCategoryGrid: function MockResourceCategoryGrid() {
    return <div data-testid="resource-category-grid">Resource Categories</div>;
  },
}));

jest.mock('@/components/core/resources/FeaturedResources', () => ({
  FeaturedResources: function MockFeaturedResources() {
    return <div data-testid="featured-resources">Featured Resources</div>;
  },
}));

// Mock the loading component
jest.mock('./loading', () => ({
  __esModule: true,
  default: function MockResourceLoading() {
    return <div data-testid="resource-loading">Loading...</div>;
  },
}));

// Mock Suspense to immediately render children instead of fallback
jest.mock('react', () => {
  const originalReact = jest.requireActual('react');
  return {
    ...originalReact,
    Suspense: ({ children }: { children: React.ReactNode }) => <>{children}</>,
  };
});

describe('ResourcesPage', () => {
  it('renders the page with correct components', () => {
    render(<ResourcesPage />);
    
    // Check if the PageHeader is rendered with correct title
    expect(screen.getByTestId('page-header')).toBeInTheDocument();
    expect(screen.getByTestId('page-header')).toHaveTextContent('Resources');
    
    // Check if the CategoryNav is rendered
    expect(screen.getByTestId('category-nav')).toBeInTheDocument();
    
    // Check if the ResourceCategoryGrid is rendered
    expect(screen.getByTestId('resource-category-grid')).toBeInTheDocument();
    
    // Check if the FeaturedResources is rendered
    expect(screen.getByTestId('featured-resources')).toBeInTheDocument();
  });
});
</file>

<file path="src/app/(core)/resources/page.tsx">
import { Suspense } from 'react';
import { ResourceService } from '@/models/server/resources';
import { PageHeader } from '@/components/shared/PageHeader';
import { ResourceCategoryGrid } from '@/components/core/resources/ResourceCategoryGrid';
import { FeaturedResources } from '@/components/core/resources/FeaturedResources';
import { CategoryNavWrapper } from '@/components/core/resources/CategoryNavWrapper';
import ResourceLoading from './loading';

export default function ResourcesPage() {
  return (
    <>
      <PageHeader
        title='Resources'
        description='Curated resources for personal and professional growth'
        pattern='dots'
        size='large'
        align='center'
      />
      <CategoryNavWrapper />
      <Suspense fallback={<ResourceLoading />}>
        <div className='space-y-20'>
          <ResourceCategoryGrid />
          <FeaturedResources />
        </div>
      </Suspense>
    </>
  );
}

export async function generateStaticParams() {
  // Ensure that ResourceService.getResourceCategories() is implemented
  // similarly to KnowledgeService.getKnowledgeCategories()
  const categories = await ResourceService.getResourceCategories();
  return categories.map((category) => ({
    categorySlug: category.slug,
  }));
}
</file>

<file path="src/app/(marketing)/about/page.tsx">
'use client';

import { AboutHero } from '@/components/marketing/about/AboutHero';
import { OurStory } from '@/components/marketing/about/OurStory';
import { WhoWeAre } from '@/components/marketing/about/WhoWeAre';
import { WhatWeBelieve } from '@/components/marketing/about/WhatWeBelieve';
import { CTA } from '@/components/shared/CTA';

export default function AboutPage() {
  return (
    <main className='flex flex-col'>
      <AboutHero />
      <OurStory />
      <WhoWeAre />
      <WhatWeBelieve />
      <CTA
        headline='Become A Founding Member'
        buttonText='Get Started'
        subtext="We're not trying to attract everyone - we're looking for the right people. If you're tired of the bullshit and ready to help build something real, join us."
      />
    </main>
  );
}
</file>

<file path="src/app/(marketing)/membership/page.tsx">
// src/app/(marketing)/membership/page.tsx
import { MembershipHero } from '@/components/marketing/membership/MembershipHero';
import { MembershipIntro } from '@/components/marketing/membership/MembershipIntro';
import { WhyNotFree } from '@/components/marketing/membership/WhyNotFree';
import { MemberBenefits } from '@/components/marketing/membership/MemberBenefits';
import { FoundingMemberOffer } from '@/components/marketing/membership/FoundingMemberOffer';
import { AffiliateNote } from '@/components/marketing/membership/AffiliateNote';
import { IdealMember } from '@/components/marketing/membership/IdealMember';
import { CTA } from '@/components/shared/CTA';

export default function MembershipPage() {
  return (
    <main className='flex flex-col'>
      <MembershipHero />
      <MembershipIntro />
      <WhyNotFree />
      <MemberBenefits />
      <FoundingMemberOffer />
      <AffiliateNote />
      <IdealMember />
      <CTA
        headline='Ready to Build Something Real?'
        buttonText='Become a Founding Member'
        subtext="If you've read this far and you're still interested, you might be exactly who we're looking for. Join us and let's create something that actually helps people cut through the noise and move forward."
      />
    </main>
  );
}
</file>

<file path="src/app/(marketing)/layout.tsx">
export default function MainLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return <div className='flex min-h-screen flex-col'>{children}</div>;
}
</file>

<file path="src/app/(marketing)/page.tsx">
import { Hero } from '@/components/marketing/home/Hero';
import { CTA } from '@/components/shared/CTA';
import { CorePillars } from '@/components/marketing/home/CorePillars';
import { NoBs } from '@/components/marketing/home/NoBs';
import { NotForEveryone } from '@/components/marketing/home/NotForEveryone';
import { FoundingMember } from '@/components/marketing/home/FoundingMember';
import { FounderNote } from '@/components/marketing/home/FounderNote';
import { InternetsAMess } from '@/components/marketing/home/InternetsAMess';

export default function HomePage() {
  return (
    <>
      <Hero />
      <InternetsAMess />
      <CorePillars />
      <NoBs />
      <NotForEveryone />
      <FoundingMember />
      <FounderNote />

      <CTA
        headline='Ready to start your journey?'
        buttonText='Get Started Free'
        subtext='Join thousands of others who are taking control of their story.'
      />
    </>
  );
}
</file>

<file path="src/app/(subscription)/cancel/page.tsx">
'use client';

import { useToast } from '@/lib/hooks/shared/useToast';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function CancelPage() {
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    toast({
      variant: 'destructive',
      title: 'Cancelled',
      description: 'Your subscription was not completed.',
    });

    // Redirect back to pricing after showing the message
    setTimeout(() => router.push('/pricing'), 2000);
  }, [toast, router]);

  return (
    <div className='flex min-h-screen items-center justify-center'>
      <div className='text-center'>
        <h1 className='text-4xl font-bold'>Subscription Cancelled</h1>
        <p className='mt-4'>Redirecting back to pricing...</p>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(subscription)/success/page.tsx">
'use client';

import { useToast } from '@/lib/hooks/shared/useToast';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function SuccessPage() {
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    toast({
      title: 'Success!',
      description: 'Your subscription has been processed.',
    });

    // Redirect to dashboard after showing the message
    setTimeout(() => router.push('/dashboard'), 2000);
  }, [toast, router]);

  return (
    <div className='flex min-h-screen items-center justify-center'>
      <div className='text-center'>
        <h1 className='text-4xl font-bold'>Thank You!</h1>
        <p className='mt-4'>Redirecting to dashboard...</p>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(subscription)/error.tsx">
'use client';

import { useEffect } from 'react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/atoms/button';
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import { XCircle } from 'lucide-react';

export default function SubscriptionError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error('Subscription error:', error);
  }, [error]);

  return (
    <Card>
      <CardHeader>
        <CardTitle className='flex items-center gap-2 text-2xl'>
          <XCircle className='h-8 w-8 text-red-500' />
          Error
        </CardTitle>
      </CardHeader>
      <CardContent className='space-y-4'>
        <Alert variant='destructive'>
          <AlertTitle>Something went wrong</AlertTitle>
          <AlertDescription>
            {error.message ||
              'An error occurred while processing your subscription.'}
          </AlertDescription>
        </Alert>
        <div className='prose dark:prose-invert'>
          <p>We apologize for the inconvenience. You can try:</p>
          <ul>
            <li>Refreshing the page</li>
            <li>Checking your internet connection</li>
            <li>Contacting our support team if the problem persists</li>
          </ul>
        </div>
      </CardContent>
      <CardFooter className='flex gap-4'>
        <Button onClick={() => reset()} className='flex items-center gap-2'>
          Try Again
        </Button>
        <Button
          onClick={() => (window.location.href = '/contact')}
          variant='outline'
          className='flex items-center gap-2'
        >
          Contact Support
        </Button>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/app/(subscription)/layout.tsx">
'use client';

import { type ReactNode } from 'react';

interface SubscriptionLayoutProps {
  children: ReactNode;
}

export default function SubscriptionLayout({
  children,
}: SubscriptionLayoutProps) {
  return (
    <div className='flex min-h-screen flex-col'>
      <main className='flex-1'>
        <div className='container mx-auto px-4 py-8'>
          <div className='mx-auto max-w-2xl space-y-8'>{children}</div>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/app/(subscription)/loading.tsx">
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from '@/components/ui/atoms/card';
import { Skeleton } from '@/components/ui/atoms/skeleton';

export default function SubscriptionLoading() {
  return (
    <Card>
      <CardHeader>
        <Skeleton className='h-8 w-3/4' />
      </CardHeader>
      <CardContent className='space-y-4'>
        <Skeleton className='h-4 w-full' />
        <Skeleton className='h-4 w-5/6' />
        <Skeleton className='h-4 w-4/6' />
        <div className='space-y-3'>
          <Skeleton className='h-4 w-3/4' />
          <Skeleton className='h-4 w-2/3' />
          <Skeleton className='h-4 w-1/2' />
        </div>
      </CardContent>
      <CardFooter className='space-x-4'>
        <Skeleton className='h-10 w-32' />
        <Skeleton className='h-10 w-32' />
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/app/api/discourse/sso/route.ts">
import { Client, Account } from 'appwrite';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import crypto from 'crypto';

// Make sure the SSO secret is set
const DISCOURSE_SSO_SECRET = process.env.DISCOURSE_SSO_SECRET;
if (!DISCOURSE_SSO_SECRET) {
  throw new Error('DISCOURSE_SSO_SECRET is not configured.');
}

// Helper for URL-safe Base64 encoding
function base64URLEncode(str: string): string {
  return Buffer.from(str)
    .toString('base64')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/[=]+$/, '');
}

export async function GET(req: NextRequest) {
  if (!DISCOURSE_SSO_SECRET) {
    return NextResponse.json(
      { error: 'SSO secret not configured' },
      { status: 500 }
    );
  }

  const { searchParams } = new URL(req.url);
  const sso = searchParams.get('sso');
  const sig = searchParams.get('sig');

  if (!sso || !sig) {
    return NextResponse.json(
      { error: 'Missing SSO parameters' },
      { status: 400 }
    );
  }

  // Verify the SSO request from Discourse
  const hmac = crypto.createHmac('sha256', DISCOURSE_SSO_SECRET);
  hmac.update(sso);
  const computedSig = hmac.digest('hex');

  // Use timingSafeEqual to prevent timing attacks.
  if (!crypto.timingSafeEqual(Buffer.from(computedSig), Buffer.from(sig))) {
    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });
  }

  try {
    // Look for the Appwrite session cookie (named "a_session_")
    const sessionCookie = req.cookies.get('a_session_');
    if (!sessionCookie?.value) {
      // No session present: redirect to your main login page with a redirect back.
      const loginUrl = new URL('/login', req.url);
      loginUrl.searchParams.set('redirect', '/community');
      return NextResponse.redirect(loginUrl.toString());
    }

    // Initialize Appwrite client using your environment variables.
    const client = new Client()
      .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT || '')
      .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID || '');
    // Use the session cookie value for authentication.
    client.setSession(sessionCookie.value);

    const account = new Account(client);
    const user = await account.get();

    // Decode the SSO payload sent by Discourse
    const decodedPayload = Buffer.from(sso, 'base64').toString();
    const params = new URLSearchParams(decodedPayload);
    const nonce = params.get('nonce');
    const returnUrl = params.get('return_sso_url');

    if (!nonce || !returnUrl) {
      return NextResponse.json(
        { error: 'Invalid SSO payload' },
        { status: 400 }
      );
    }

    // Build the payload for Discourse with user data.
    const payload = new URLSearchParams({
      nonce,
      external_id: user.$id,
      email: user.email,
      username: user.name || user.email.split('@')[0],
      name: user.name || '',
      avatar_url: user.prefs?.avatarUrl || '', // adjust based on your Appwrite user model
      admin: user.prefs?.isAdmin === true ? 'true' : 'false',
    }).toString();

    // Base64 encode the payload (URL-safe)
    const base64Payload = base64URLEncode(payload);

    // Sign the payload using HMAC-SHA256
    const returnHmac = crypto.createHmac('sha256', DISCOURSE_SSO_SECRET);
    returnHmac.update(base64Payload);
    const returnSig = returnHmac.digest('hex');

    // Build the final URL to redirect back to Discourse.
    const finalUrl = new URL(returnUrl);
    finalUrl.searchParams.set('sso', base64Payload);
    finalUrl.searchParams.set('sig', returnSig);

    return NextResponse.redirect(finalUrl.toString());
  } catch (error) {
    console.error('Error in Discourse SSO:', error);
    return NextResponse.json(
      { error: 'Authentication failed' },
      { status: 401 }
    );
  }
}
</file>

<file path="src/app/api/image/route.ts">
import { NextResponse } from 'next/server';
import { Storage } from 'appwrite';
import { client } from '@/models/client/config';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const bucketId = searchParams.get('bucketId');
    const fileId = searchParams.get('fileId');

    if (!bucketId || !fileId) {
      return NextResponse.json(
        { error: 'Missing parameters' },
        { status: 400 }
      );
    }

    const storage = new Storage(client);
    const file = await storage.getFileView(bucketId, fileId);

    return new Response(file, {
      headers: {
        'Cache-Control': 'public, max-age=31536000, immutable',
      },
    });
  } catch (err) {
    console.error('Failed to fetch image:', err);
    return NextResponse.json({ error: 'Image not found' }, { status: 404 });
  }
}
</file>

<file path="src/app/api/revalidate/route.ts">
import { NextResponse } from 'next/server';
import { revalidateTag } from 'next/cache';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const tag = searchParams.get('tag');

    if (!tag) {
      return NextResponse.json(
        { success: false, message: 'Missing tag parameter' },
        { status: 400 }
      );
    }

    await revalidateTag(tag);

    return NextResponse.json({
      success: true,
      revalidated: true,
      now: Date.now(),
    });
  } catch (err) {
    console.error('Revalidation failed:', err);
    return NextResponse.json(
      { success: false, message: 'Revalidation failed' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/webhooks/appwrite/route.ts">
import { NextResponse } from 'next/server';
import { validateRequest } from '@/lib/webhooks';

export async function POST(request: Request) {
  const isValid = await validateRequest(request);
  if (!isValid)
    return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });

  const event = await request.json();

  if (event.type === 'database.documents.create') {
    await fetch(`${process.env.NEXTAUTH_URL}/api/revalidate?tag=knowledge`);
  }

  return NextResponse.json({ received: true });
}
</file>

<file path="src/app/auth/callback/route.ts">
import { NextResponse } from 'next/server';
import { account } from '@/models/client/config';

export async function GET(request: Request) {
  try {
    const url = new URL(request.url);

    // Get the userId and secret from the query parameters
    const userId = url.searchParams.get('userId');
    const secret = url.searchParams.get('secret');

    if (!userId || !secret) {
      console.error('Missing userId or secret in OAuth callback');
      return NextResponse.redirect(
        new URL('/login?error=oauth_failed', request.url)
      );
    }

    try {
      // Create OAuth2 session with Appwrite
      await account.createSession(userId, secret);

      // Add a small delay to ensure session is established
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Redirect to dashboard after successful OAuth
      return NextResponse.redirect(new URL('/dashboard', request.url));
    } catch (error) {
      console.error('Failed to create session:', error);
      return NextResponse.redirect(
        new URL('/login?error=session_failed', request.url)
      );
    }
  } catch (error) {
    console.error('OAuth callback error:', error);
    return NextResponse.redirect(
      new URL('/login?error=oauth_failed', request.url)
    );
  }
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/**
 * BASE LAYER
 */
@layer base {
  /* CSS Variables */
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
    --button-bg: rgb(255, 255, 255);
    --button-hover: rgb(243, 244, 246);
    --button-text: rgb(17, 24, 39);
    --button-border: rgb(229, 231, 235);
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --radius: 0.5rem;
    --sidebar-background: 240 10% 3.9%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-primary: 217 91% 60%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217 91% 60%;
    --button-bg: rgb(33, 35, 39);
    --button-hover: rgb(39, 51, 67);
    --button-text: rgb(255, 255, 255);
    --button-border: rgb(29, 41, 57);
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }

  /* Basic Element Styles */
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/**
 * COMPONENTS LAYER
 */
@layer components {
  /* Tooltip Styling */
  .tooltip-content {
    background: rgba(19, 19, 22, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 8px 12px;
    color: hsl(var(--foreground));
    font-size: 14px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  /* === BUTTON COMPONENTS === */

  /* === TYPOGRAPHY COMPONENTS === */
  .overline {
    letter-spacing: 1px;
    text-transform: uppercase;
    margin-bottom: 16px;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.7;
    color: #ffffff;
  }

  .p-regular {
    letter-spacing: -0.01em;
    margin-bottom: 0;
    font-size: 16px;
    line-height: 1.6;
  }

  .p-small {
    letter-spacing: -0.09px;
    margin-bottom: 0;
    font-size: 14px;
    line-height: 1.6;
  }

  .mb-16 {
    margin-bottom: 16px;
  }

  .monthly-price {
    display: flex;
    align-items: flex-end;
    gap: 5px;
  }

  /* === CARD COMPONENTS === */
  /* Feature Card */
  .feature-card {
    background: linear-gradient(
      180deg,
      rgba(31, 33, 40, 0.5) 0%,
      rgba(31, 33, 40, 0.2) 100%
    );
    border-radius: 16px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    overflow: hidden;
    min-height: 320px;
    height: 100%;
    padding: 32px;
    border: 1px solid rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(10px);
  }

  .feature-card-content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    z-index: 2;
  }

  .feature-heading {
    margin-bottom: 24px;
  }

  .logo-loop {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    margin-top: auto;
  }

  .logo-row {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
  }

  .feature-overlay {
    z-index: 1;
    min-height: 120px;
    background-image: linear-gradient(
      to top,
      rgba(31, 33, 40, 0.5),
      rgba(31, 33, 40, 0)
    );
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    pointer-events: none;
  }

  .feature-logo {
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(5px);
  }

  .feature-icon {
    width: 28px;
    height: 28px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* Card Light effects */
  .light-effect {
    position: absolute;
    top: -100px;
    right: -100px;
    width: 200px;
    height: 200px;
    background: radial-gradient(
      circle,
      rgba(59, 130, 246, 0.3) 0%,
      rgba(59, 130, 246, 0.1) 30%,
      transparent 70%
    );
    filter: blur(40px);
    z-index: 0;
    pointer-events: none;
  }

  .pricing-light-effect {
    top: -50px;
    right: -50px;
    background: radial-gradient(
      circle,
      rgba(92, 146, 246, 0.3) 0%,
      rgba(92, 159, 246, 0.1) 30%,
      transparent 70%
    );
  }

  .list-light-effect {
    top: -30px;
    right: -30px;
    width: 150px;
    height: 150px;
    background: radial-gradient(
      circle,
      rgba(59, 130, 246, 0.2) 0%,
      rgba(59, 130, 246, 0.05) 30%,
      transparent 70%
    );
  }

  /* Pricing Card */
  .pricing-card {
    background: linear-gradient(
      180deg,
      rgba(31, 33, 40, 0.5) 0%,
      rgba(31, 33, 40, 0.2) 100%
    );
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    position: relative;
    overflow: hidden;
    height: 100%;
    min-height: 400px;
    backdrop-filter: blur(10px);
  }

  .pricing-content {
    display: flex;
    flex-direction: column;
    padding: 32px;
    position: relative;
    z-index: 2;
    height: 100%;
  }

  .pricing-block {
    margin-bottom: 24px;
  }

  .pricing-divider {
    width: 100%;
    height: 1px;
    background: rgba(255, 255, 255, 0.1);
    margin: 24px 0;
  }

  .pricing-features {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .pricing-button-wrapper {
    margin-top: auto;
    margin-bottom: 24px;
  }

  .pricing-checklist-item {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .check-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  .pricing-card-light {
    height: 100%;
    width: 100%;
    object-fit: cover;
    opacity: 0.3;
  }

  /* List Item Card */
  .list-item-card {
    background: linear-gradient(
      180deg,
      rgba(31, 33, 40, 0.5) 0%,
      rgba(31, 33, 40, 0.2) 100%
    );
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    position: relative;
    overflow: hidden;
    height: 100%;
    min-height: 200px;
    backdrop-filter: blur(10px);
  }

  .list-card-content {
    width: 100%;
    padding: 32px;
    position: relative;
    z-index: 2;
  }

  .list-card-icon {
    width: 56px;
    height: 56px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 24px;
    backdrop-filter: blur(5px);
  }

  .list-card-title {
    letter-spacing: -0.26px;
    font-size: 18px;
    font-weight: 500;
    line-height: 1.6;
    margin-bottom: 8px;
    color: white;
  }

  /* Horizontal line border style */
  .linear-border-90 {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1) 50%,
      transparent
    );
  }
}

/**
 * UTILITIES LAYER
 */
@layer utilities {
  /* === TEXT EFFECTS === */
  .gradient-text {
    @apply bg-gradient-to-t from-[#363a3f] to-[#ffffffb7] bg-clip-text text-transparent;
  }

  /* === LAYOUT UTILITIES === */
  .section-container {
    @apply relative bg-background py-24 text-foreground md:py-32;
  }

  .section-title {
    @apply text-center font-heading text-4xl font-bold tracking-wide sm:text-5xl;
  }

  .value-card {
    @apply flex items-center justify-center rounded-lg bg-card px-8 py-6 shadow-lg;
  }

  .value-card:hover {
    @apply scale-105 transition-transform duration-300;
  }

  /* === DIVIDERS === */
  .comparison-divider {
    position: relative;
    width: 1px;
    background-color: #27272a;
    overflow: hidden;
  }

  .comparison-divider::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 30%;
    background: linear-gradient(to bottom, transparent, #020469, transparent);
    animation: dividerFlow 5s ease-in-out infinite;
  }

  .gradient-divider {
    @apply my-12 h-px w-full bg-gradient-to-r from-transparent via-zinc-800 to-transparent;
  }

  .section-divider {
    width: 75%;
    height: 1px;
    background-image: radial-gradient(
      circle closest-corner at 50% 0,
      rgba(54, 58, 63, 0.64) 50%,
      rgba(255, 255, 255, 0)
    );
  }

  /* === GRADIENT EFFECTS === */
  .gradient-transition {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    height: 220px;
    max-width: 990px;
    background-image: radial-gradient(
      circle at 50% -40%,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0) 63%
    );
    border-bottom-right-radius: 100%;
    border-bottom-left-radius: 100%;
    pointer-events: none;
  }

  /* === TAB EFFECTS === */
  .tab-container {
    position: relative;
    display: inline-flex;
    flex-direction: column;
    align-items: center;
  }

  .tab-progress {
    position: relative;
    padding-top: 2px;
    border-top: 1px solid transparent;
  }

  .tab-progress::before {
    content: '';
    position: absolute;
    top: -1px;
    left: 0;
    width: 100%;
    height: 1px;
    background: #020469;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 5s linear;
  }

  .tab-progress.active::before {
    transform: scaleX(1);
  }

  .tab-progress.reset::before {
    transition: none;
    transform: scaleX(0);
  }

  /* === BORDER EFFECTS === */
  .gradient-border {
    --border-width: 1px;
    --border-radius: 12px;
    position: relative;
    border-radius: var(--border-radius);
  }

  .gradient-border::after {
    content: '';
    position: absolute;
    inset: calc(-1 * var(--border-width));
    z-index: -1;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.15) 0%,
      rgba(255, 255, 255, 0.05) 50%,
      rgba(59, 130, 246, 0.1) 100%
    );
    border-radius: calc(var(--border-radius) + var(--border-width));
    animation: borderRotate 8s linear infinite;
  }

  /* Full border style */
  .linear-border-180 {
    padding: 1px;
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 0.12) 0%,
      rgba(255, 255, 255, 0) 80%
    );
    -webkit-mask:
      linear-gradient(#131316, #131316) content-box content-box,
      linear-gradient(#131316, #131316);
    mask:
      linear-gradient(#131316, #131316) content-box content-box,
      linear-gradient(#131316, #131316);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
    z-index: 0;
    border-radius: 16px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }

  /* === CARD EFFECTS === */
  .premium-card {
    position: relative;
    transition: all 0.3s ease-in-out;
    transform-style: preserve-3d;
    will-change: transform;
  }

  .premium-card::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.1) 0%,
      rgba(255, 255, 255, 0.05) 25%,
      rgba(255, 255, 255, 0) 50%
    );
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.4s ease;
  }

  .premium-card:hover::before {
    opacity: 1;
  }

  .shimmer {
    position: relative;
    overflow: hidden;
  }

  .shimmer::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to right,
      transparent 0%,
      rgba(255, 255, 255, 0.05) 50%,
      transparent 100%
    );
    transform: rotate(30deg);
    animation: shimmer 6s infinite;
  }

  .hover-glow {
    transition: box-shadow 0.3s ease;
  }

  .hover-glow:hover {
    box-shadow:
      0 0 10px rgba(59, 130, 246, 0.1),
      0 0 30px rgba(59, 130, 246, 0.05),
      inset 0 0 20px rgba(59, 130, 246, 0.03);
  }

  .card-3d {
    transition: transform 0.3s ease;
    transform-style: preserve-3d;
  }

  .card-3d:hover {
    transform: translateY(-5px) scale(1.01);
  }

  .glass-effect {
    background: rgba(19, 19, 22, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .animate-card-entrance {
    animation: card-entrance 0.5s ease-out forwards;
  }

  /* === ANIMATIONS === */
  @keyframes dividerFlow {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(400%);
    }
  }

  @keyframes borderRotate {
    from {
      background-position: 0% 0%;
    }
    to {
      background-position: 200% 200%;
    }
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%) rotate(30deg);
    }
    100% {
      transform: translateX(100%) rotate(30deg);
    }
  }

  @keyframes glow {
    0%,
    100% {
      box-shadow:
        0 0 5px rgba(255, 255, 255, 0.3),
        0 0 10px rgba(255, 255, 255, 0.2);
    }
    50% {
      box-shadow:
        0 0 10px rgba(255, 255, 255, 0.5),
        0 0 15px rgba(255, 255, 255, 0.3);
    }
  }

  .animate-glow {
    animation: glow 2s ease-in-out infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  .animate-shimmer {
    animation: shimmer 3s linear infinite;
  }

  @keyframes perimeterShimmer {
    0% {
      clip-path: inset(0 0 98% 0);
    }
    25% {
      clip-path: inset(0 0 0 98%);
    }
    50% {
      clip-path: inset(98% 0 0 0);
    }
    75% {
      clip-path: inset(0 98% 0 0);
    }
    100% {
      clip-path: inset(0 0 98% 0);
    }
  }

  .animate-perimeterShimmer {
    animation: perimeterShimmer 4s linear infinite;
  }

  @keyframes card-entrance {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}
</file>

<file path="src/app/layout.tsx">
import { Cinzel, Open_Sans } from 'next/font/google';
import type { Metadata } from 'next';
import { cn } from '@/lib/utils';
import './globals.css';
import { Navbar } from '@/components/shared/navigation/Navbar';
import { Footer } from '@/components/shared/Footer';
import { QueryProvider } from '@/lib/providers/query-provider';
import { SmoothScroll } from '@/lib/providers/smooth-scroll';

const cinzel = Cinzel({
  subsets: ['latin'],
  variable: '--font-cinzel',
  display: 'swap',
});

const openSans = Open_Sans({
  subsets: ['latin'],
  variable: '--font-open-sans',
  display: 'swap',
});

export const metadata: Metadata = {
  title: 'WYOS - Writing Your Own Story',
  description:
    'A platform that empowers individuals with practical tools and knowledge to take control of their lives',
  keywords: [
    'personal development',
    'self-improvement',
    'productivity',
    'learning platform',
  ],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang='en' className='dark'>
      <body
        className={cn(
          'min-h-screen bg-background font-sans antialiased',
          cinzel.variable,
          openSans.variable
        )}
      >
        <QueryProvider>
          <SmoothScroll />
          <Navbar />
          <main className='relative flex min-h-screen flex-col'>
            {children}
          </main>
          <Footer />
        </QueryProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/not-found.tsx">
import Link from 'next/link';

export default function NotFound() {
  return (
    <div className='flex min-h-screen flex-col items-center justify-center bg-gray-100 dark:bg-gray-900'>
      <h2 className='mb-4 text-4xl font-bold text-gray-800 dark:text-gray-200'>
        Page Not Found
      </h2>
      <p className='mb-8 text-xl text-gray-600 dark:text-gray-400'>
        Sorry, we couldn't find the page you're looking for.
      </p>
      <Link
        href='/'
        className='rounded bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600'
      >
        Return Home
      </Link>
    </div>
  );
}
</file>

<file path="src/components/auth/auth-flow.test.tsx">
/**
 * Authentication Flow Tests
 * @jest-environment jsdom
 */

import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import React from 'react';

// Mock Next.js navigation
const mockRouter = {
  push: jest.fn(),
  replace: jest.fn(),
  prefetch: jest.fn(),
  back: jest.fn(),
};

// Mock auth actions
const mockAuthActions = {
  login: jest.fn().mockImplementation(() => Promise.resolve({ success: true })),
  register: jest.fn().mockImplementation(() => Promise.resolve({ success: true, data: { userId: 'user123' } })),
  requestPasswordReset: jest.fn().mockImplementation(() => Promise.resolve({ success: true })),
  confirmPasswordReset: jest.fn().mockImplementation(() => Promise.resolve({ success: true })),
  verifyEmail: jest.fn().mockImplementation(() => Promise.resolve({ success: true })),
  requestEmailVerification: jest.fn().mockImplementation(() => Promise.resolve({ success: true })),
};

// Mock the auth hooks
jest.mock('@/lib/hooks/auth/useLogin', () => ({
  useLoginForm: jest.fn(() => ({
    isLoading: false,
    error: 'Invalid credentials',
    login: mockAuthActions.login,
  })),
}));

jest.mock('@/lib/hooks/auth/useRegister', () => ({
  useRegisterForm: jest.fn(() => ({
    isLoading: false,
    error: 'Email already in use',
    register: mockAuthActions.register,
  })),
}));

jest.mock('@/lib/hooks/auth/useResetPassword', () => ({
  useResetPasswordForm: jest.fn(() => ({
    isLoading: false,
    error: 'Email not found',
    success: false,
    resetPassword: mockAuthActions.requestPasswordReset,
    confirmPasswordReset: mockAuthActions.confirmPasswordReset,
  })),
}));

jest.mock('@/lib/hooks/auth/useVerifyEmail', () => ({
  useVerifyEmailForm: jest.fn(() => ({
    isLoading: false,
    error: '',
    success: true,
    verifyEmail: mockAuthActions.verifyEmail,
    requestEmailVerification: mockAuthActions.requestEmailVerification,
  })),
}));

jest.mock('next/navigation', () => ({
  useRouter: jest.fn(() => mockRouter),
  useSearchParams: jest.fn(() => ({
    get: jest.fn((param) => {
      if (param === 'userId') return 'user123';
      if (param === 'secret') return 'valid-token';
      return null;
    }),
  })),
}));

// Define form components for testing
const LoginForm = ({ onSubmit }: { onSubmit?: () => void }) => (
  <form data-testid="login-form">
    <label htmlFor="email">Email</label>
    <input type="email" id="email" name="email" data-testid="email-input" />
    <label htmlFor="password">Password</label>
    <input type="password" id="password" name="password" data-testid="password-input" />
    <div data-testid="error-message">Invalid credentials</div>
    <button type="button" data-testid="submit-button" onClick={onSubmit}>
      Sign In
    </button>
  </form>
);

const RegisterForm = ({ onSubmit }: { onSubmit?: () => void }) => (
  <form data-testid="register-form">
    <label htmlFor="name">Name</label>
    <input type="text" id="name" name="name" data-testid="name-input" />
    <label htmlFor="email">Email</label>
    <input type="email" id="email" name="email" data-testid="email-input" />
    <label htmlFor="password">Password</label>
    <input type="password" id="password" name="password" data-testid="password-input" />
    <div data-testid="error-message">Email already in use</div>
    <button type="button" data-testid="submit-button" onClick={onSubmit}>
      Sign Up
    </button>
  </form>
);

const ResetPasswordForm = ({ 
  userId = "", 
  secret = "", 
  onSubmit 
}: { 
  userId?: string; 
  secret?: string; 
  onSubmit?: () => void 
}) => (
  <form data-testid="reset-form">
    {!secret ? (
      <>
        <label htmlFor="email">Email</label>
        <input type="email" id="email" name="email" data-testid="email-input" />
        <div data-testid="error-message">Email not found</div>
        <button type="button" data-testid="submit-button" onClick={onSubmit}>
          Reset Password
        </button>
      </>
    ) : (
      <>
        <label htmlFor="password">New Password</label>
        <input type="password" id="password" name="password" data-testid="password-input" />
        <label htmlFor="confirmPassword">Confirm Password</label>
        <input
          type="password"
          id="confirmPassword"
          name="confirmPassword"
          data-testid="confirm-password-input"
        />
        <div data-testid="error-message">Passwords do not match</div>
        <button type="button" data-testid="submit-button" onClick={onSubmit}>
          Reset Password
        </button>
      </>
    )}
  </form>
);

const VerifyEmailForm = ({ 
  userId = "", 
  secret = "", 
  onResend 
}: { 
  userId?: string; 
  secret?: string; 
  onResend?: () => void 
}) => (
  <form data-testid="verify-email-form">
    <p>Please check your email for a verification link.</p>
    {secret ? (
      <p>Verifying your email...</p>
    ) : (
      <>
        <button type="button" data-testid="resend-button" onClick={onResend}>
          Resend Verification Email
        </button>
        <p data-testid="success-message">Verification email sent!</p>
      </>
    )}
  </form>
);

describe('Authentication Flow', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Login Flow', () => {
    it('displays error message on login failure', async () => {
      render(<LoginForm />);
      expect(screen.getByTestId('error-message')).toHaveTextContent('Invalid credentials');
    });

    it('calls login function on submit', async () => {
      const handleSubmit = jest.fn();
      render(<LoginForm onSubmit={handleSubmit} />);
      
      fireEvent.click(screen.getByTestId('submit-button'));
      expect(handleSubmit).toHaveBeenCalledTimes(1);
    });
  });

  describe('Registration Flow', () => {
    it('displays error message on registration failure', async () => {
      render(<RegisterForm />);
      expect(screen.getByTestId('error-message')).toHaveTextContent('Email already in use');
    });

    it('calls register function on submit', async () => {
      const handleSubmit = jest.fn();
      render(<RegisterForm onSubmit={handleSubmit} />);
      
      fireEvent.click(screen.getByTestId('submit-button'));
      expect(handleSubmit).toHaveBeenCalledTimes(1);
    });
  });

  describe('Password Reset Flow', () => {
    it('shows error message on password reset failure', async () => {
      render(<ResetPasswordForm />);
      expect(screen.getByTestId('error-message')).toHaveTextContent('Email not found');
    });

    it('calls resetPassword function on submit', async () => {
      const handleSubmit = jest.fn();
      render(<ResetPasswordForm onSubmit={handleSubmit} />);
      
      fireEvent.click(screen.getByTestId('submit-button'));
      expect(handleSubmit).toHaveBeenCalledTimes(1);
    });

    it('shows password reset confirmation form when secret is provided', async () => {
      render(<ResetPasswordForm userId="user123" secret="valid-token" />);
      expect(screen.getByTestId('password-input')).toBeInTheDocument();
      expect(screen.getByTestId('confirm-password-input')).toBeInTheDocument();
    });
  });

  describe('Email Verification Flow', () => {
    it('shows verification message', async () => {
      render(<VerifyEmailForm />);
      expect(screen.getByTestId('success-message')).toHaveTextContent('Verification email sent!');
    });

    it('calls requestEmailVerification function on resend', async () => {
      const handleResend = jest.fn();
      render(<VerifyEmailForm onResend={handleResend} />);
      
      fireEvent.click(screen.getByTestId('resend-button'));
      expect(handleResend).toHaveBeenCalledTimes(1);
    });

    it('shows verifying message when secret is provided', async () => {
      render(<VerifyEmailForm userId="user123" secret="valid-token" />);
      expect(screen.getByText('Verifying your email...')).toBeInTheDocument();
    });
  });
});
</file>

<file path="src/components/auth/AuthButtons.tsx">
'use client';

import { Button } from '@/components/ui/atoms/button';
import { ShinyButton } from '@/components/ui/shiny-button';
import { LogOut, User } from 'lucide-react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/Auth';

interface AuthButtonsProps {
  onAction?: () => void;
}

export function AuthButtons({ onAction = () => {} }: AuthButtonsProps) {
  const { session, user, logout } = useAuthStore();
  const router = useRouter();

  const handleLogout = async () => {
    await logout();
    onAction();
    router.push('/');
  };

  if (session) {
    return (
      <div className='flex items-center gap-4'>
        <Button variant='ghost'>
          <User className='h-4 w-4' />
          <span>{user?.name}</span>
        </Button>
        <Button
          variant='ghost'
          onClick={handleLogout}
          className='flex items-center gap-2 font-medium tracking-wide text-zinc-400 hover:bg-blue-950/30 hover:text-white'
        >
          <LogOut className='h-4 w-4' />
          <span>Logout</span>
        </Button>
      </div>
    );
  }

  return (
    <div className='flex items-center gap-4'>
      <Link href='/login'>
        <Button
          variant='ghost'
          className='font-medium tracking-wide text-zinc-400 hover:bg-blue-950/30 hover:text-white'
        >
          Login
        </Button>
      </Link>
      <Link href='/register'>
        <ShinyButton>Get Started</ShinyButton>
      </Link>
    </div>
  );
}
</file>

<file path="src/components/auth/ForgotPasswordForm.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the ForgotPasswordForm component
 */
import { render, screen, fireEvent } from '@/__tests__/test-utils';
import { ForgotPasswordForm } from './ForgotPasswordForm';
import { useForgotPasswordForm } from '@/lib/hooks/auth/useForgotPassword';

// Mock the hook
jest.mock('@/lib/hooks/auth/useForgotPassword');

describe('ForgotPasswordForm', () => {
  beforeEach(() => {
    // Default mock implementation
    (useForgotPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });
  });

  it('renders the form with email input', () => {
    render(<ForgotPasswordForm />);

    // Check for the text content instead of role since it's not using a heading role
    expect(screen.getByText('Reset password')).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(
      screen.getByRole('button', { name: /send reset link/i })
    ).toBeInTheDocument();
    expect(screen.getByText(/remember your password/i)).toBeInTheDocument();
    expect(screen.getByRole('link', { name: /sign in/i })).toBeInTheDocument();
  });

  it('disables the form when loading', () => {
    (useForgotPasswordForm as jest.Mock).mockReturnValue({
      isLoading: true,
      error: null,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });

    render(<ForgotPasswordForm />);

    expect(screen.getByLabelText(/email/i)).toBeDisabled();
    expect(screen.getByRole('button', { name: /sending/i })).toBeDisabled();
  });

  it('shows error message when there is an error', () => {
    const errorMessage = 'Invalid email address';
    (useForgotPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: errorMessage,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });

    render(<ForgotPasswordForm />);

    expect(screen.getByText(errorMessage)).toBeInTheDocument();
  });

  it('shows success message when request is successful', () => {
    (useForgotPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: true,
      handleSubmit: jest.fn(),
    });

    render(<ForgotPasswordForm />);

    expect(
      screen.getByText(/check your email for a password reset link/i)
    ).toBeInTheDocument();
    expect(
      screen.getByRole('link', { name: /back to login/i })
    ).toBeInTheDocument();
    // Form should not be visible
    expect(screen.queryByLabelText(/email/i)).not.toBeInTheDocument();
  });

  it('calls handleSubmit when form is submitted', () => {
    const mockHandleSubmit = jest.fn((e) => e.preventDefault());
    (useForgotPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: false,
      handleSubmit: mockHandleSubmit,
    });

    render(<ForgotPasswordForm />);

    fireEvent.submit(screen.getByRole('button', { name: /send reset link/i }));
    expect(mockHandleSubmit).toHaveBeenCalledTimes(1);
  });
});
</file>

<file path="src/components/auth/ForgotPasswordForm.tsx">
'use client';

import { useForgotPasswordForm } from '@/lib/hooks/auth/useForgotPassword';
import { Button } from '@/components/ui/atoms/button';
import { Input } from '@/components/ui/atoms/input';
import { Label } from '@/components/ui/atoms/label';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import Link from 'next/link';
import { cn } from '@/lib/utils';

interface ForgotPasswordFormProps
  extends React.ComponentPropsWithoutRef<'div'> {
  className?: string;
}

export function ForgotPasswordForm({
  className,
  ...props
}: ForgotPasswordFormProps) {
  const { isLoading, error, success, handleSubmit } = useForgotPasswordForm();

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader>
          <CardTitle className='text-2xl'>Reset password</CardTitle>
          <CardDescription>
            Enter your email address and we'll send you a password reset link
          </CardDescription>
        </CardHeader>
        <CardContent>
          {success ? (
            <div className='space-y-4'>
              <div className='rounded-md bg-emerald-50 p-3 text-sm text-emerald-500'>
                Check your email for a password reset link.
              </div>
              <Link
                href='/login'
                className='text-sm text-muted-foreground hover:underline'
              >
                Back to login
              </Link>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className='space-y-4'>
              {error && (
                <div className='rounded-md bg-destructive/15 p-3 text-sm text-destructive'>
                  {error}
                </div>
              )}
              <div className='space-y-2'>
                <Label htmlFor='email'>Email</Label>
                <Input
                  id='email'
                  name='email'
                  type='email'
                  placeholder='you@example.com'
                  required
                  disabled={isLoading}
                />
              </div>
              <Button type='submit' className='w-full' disabled={isLoading}>
                {isLoading ? 'Sending...' : 'Send reset link'}
              </Button>
              <div className='text-center text-sm text-muted-foreground'>
                Remember your password?{' '}
                <Link href='/login' className='text-primary hover:underline'>
                  Sign in
                </Link>
              </div>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/auth/LoginFields.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the LoginFields component
 */
import { render, screen } from '@/__tests__/test-utils';
import { LoginFields } from './LoginFields';

describe('LoginFields', () => {
  it('renders email and password fields', () => {
    render(<LoginFields isLoading={false} />);

    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
  });

  it('disables fields when loading', () => {
    render(<LoginFields isLoading={true} />);

    expect(screen.getByLabelText(/email/i)).toBeDisabled();
    expect(screen.getByLabelText(/password/i)).toBeDisabled();
  });
});
</file>

<file path="src/components/auth/LoginFields.tsx">
import { InputAnimation } from '@/components/ui/input-with-label-animation';

interface LoginFieldsProps {
  isLoading: boolean;
}

export function LoginFields({ isLoading }: LoginFieldsProps) {
  return (
    <>
      <InputAnimation
        label='Email'
        name='email'
        type='email'
        disabled={isLoading}
      />
      <InputAnimation
        label='Password'
        name='password'
        type='password'
        disabled={isLoading}
      />
    </>
  );
}
</file>

<file path="src/components/auth/LoginHeader.tsx">
import Link from 'next/link';

interface LoginHeaderProps {
  error?: string;
}

export function LoginHeader({ error }: LoginHeaderProps) {
  return (
    <>
      <h2 className='text-xl font-bold text-neutral-800 dark:text-neutral-200'>
        Welcome back to WYOS
      </h2>
      <p className='mt-2 max-w-sm text-sm text-neutral-600 dark:text-neutral-300'>
        Login to access your account.{' '}
        <Link href='/register' className='text-orange-500 hover:underline'>
          Register
        </Link>{' '}
        if you don't have an account yet.
      </p>
      {error && (
        <p className='mt-4 text-center text-sm text-red-500 dark:text-red-400'>
          {error}
        </p>
      )}
    </>
  );
}
</file>

<file path="src/components/auth/MobileAuthButtons.tsx">
'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/atoms/button';
import { ShinyButton } from '@/components/ui/shiny-button';
import { useAuthStore } from '@/store/Auth';
import { User, LogOut } from 'lucide-react';
import { useRouter } from 'next/navigation';

type MobileAuthButtonsProps = {
  closeMobileMenuAction: () => void;
};

export function MobileAuthButtons({
  closeMobileMenuAction,
}: MobileAuthButtonsProps) {
  const { session, user, logout } = useAuthStore();
  const router = useRouter();

  const handleLogout = async () => {
    await logout();
    router.push('/');
    closeMobileMenuAction();
  };

  if (session) {
    return (
      <div className='pt-4'>
        <Button
          variant='ghost'
          className='flex w-full items-center justify-center gap-2'
        >
          <User className='h-4 w-4' />
          <span>{user?.name}</span>
        </Button>
        <Button
          variant='ghost'
          onClick={handleLogout}
          className='mt-4 flex w-full items-center justify-center gap-2'
        >
          <LogOut className='h-4 w-4' />
          <span>Logout</span>
        </Button>
      </div>
    );
  }

  return (
    <div className='pt-4'>
      <Link href='/login' onClick={closeMobileMenuAction}>
        <Button variant='ghost' className='w-full'>
          Login
        </Button>
      </Link>
      <Link href='/register' onClick={closeMobileMenuAction}>
        <ShinyButton className='mt-4 w-full'>Write Your Story</ShinyButton>
      </Link>
    </div>
  );
}
</file>

<file path="src/components/auth/RegisterFields.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the RegisterFields component
 */
import { render, screen } from '@/__tests__/test-utils';
import { RegisterFields } from './RegisterFields';

describe('RegisterFields', () => {
  it('renders all registration fields', () => {
    render(<RegisterFields isLoading={false} />);

    expect(screen.getByLabelText(/first name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/last name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
  });

  it('disables fields when loading', () => {
    render(<RegisterFields isLoading={true} />);

    expect(screen.getByLabelText(/first name/i)).toBeDisabled();
    expect(screen.getByLabelText(/last name/i)).toBeDisabled();
    expect(screen.getByLabelText(/email/i)).toBeDisabled();
    expect(screen.getByLabelText(/password/i)).toBeDisabled();
  });

  it('applies required attribute to all fields', () => {
    render(<RegisterFields isLoading={false} />);

    expect(screen.getByLabelText(/first name/i)).toBeRequired();
    expect(screen.getByLabelText(/last name/i)).toBeRequired();
    expect(screen.getByLabelText(/email/i)).toBeRequired();
    expect(screen.getByLabelText(/password/i)).toBeRequired();
  });

  it('applies correct autocomplete attributes', () => {
    render(<RegisterFields isLoading={false} />);

    expect(screen.getByLabelText(/first name/i)).toHaveAttribute(
      'autocomplete',
      'given-name'
    );
    expect(screen.getByLabelText(/last name/i)).toHaveAttribute(
      'autocomplete',
      'family-name'
    );
    expect(screen.getByLabelText(/email/i)).toHaveAttribute(
      'autocomplete',
      'email'
    );
    expect(screen.getByLabelText(/password/i)).toHaveAttribute(
      'autocomplete',
      'new-password'
    );
  });
});
</file>

<file path="src/components/auth/RegisterFields.tsx">
'use client';

import { motion } from 'motion/react';
import { InputAnimation } from '@/components/ui/input-with-label-animation';
import { cn } from '@/lib/utils';

interface RegisterFieldsProps {
  isLoading: boolean;
}

export function RegisterFields({ isLoading }: RegisterFieldsProps) {
  const inputClasses = cn(
    'bg-zinc-900/50 backdrop-blur-sm',
    'border-zinc-800/50 focus:border-blue-900/50',
    'focus:ring-2 focus:ring-blue-900/20',
    'placeholder:text-zinc-600',
    'disabled:opacity-50'
  );

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className='space-y-6'
    >
      <div className='grid grid-cols-2 gap-4'>
        <InputAnimation
          label='First Name'
          name='firstname'
          disabled={isLoading}
          className={inputClasses}
          required
          autoComplete='given-name'
        />
        <InputAnimation
          label='Last Name'
          name='lastname'
          disabled={isLoading}
          className={inputClasses}
          required
          autoComplete='family-name'
        />
      </div>

      <InputAnimation
        label='Email'
        name='email'
        type='email'
        disabled={isLoading}
        className={inputClasses}
        required
        autoComplete='email'
      />

      <InputAnimation
        label='Password'
        name='password'
        type='password'
        disabled={isLoading}
        className={inputClasses}
        required
        autoComplete='new-password'
      />
    </motion.div>
  );
}
</file>

<file path="src/components/auth/RegisterHeader.tsx">
import Link from 'next/link';
import { motion } from 'motion/react';

interface RegisterHeaderProps {
  error?: string;
}

export function RegisterHeader({ error }: RegisterHeaderProps) {
  return (
    <div className='space-y-4'>
      <motion.h2
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className='text-2xl font-bold tracking-tight text-white md:text-3xl'
      >
        Write Your Own Story
      </motion.h2>
      <p className='text-sm text-zinc-400'>
        Ready to start? Create your account below.{' '}
        <Link
          href='/login'
          className='text-blue-400 transition-colors hover:text-blue-300'
        >
          Already have an account?
        </Link>
      </p>
      {error && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className='rounded-md bg-red-900/20 p-3'
        >
          <p className='text-sm text-red-400'>{error}</p>
        </motion.div>
      )}
    </div>
  );
}
</file>

<file path="src/components/auth/RequestVerificationForm.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the RequestVerificationForm component
 */
import { render, screen, fireEvent, waitFor } from '@/__tests__/test-utils';
import { RequestVerificationForm } from './RequestVerificationForm';
import { useAuthStore } from '@/store/Auth';

// Mock the auth store
jest.mock('@/store/Auth', () => ({
  useAuthStore: jest.fn(),
}));

describe('RequestVerificationForm', () => {
  beforeEach(() => {
    // Default mock implementation
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      requestEmailVerification: jest.fn().mockResolvedValue({ success: true }),
    });
  });

  it('renders the verification request form', () => {
    render(<RequestVerificationForm />);

    // Check for the text content instead of role since it's not using a heading role
    expect(screen.getByText('Verify your email')).toBeInTheDocument();
    expect(
      screen.getByText(/check your email for a verification link/i)
    ).toBeInTheDocument();
    expect(
      screen.getByRole('button', { name: /resend verification email/i })
    ).toBeInTheDocument();
  });

  it('disables the button when loading', async () => {
    // Mock implementation that doesn't resolve immediately
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      requestEmailVerification: jest.fn(
        () =>
          new Promise((resolve) => {
            setTimeout(() => resolve({ success: true }), 100);
          })
      ),
    });

    render(<RequestVerificationForm />);

    fireEvent.click(
      screen.getByRole('button', { name: /resend verification email/i })
    );

    expect(screen.getByRole('button', { name: /sending/i })).toBeDisabled();
  });

  it('shows error message when there is an error', async () => {
    const errorMessage = 'Verification request failed';
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      requestEmailVerification: jest.fn().mockResolvedValue({
        error: { message: errorMessage },
      }),
    });

    render(<RequestVerificationForm />);

    fireEvent.click(
      screen.getByRole('button', { name: /resend verification email/i })
    );

    await waitFor(() => {
      expect(screen.getByText(errorMessage)).toBeInTheDocument();
    });
  });

  it('shows success message when verification request is successful', async () => {
    render(<RequestVerificationForm />);

    fireEvent.click(
      screen.getByRole('button', { name: /resend verification email/i })
    );

    await waitFor(() => {
      expect(screen.getByText(/verification email sent/i)).toBeInTheDocument();
    });
  });
});
</file>

<file path="src/components/auth/RequestVerificationForm.tsx">
'use client';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/atoms/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import { useState } from 'react';
import { useAuthStore } from '@/store/Auth';
import Link from 'next/link';

interface RequestVerificationFormProps
  extends React.ComponentPropsWithoutRef<'div'> {
  className?: string;
}

export function RequestVerificationForm({
  className,
  ...props
}: RequestVerificationFormProps) {
  const { requestEmailVerification } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleResendVerification = async () => {
    setIsLoading(true);
    setError('');
    setSuccess(false);

    const response = await requestEmailVerification();

    if (response.error) {
      setError(response.error.message);
    } else {
      setSuccess(true);
    }

    setIsLoading(false);
  };

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader>
          <CardTitle className='text-2xl'>Verify your email</CardTitle>
          <CardDescription>
            Check your email for a verification link. Didn't receive it?
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className='space-y-4'>
            {error && (
              <div className='rounded-md bg-destructive/15 p-3 text-sm text-destructive'>
                {error}
              </div>
            )}
            {success && (
              <div className='rounded-md bg-emerald-50 p-3 text-sm text-emerald-500'>
                Verification email sent! Please check your inbox.
              </div>
            )}
            <Button
              onClick={handleResendVerification}
              className='w-full'
              disabled={isLoading}
            >
              {isLoading ? 'Sending...' : 'Resend verification email'}
            </Button>
            <div className='text-center text-sm text-muted-foreground'>
              <Link href='/dashboard' className='text-primary hover:underline'>
                Back to dashboard
              </Link>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/auth/ResetPasswordForm.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the ResetPasswordForm component
 */
import { render, screen, fireEvent } from '@/__tests__/test-utils';
import { ResetPasswordForm } from './ResetPasswordForm';
import { useResetPasswordForm } from '@/lib/hooks/auth/useResetPassword';

// Mock the hook
jest.mock('@/lib/hooks/auth/useResetPassword');
// Mock Next.js router
jest.mock('next/navigation', () => ({
  useSearchParams: jest.fn(() => ({
    get: (param: string) => {
      if (param === 'userId') return 'test-user-id';
      if (param === 'secret') return 'test-secret';
      return null;
    },
  })),
}));

describe('ResetPasswordForm', () => {
  beforeEach(() => {
    // Default mock implementation
    (useResetPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });
  });

  it('renders the form with password inputs', () => {
    render(<ResetPasswordForm userId='test-user-id' secret='test-secret' />);

    // Check for the text content instead of role since it's not using a heading role
    expect(screen.getByText('Reset your password')).toBeInTheDocument();
    expect(screen.getByLabelText(/new password/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/confirm password/i)).toBeInTheDocument();
    expect(
      screen.getByRole('button', { name: /reset password/i })
    ).toBeInTheDocument();
  });

  it('disables the form when loading', () => {
    (useResetPasswordForm as jest.Mock).mockReturnValue({
      isLoading: true,
      error: null,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });

    render(<ResetPasswordForm userId='test-user-id' secret='test-secret' />);

    expect(screen.getByLabelText(/new password/i)).toBeDisabled();
    expect(screen.getByLabelText(/confirm password/i)).toBeDisabled();
    expect(screen.getByRole('button', { name: /resetting/i })).toBeDisabled();
  });

  it('shows error message when there is an error', () => {
    const errorMessage = 'Invalid reset token';
    (useResetPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: errorMessage,
      success: false,
      handleSubmit: jest.fn((e) => e.preventDefault()),
    });

    render(<ResetPasswordForm userId='test-user-id' secret='test-secret' />);

    expect(screen.getByText(errorMessage)).toBeInTheDocument();
  });

  it('shows success message when password reset is successful', () => {
    (useResetPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: true,
      handleSubmit: jest.fn(),
    });

    render(<ResetPasswordForm userId='test-user-id' secret='test-secret' />);

    expect(
      screen.getByText(/your password has been reset successfully/i)
    ).toBeInTheDocument();
    expect(
      screen.getByRole('link', { name: /back to login/i })
    ).toBeInTheDocument();
    // Form should not be visible
    expect(screen.queryByLabelText(/new password/i)).not.toBeInTheDocument();
  });

  it('calls handleSubmit when form is submitted', () => {
    const mockHandleSubmit = jest.fn((e) => e.preventDefault());
    (useResetPasswordForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: false,
      handleSubmit: mockHandleSubmit,
    });

    render(<ResetPasswordForm userId='test-user-id' secret='test-secret' />);

    fireEvent.submit(screen.getByRole('button', { name: /reset password/i }));
    expect(mockHandleSubmit).toHaveBeenCalledTimes(1);
  });
});
</file>

<file path="src/components/auth/ResetPasswordForm.tsx">
'use client';

import { useResetPasswordForm } from '@/lib/hooks/auth/useResetPassword';
import { Button } from '@/components/ui/atoms/button';
import { Input } from '@/components/ui/atoms/input';
import { Label } from '@/components/ui/atoms/label';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import Link from 'next/link';
import { cn } from '@/lib/utils';

interface ResetPasswordFormProps extends React.ComponentPropsWithoutRef<'div'> {
  className?: string;
  userId: string;
  secret: string;
}

export function ResetPasswordForm({
  className,
  userId,
  secret,
  ...props
}: ResetPasswordFormProps) {
  const { isLoading, error, success, handleSubmit } = useResetPasswordForm(
    userId,
    secret
  );

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader>
          <CardTitle className='text-2xl'>Reset your password</CardTitle>
          <CardDescription>Enter your new password below</CardDescription>
        </CardHeader>
        <CardContent>
          {success ? (
            <div className='space-y-4'>
              <div className='rounded-md bg-emerald-50 p-3 text-sm text-emerald-500'>
                Your password has been reset successfully.
              </div>
              <Link
                href='/login'
                className='text-sm text-muted-foreground hover:underline'
              >
                Back to login
              </Link>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className='space-y-4'>
              {error && (
                <div className='rounded-md bg-destructive/15 p-3 text-sm text-destructive'>
                  {error}
                </div>
              )}
              <div className='space-y-2'>
                <Label htmlFor='password'>New Password</Label>
                <Input
                  id='password'
                  name='password'
                  type='password'
                  required
                  disabled={isLoading}
                />
              </div>
              <div className='space-y-2'>
                <Label htmlFor='confirmPassword'>Confirm Password</Label>
                <Input
                  id='confirmPassword'
                  name='confirmPassword'
                  type='password'
                  required
                  disabled={isLoading}
                />
              </div>
              <Button type='submit' className='w-full' disabled={isLoading}>
                {isLoading ? 'Resetting...' : 'Reset Password'}
              </Button>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/auth/SocialAuth.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the SocialAuth component
 */
import { render, screen, fireEvent } from '@/__tests__/test-utils';
import { SocialAuth } from '../ui/molecules/SocialAuth';
import { useAuthStore } from '@/store/Auth';
import { OAuthProvider } from 'appwrite';

// Mock the auth store
jest.mock('@/store/Auth', () => ({
  useAuthStore: jest.fn(),
}));

describe('SocialAuth', () => {
  beforeEach(() => {
    // Default mock implementation
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      createOAuthSession: jest.fn(),
    });
  });

  it('renders social login buttons', () => {
    render(<SocialAuth isLoading={false} />);

    expect(
      screen.getByRole('button', { name: /continue with google/i })
    ).toBeInTheDocument();
  });

  it('disables buttons when loading', () => {
    render(<SocialAuth isLoading={true} />);

    expect(
      screen.getByRole('button', { name: /continue with google/i })
    ).toBeDisabled();
  });

  it('calls createOAuthSession when Google button is clicked', () => {
    const mockCreateOAuthSession = jest.fn();
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      createOAuthSession: mockCreateOAuthSession,
    });

    render(<SocialAuth isLoading={false} />);

    fireEvent.click(
      screen.getByRole('button', { name: /continue with google/i })
    );
    expect(mockCreateOAuthSession).toHaveBeenCalledWith(OAuthProvider.Google);
  });

  it('handles errors during OAuth login', () => {
    // Mock console.error to capture error logs
    const originalConsoleError = console.error;
    console.error = jest.fn();

    const mockCreateOAuthSession = jest
      .fn()
      .mockRejectedValue(new Error('OAuth error'));
    (useAuthStore as unknown as jest.Mock).mockReturnValue({
      createOAuthSession: mockCreateOAuthSession,
    });

    render(<SocialAuth isLoading={false} />);

    fireEvent.click(
      screen.getByRole('button', { name: /continue with google/i })
    );

    // Wait for the async function to complete
    setTimeout(() => {
      expect(console.error).toHaveBeenCalledWith(
        'OAuth error:',
        expect.any(Error)
      );
      // Restore original console.error
      console.error = originalConsoleError;
    }, 0);
  });
});
</file>

<file path="src/components/auth/VerifyEmailForm.test.tsx">
/**
 * @jest-environment jsdom
 * @description Tests for the VerifyEmailForm component
 */
import { render, screen } from '@/__tests__/test-utils';
import { VerifyEmailForm } from './VerifyEmailForm';
import { useVerifyEmailForm } from '@/lib/hooks/auth/useVerifyEmail';
import { useSearchParams } from 'next/navigation';

// Mock the hook
jest.mock('@/lib/hooks/auth/useVerifyEmail');
// Mock Next.js router
jest.mock('next/navigation', () => ({
  useSearchParams: jest.fn(() => ({
    get: (param: string) => {
      if (param === 'userId') return 'test-user-id';
      if (param === 'secret') return 'test-secret';
      return null;
    },
  })),
}));

describe('VerifyEmailForm', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('shows loading state during verification', () => {
    (useVerifyEmailForm as jest.Mock).mockReturnValue({
      isLoading: true,
      error: null,
      success: false,
    });

    render(<VerifyEmailForm userId='test-user-id' secret='test-secret' />);

    expect(screen.getByText(/verifying your email/i)).toBeInTheDocument();
    expect(screen.getByText(/please wait/i)).toBeInTheDocument();
  });

  it('shows error message when verification fails', () => {
    const errorMessage = 'Invalid verification token';
    (useVerifyEmailForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: errorMessage,
      success: false,
    });

    render(<VerifyEmailForm userId='test-user-id' secret='test-secret' />);

    expect(screen.getByText(/email verification status/i)).toBeInTheDocument();
    expect(screen.getByText(errorMessage)).toBeInTheDocument();
    expect(
      screen.getByRole('link', { name: /request new verification email/i })
    ).toBeInTheDocument();
  });

  it('shows success message when verification is successful', () => {
    (useVerifyEmailForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: true,
    });

    render(<VerifyEmailForm userId='test-user-id' secret='test-secret' />);

    expect(
      screen.getByText(/email verified successfully/i)
    ).toBeInTheDocument();
    expect(screen.getByRole('link', { name: /login/i })).toBeInTheDocument();
  });

  it('shows missing parameters message when userId or secret is missing', () => {
    // Override the mock to return null for userId and secret
    (useSearchParams as jest.Mock).mockImplementationOnce(() => ({
      get: () => null,
    }));

    (useVerifyEmailForm as jest.Mock).mockReturnValue({
      isLoading: false,
      error: null,
      success: false,
    });

    render(<VerifyEmailForm userId='' secret='' />);

    expect(screen.getByText(/email verification status/i)).toBeInTheDocument();
  });
});
</file>

<file path="src/components/auth/VerifyEmailForm.tsx">
'use client';

import { useVerifyEmailForm } from '@/lib/hooks/auth/useVerifyEmail';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import Link from 'next/link';
import { cn } from '@/lib/utils';

interface VerifyEmailFormProps extends React.ComponentPropsWithoutRef<'div'> {
  className?: string;
  userId: string;
  secret: string;
}

export function VerifyEmailForm({
  className,
  userId,
  secret,
  ...props
}: VerifyEmailFormProps) {
  const { isLoading, error, success } = useVerifyEmailForm(userId, secret);

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader>
          <CardTitle className='text-2xl'>Email verification</CardTitle>
          <CardDescription>
            {isLoading
              ? 'Verifying your email...'
              : 'Email verification status'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className='space-y-4'>
            {error ? (
              <>
                <div className='rounded-md bg-destructive/15 p-3 text-sm text-destructive'>
                  {error}
                </div>
                <div className='text-center text-sm text-muted-foreground'>
                  <Link
                    href='/verification'
                    className='text-primary hover:underline'
                  >
                    Request new verification email
                  </Link>
                </div>
              </>
            ) : success ? (
              <div className='rounded-md bg-emerald-50 p-3 text-sm text-emerald-500'>
                Email verified successfully! You can now{' '}
                <Link href='/login' className='text-primary hover:underline'>
                  login
                </Link>{' '}
                to your account.
              </div>
            ) : (
              <div className='rounded-md bg-muted p-3 text-sm'>
                Please wait while we verify your email...
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/core/community/CommunityCTA.tsx">
'use client';

import { useAuthStore } from '@/store/Auth';
import { Button } from '@/components/ui/atoms/button';
import { useRouter } from 'next/navigation';

export function CommunityCTA() {
  const { session } = useAuthStore();
  const router = useRouter();

  const handleCommunityAccess = () => {
    if (!session) {
      // If not logged in, redirect to login page with return URL
      router.push('/login?redirect=/community');
      return;
    }

    // If logged in, redirect to Discourse's SSO endpoint
    window.location.href = 'https://community.writingyourownstory.com';
  };

  return (
    <div className='text-center'>
      <Button
        onClick={handleCommunityAccess}
        className='px-8 py-6 text-lg'
        variant='default'
      >
        {session ? 'Enter Community Forum' : 'Join Our Community'}
      </Button>
      <p className='mt-4 text-sm text-muted-foreground'>
        {session
          ? 'You will be redirected to our community platform'
          : 'Login required to access the community'}
      </p>
    </div>
  );
}
</file>

<file path="src/components/core/community/CommunityIntro.tsx">
export function CommunityIntro() {
  return (
    <section className='mx-auto max-w-3xl space-y-6 px-4 text-center'>
      <p className='text-lg leading-relaxed text-muted-foreground'>
        The WYOS Community is a no-BS space where real growth happens through
        authentic conversations. This isn't about superficial connections or
        empty motivation - we're here to cut through the noise and support each
        other's actual progress.
      </p>

      <p className='text-lg leading-relaxed text-muted-foreground'>
        You'll find people who:
      </p>

      <ul className='mx-auto grid max-w-2xl grid-cols-1 gap-4 text-left sm:grid-cols-2'>
        <li className='rounded-lg border p-4'>
          • Speak truth without sugarcoating
        </li>
        <li className='rounded-lg border p-4'>
          • Share real struggles &amp; wins
        </li>
        <li className='rounded-lg border p-4'>• Offer practical advice</li>
        <li className='rounded-lg border p-4'>• Hold each other accountable</li>
      </ul>
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/entries/ArticleEntry.tsx">
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import DOMPurify from 'dompurify';

interface ArticleEntryProps {
  entry: KnowledgeEntry;
}

export default function ArticleEntry({ entry }: ArticleEntryProps) {
  const safeContent = DOMPurify.sanitize(entry.content);

  return (
    <section className='prose dark:prose-invert mx-auto'>
      <div dangerouslySetInnerHTML={{ __html: safeContent }} />
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/entries/DefaultEntry.tsx">
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import DOMPurify from 'dompurify';

interface DefaultEntryProps {
  entry: KnowledgeEntry;
}

export default function DefaultEntry({ entry }: DefaultEntryProps) {
  const safeContent = DOMPurify.sanitize(entry.content);

  return (
    <section className='prose dark:prose-invert mx-auto'>
      <div dangerouslySetInnerHTML={{ __html: safeContent }} />
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/entries/EntryModal.tsx">
'use client';
import { useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { X, ChevronLeft, ChevronRight, MessageCircle } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import ArticleEntry from './ArticleEntry';
import VideoEntry from './VideoEntry';
import HowToEntry from './HowToEntry';
import InfographicEntry from './InfographicEntry';
import DefaultEntry from './DefaultEntry';

interface EntryModalProps {
  entry: KnowledgeEntry;
  isOpen: boolean;
  onClose: () => void;
  onPrevious?: () => void;
  onNext?: () => void;
  hasPrevious?: boolean;
  hasNext?: boolean;
  className?: string;
}

export function EntryModal({
  entry,
  isOpen,
  onClose,
  onPrevious,
  onNext,
  hasPrevious = false,
  hasNext = false,
  className,
}: EntryModalProps) {
  const _router = useRouter();
  const modalRef = useRef<HTMLDivElement>(null);

  // Handle escape key to close modal
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      } else if (e.key === 'ArrowLeft' && hasPrevious && onPrevious) {
        onPrevious();
      } else if (e.key === 'ArrowRight' && hasNext && onNext) {
        onNext();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [onClose, onPrevious, onNext, hasPrevious, hasNext]);

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  // Handle click outside to close
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);

  const getEntryComponent = (type: string) => {
    switch (type.toLowerCase()) {
      case 'article':
        return ArticleEntry;
      case 'video':
        return VideoEntry;
      case 'how-to':
      case 'howto':
        return HowToEntry;
      case 'infographic':
        return InfographicEntry;
      default:
        return DefaultEntry;
    }
  };

  const EntryComponent = getEntryComponent(entry.type);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className='fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm'
        >
          <motion.div
            ref={modalRef}
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className={cn(
              'relative mx-auto flex h-[90vh] w-[90vw] max-w-6xl flex-col overflow-hidden rounded-xl border bg-card shadow-lg',
              className
            )}
          >
            {/* Modal Header */}
            <div className='flex items-center justify-between border-b p-4'>
              <h2 className='text-xl font-semibold'>{entry.title}</h2>
              <button
                onClick={onClose}
                className='rounded-full p-2 text-muted-foreground hover:bg-muted hover:text-foreground'
                aria-label='Close modal'
              >
                <X className='h-5 w-5' />
              </button>
            </div>

            {/* Modal Content */}
            <div className='flex flex-1 flex-col overflow-y-auto md:flex-row'>
              {/* Entry Content */}
              <div className='flex-1 overflow-y-auto p-6 md:p-8'>
                {entry.imageUrl && (
                  <div className='relative mb-6 aspect-video w-full overflow-hidden rounded-lg'>
                    <Image
                      src={entry.imageUrl}
                      alt={entry.title}
                      fill
                      className='object-cover'
                      sizes='(max-width: 768px) 100vw, 50vw'
                    />
                  </div>
                )}
                <EntryComponent entry={entry} />
              </div>

              {/* Comments Section (Placeholder) */}
              <div className='flex w-full flex-col border-t p-6 md:w-80 md:border-l md:border-t-0'>
                <h3 className='mb-4 flex items-center gap-2 text-lg font-medium'>
                  <MessageCircle className='h-5 w-5' />
                  Comments
                </h3>
                <div className='text-sm text-muted-foreground'>
                  <p className='mb-4'>
                    Share your thoughts and insights about this entry with the
                    community.
                  </p>
                  <div className='rounded-md border bg-muted/50 p-4 text-center'>
                    Comments feature coming soon
                  </div>
                </div>
              </div>
            </div>

            {/* Navigation Controls */}
            <div className='absolute left-0 top-1/2 -translate-y-1/2 p-2'>
              {hasPrevious && (
                <button
                  onClick={onPrevious}
                  className='rounded-full bg-background/80 p-2 text-foreground shadow-md backdrop-blur-sm hover:bg-background'
                  aria-label='Previous entry'
                >
                  <ChevronLeft className='h-6 w-6' />
                </button>
              )}
            </div>
            <div className='absolute right-0 top-1/2 -translate-y-1/2 p-2'>
              {hasNext && (
                <button
                  onClick={onNext}
                  className='rounded-full bg-background/80 p-2 text-foreground shadow-md backdrop-blur-sm hover:bg-background'
                  aria-label='Next entry'
                >
                  <ChevronRight className='h-6 w-6' />
                </button>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/core/knowledge/entries/HowToEntry.tsx">
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

interface HowToEntryProps {
  entry: KnowledgeEntry;
}

export default function HowToEntry({ entry }: HowToEntryProps) {
  // Split steps from entry.content by newline (this is a simplistic approach)
  const steps = entry.content
    .split('\n')
    .filter((step) => step.trim().length > 0);

  return (
    <section className='mx-auto max-w-3xl space-y-6'>
      <h2 className='text-2xl font-bold'>Steps</h2>
      <ol className='space-y-4'>
        {steps.map((step, index) => (
          <li key={index} className='rounded-lg border p-4 shadow-sm'>
            <span className='mr-2 font-semibold'>{index + 1}.</span>
            <span>{step}</span>
          </li>
        ))}
      </ol>
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/entries/InfographicEntry.tsx">
'use client';
import { useState } from 'react';
import Image from 'next/image';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

interface InfographicEntryProps {
  entry: KnowledgeEntry;
}

export default function InfographicEntry({ entry }: InfographicEntryProps) {
  const [zoomed, setZoomed] = useState(false);

  return (
    <section className='mx-auto max-w-3xl'>
      <button
        className='relative w-full text-left focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2'
        onClick={() => setZoomed((prev) => !prev)}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setZoomed((prev) => !prev);
          }
        }}
        aria-expanded={zoomed}
        aria-label={zoomed ? 'Zoom out image' : 'Zoom in image'}
      >
        <Image
          src={entry.imageUrl || ''}
          alt={entry.title}
          width={800}
          height={450}
          className={`w-full rounded-lg transition-transform duration-300 ${
            zoomed ? 'scale-125' : 'scale-100'
          }`}
          sizes='(max-width: 768px) 100vw, 800px'
        />
        <p
          className='mt-2 text-center text-sm text-gray-500'
          aria-hidden='true'
        >
          {zoomed ? 'Click to zoom out' : 'Click to zoom in'}
        </p>
      </button>
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/hero/EnhancedIntroduction.tsx">
'use client';
import { motion } from 'motion/react';
import { Input } from '@/components/ui/atoms/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/atoms/select';

export function EnhancedIntroduction() {
  return (
    <div className='space-y-16'>
      {/* Introduction Text */}
      <div className='space-y-6'>
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className='text-lg leading-relaxed text-zinc-300'
        >
          The internet's become a place full of generic, regurgitated advice
          that's posted because it sounds good or ranks on Google. And now with
          AI generated content everywhere finding valuable insights is becoming
          harder than ever. So, we wanted to create a space to make that easier
          for you.
        </motion.p>
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className='text-lg leading-relaxed text-zinc-300'
        >
          The Knowledge Hub is where we've gathered insights that actually help
          people improve their lives and level up. It contains everything from
          frameworks to articles to useful summaries across dozens of topics.
          You'll find content on building habits, developing a growth mindset,
          improving productivity, growing businesses, and much more.
        </motion.p>
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className='text-lg leading-relaxed text-zinc-300'
        >
          Everything here was chosen because it offers something valuable - not
          because it just gets attention.
        </motion.p>
      </div>

      {/* Search and Filter Section - Positioned at the bottom of the intro */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.4 }}
        className='mx-auto max-w-3xl'
      >
        <div className='rounded-xl border border-zinc-800/50 bg-[#131316]/80 p-6 backdrop-blur-md'>
          <div className='mb-4 text-center'>
            <h3 className='text-xl font-medium text-white'>Find Knowledge</h3>
            <p className='mt-1 text-sm text-zinc-400'>
              Search our curated collection or browse by category
            </p>
          </div>

          <div className='flex flex-col gap-4 sm:flex-row'>
            <div className='relative flex-1'>
              <svg
                xmlns='http://www.w3.org/2000/svg'
                className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-zinc-400'
                fill='none'
                viewBox='0 0 24 24'
                stroke='currentColor'
                strokeWidth={2}
              >
                <path
                  strokeLinecap='round'
                  strokeLinejoin='round'
                  d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'
                />
              </svg>
              <Input
                placeholder='Search knowledge...'
                className='border-zinc-800 bg-zinc-900/80 pl-10 text-base focus:border-primary/50 focus:ring-primary/20'
              />
            </div>
            <Select>
              <SelectTrigger className='w-full border-zinc-800 bg-zinc-900/80 text-base focus:border-primary/50 focus:ring-primary/20 sm:w-[180px]'>
                <SelectValue placeholder='Sort by' />
              </SelectTrigger>
              <SelectContent className='border-zinc-800 bg-zinc-900'>
                <SelectItem value='alphabetical'>Alphabetical</SelectItem>
                <SelectItem value='popular'>Most Popular</SelectItem>
                <SelectItem value='recent'>Recently Updated</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="src/components/core/knowledge/hero/KnowledgeHero.tsx">
'use client';

import { cn } from '@/lib/utils';
import { motion, useScroll, useTransform } from 'motion/react';
import { useRef } from 'react';

interface KnowledgeHeroProps {
  title: string;
  description: string;
  className?: string;
}

export function KnowledgeHero({
  title,
  description,
  className,
}: KnowledgeHeroProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.8]);
  const y = useTransform(scrollYProgress, [0, 0.5], [0, 50]);

  return (
    <section
      ref={containerRef}
      className={cn(
        'relative flex h-[60vh] w-full items-center justify-center overflow-hidden',
        className
      )}
    >
      {/* Dark background with strong gradient */}
      <div className='absolute inset-0 bg-[#0c0c10]' />

      {/* Radial gradient for depth */}
      <div className='absolute inset-0 bg-[radial-gradient(ellipse_at_center,rgba(59,130,246,0.3),transparent_70%)] opacity-80' />

      {/* Subtle grid pattern */}
      <div className='absolute inset-0 bg-[linear-gradient(to_right,#ffffff05_1px,transparent_1px),linear-gradient(to_bottom,#ffffff05_1px,transparent_1px)] bg-[size:40px_40px] opacity-20' />

      {/* Gradient overlay */}
      <div className='pointer-events-none absolute inset-0 bg-gradient-to-b from-background/20 via-background/50 to-background' />

      <motion.div
        style={{ opacity, scale, y }}
        className='relative z-10 mx-auto w-full max-w-4xl px-4 text-center'
      >
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 0.7 }}
          transition={{ duration: 1.5 }}
          className='mx-auto mb-6 flex justify-center'
        >
          <div className='h-px w-24 bg-gradient-to-r from-transparent via-primary/50 to-transparent'></div>
        </motion.div>

        <motion.h1
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className='gradient-text font-heading text-4xl font-bold tracking-tight md:text-6xl lg:text-7xl'
        >
          {title}
        </motion.h1>

        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className='mt-6 text-lg text-zinc-300 md:text-xl lg:text-2xl'
        >
          {description}
        </motion.p>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 0.7 }}
          transition={{ duration: 1.5, delay: 0.6 }}
          className='mx-auto mt-10 flex justify-center'
        >
          <div className='h-px w-14 bg-gradient-to-r from-transparent via-zinc-500 to-transparent'></div>
        </motion.div>
      </motion.div>
    </section>
  );
}
</file>

<file path="src/components/core/knowledge/CategoryHeader.tsx">
'use client';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import type { KnowledgeCategory } from '@/types/core/knowledge/category';

export interface CategoryHeaderProps {
  category: KnowledgeCategory;
  totalEntries: number;
  className?: string;
}

export const CategoryHeader = ({
  category,
  totalEntries,
  className,
}: CategoryHeaderProps) => {
  return (
    <header
      className={cn(
        'relative overflow-hidden bg-gradient-to-br from-blue-900/80 to-indigo-900/50',
        'border-b border-blue-800/30 backdrop-blur-lg',
        className
      )}
    >
      <div className='container relative py-16 md:py-24'>
        {/* Breadcrumb Navigation */}
        <nav aria-label='Breadcrumb' className='mb-6 text-sm text-blue-200'>
          <ol className='flex items-center space-x-2'>
            <li>
              <Link
                href='/knowledge'
                className='transition-colors hover:text-white'
              >
                Knowledge Hub
              </Link>
            </li>
            <li aria-hidden='true' className='text-blue-400'>
              /
            </li>
            <li className='font-medium text-white' aria-current='page'>
              {category.name}
            </li>
          </ol>
        </nav>

        {/* Main Header Content */}
        <div className='max-w-3xl'>
          <h1 className='text-4xl font-bold tracking-tight text-white md:text-5xl'>
            {category.name}
          </h1>
          {category.description && (
            <p className='mt-4 text-lg text-blue-100'>{category.description}</p>
          )}
          <div className='mt-6 flex items-center gap-4'>
            <span className='inline-flex items-center rounded-full bg-blue-800/30 px-4 py-2 text-sm font-medium text-blue-100'>
              {totalEntries} curated entries
            </span>
          </div>
        </div>

        {/* Gradient Overlay */}
        <div
          className='absolute inset-0 -z-10 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.4),transparent_60%)]'
          aria-hidden='true'
        />
      </div>
    </header>
  );
};
</file>

<file path="src/components/core/knowledge/EnhancedCategoryHeader.tsx">
'use client';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';
import type { KnowledgeCategory } from '@/types/core/knowledge';

interface EnhancedCategoryHeaderProps {
  category: KnowledgeCategory;
  totalEntries: number;
  className?: string;
}

export function EnhancedCategoryHeader({
  category,
  totalEntries,
  className,
}: EnhancedCategoryHeaderProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={cn(
        'relative overflow-hidden rounded-xl border bg-card p-8 shadow-sm',
        className
      )}
    >
      {/* Background gradient */}
      <div className='absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-transparent' />

      {/* Background pattern */}
      <div className='absolute inset-0 bg-[radial-gradient(#e5e7eb_1px,transparent_1px)] opacity-[0.05] [background-size:16px_16px]' />

      <div className='relative z-10 flex flex-col items-center justify-between gap-6 md:flex-row'>
        <div className='flex flex-1 items-center gap-6'>
          {category.imageUrl && (
            <div className='relative hidden h-24 w-24 overflow-hidden rounded-xl border shadow-sm md:block'>
              <Image
                src={category.imageUrl}
                alt={category.name}
                fill
                className='object-cover'
              />
            </div>
          )}

          <div className='flex flex-col items-center text-center md:items-start md:text-left'>
            <motion.h1
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className='text-3xl font-bold tracking-tight md:text-4xl'
            >
              {category.name}
            </motion.h1>
            {category.description && (
              <motion.p
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className='mt-2 max-w-2xl text-muted-foreground'
              >
                {category.description}
              </motion.p>
            )}
          </div>
        </div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className='flex flex-col items-center rounded-lg border bg-background p-4 shadow-sm'
        >
          <span className='text-3xl font-bold text-primary'>
            {totalEntries}
          </span>
          <span className='text-sm text-muted-foreground'>
            {totalEntries === 1 ? 'Entry' : 'Entries'}
          </span>
        </motion.div>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/core/knowledge/EnhancedKnowledgeCategoryCard.tsx">
'use client';
import Link from 'next/link';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';
import type { KnowledgeCategory } from '@/types/core/knowledge';

interface EnhancedKnowledgeCategoryCardProps {
  category: KnowledgeCategory;
  className?: string;
}

export const EnhancedKnowledgeCategoryCard = ({
  category,
  className,
}: EnhancedKnowledgeCategoryCardProps) => {
  return (
    <Link href={`/knowledge/${category.slug}`}>
      <div
        className={cn(
          'group relative h-full overflow-hidden rounded-xl',
          className
        )}
      >
        {/* Base card with dark background */}
        <div className='absolute inset-0 bg-[#131316]'></div>

        {/* Premium gradient border */}
        <div className='absolute inset-0 rounded-xl p-px'>
          <div className='absolute inset-0 rounded-xl bg-gradient-to-b from-white/20 via-primary/10 to-transparent'></div>
        </div>

        {/* Card content */}
        <div className='relative z-10 flex h-full flex-col'>
          {/* Image with premium overlay */}
          {category.imageUrl && (
            <div className='relative aspect-[16/9] w-full overflow-hidden'>
              <Image
                src={category.imageUrl}
                alt={category.name}
                fill
                className='object-cover transition-transform duration-700 ease-in-out group-hover:scale-110'
                sizes='(max-width: 768px) 100vw, 33vw'
              />

              {/* Premium gradient overlay */}
              <div className='absolute inset-0 bg-gradient-to-t from-[#131316] via-[rgba(19,19,22,0.7)] to-transparent'></div>

              {/* Hover effect overlay */}
              <div className='absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-0 transition-opacity duration-500 group-hover:opacity-100'></div>
            </div>
          )}

          {/* Content area */}
          <div className='flex flex-1 flex-col p-6'>
            {/* Category name with gradient text */}
            <h3 className='bg-gradient-to-r from-white to-zinc-300 bg-clip-text text-xl font-semibold tracking-tight text-transparent transition-colors duration-300 group-hover:from-primary group-hover:to-primary-foreground/90'>
              {category.name}
            </h3>

            {/* Description */}
            {category.description && (
              <p className='mt-3 line-clamp-3 text-zinc-400'>
                {category.description}
              </p>
            )}

            {/* Call to action */}
            <div className='mt-auto flex items-center pt-6'>
              <motion.span
                className='text-sm font-medium text-zinc-300 transition-colors duration-300 group-hover:text-primary'
                initial={{ x: 0 }}
                whileHover={{ x: 5 }}
              >
                Explore category
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  className='ml-1.5 inline-block h-4 w-4 transform transition-transform duration-300 group-hover:translate-x-1'
                  fill='none'
                  viewBox='0 0 24 24'
                  stroke='currentColor'
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    d='M13 7l5 5m0 0l-5 5m5-5H6'
                  />
                </svg>
              </motion.span>
            </div>
          </div>

          {/* Subtle inner glow effect on hover */}
          <div
            className='absolute inset-0 rounded-xl opacity-0 transition-opacity duration-500 group-hover:opacity-100'
            style={{
              background:
                'radial-gradient(circle at center, rgba(255,255,255,0.08) 0%, transparent 70%)',
              boxShadow: 'inset 0 0 30px rgba(255,255,255,0.05)',
            }}
          ></div>
        </div>

        {/* Card shine effect on hover */}
        <div className='absolute inset-0 -left-40 -top-40 h-[200%] w-[200%] translate-x-full translate-y-full rotate-45 bg-white opacity-0 transition-all duration-1000 ease-out group-hover:translate-x-[-50%] group-hover:translate-y-[-50%] group-hover:opacity-5'></div>
      </div>
    </Link>
  );
};
</file>

<file path="src/components/core/knowledge/EnhancedKnowledgeCategoryGrid.tsx">
'use client';

import { useQuery } from '@tanstack/react-query';
import { KnowledgeService } from '@/models/server/knowledge';
import { EnhancedKnowledgeCategoryCard } from '@/components/core/knowledge/EnhancedKnowledgeCategoryCard';
import { useSearchParams } from 'next/navigation';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { AlertCircle } from 'lucide-react';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';
import { useEffect } from 'react';
import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

export const EnhancedKnowledgeCategoryGrid = () => {
  const searchParams = useSearchParams();
  const categorySlug = searchParams.get('category');
  const setIsFetching = useKnowledgeStore((state) => state.setIsFetching);

  const {
    data: categories,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['knowledge', 'categories', categorySlug],
    queryFn: async () => {
      try {
        if (categorySlug) {
          // Get main category first
          const mainCategory =
            await KnowledgeService.getMainCategoryBySlug(categorySlug);

          // Then get its subcategories
          const subcategories = await KnowledgeService.getSubcategories(
            mainCategory.$id
          );
          return subcategories;
        } else {
          // If no category selected, get all knowledge categories
          const allCategories = await KnowledgeService.getKnowledgeCategories();
          return allCategories;
        }
      } catch (err) {
        console.error('Error in EnhancedKnowledgeCategoryGrid:', err);
        throw err;
      }
    },
  });

  // Update isFetching state in store
  useEffect(() => {
    setIsFetching(isLoading);
  }, [isLoading, setIsFetching]);

  // Section title component with heading font
  const SectionTitle = ({ children }: { children: React.ReactNode }) => (
    <motion.h2
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={cn(
        'font-heading text-3xl font-bold tracking-tight md:text-4xl',
        'bg-gradient-to-r from-white to-zinc-400 bg-clip-text text-transparent'
      )}
    >
      {children}
    </motion.h2>
  );

  if (error) {
    return (
      <div className='space-y-6'>
        <SectionTitle>Explore Categories</SectionTitle>
        <Alert variant='destructive'>
          <AlertCircle className='h-4 w-4' />
          <AlertDescription>
            {error instanceof Error
              ? error.message
              : 'Failed to load knowledge categories'}
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className='grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3'>
        {Array.from({ length: 6 }).map((_, i) => (
          <div
            key={i}
            className='h-[400px] animate-pulse rounded-xl bg-zinc-800/50'
          />
        ))}
      </div>
    );
  }

  if (!categories?.length) {
    return (
      <div className='space-y-6'>
        <SectionTitle>Explore Categories</SectionTitle>
        <Alert>
          <AlertDescription>No knowledge categories found</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className='grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3'
    >
      {categories.map((category, index) => (
        <motion.div
          key={category.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            duration: 0.4,
            delay: index * 0.1,
            ease: [0.25, 0.1, 0.25, 1],
          }}
          className='h-full'
        >
          <EnhancedKnowledgeCategoryCard
            category={category}
            className='card-3d hover-glow h-full'
          />
        </motion.div>
      ))}
    </motion.div>
  );
};
</file>

<file path="src/components/core/knowledge/EnhancedKnowledgeGrid.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useInfiniteQuery } from '@tanstack/react-query';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';
import { EnhancedKnowledgeCategoryCard } from './EnhancedKnowledgeCategoryCard';
import { EntryModal } from './entries/EntryModal';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { InfiniteGrid } from '@/components/shared/InfiniteGrid';
import { KnowledgeService } from '@/models/server/knowledge';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

interface EnhancedKnowledgeGridProps {
  categorySlug?: string;
  initialData?: {
    documents: KnowledgeEntry[];
    total: number;
    hasMore: boolean;
    nextPage: number;
  };
}

export const EnhancedKnowledgeGrid = ({
  categorySlug,
  initialData,
}: EnhancedKnowledgeGridProps) => {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  // Get the entry slug from the URL query parameter
  const entrySlug = searchParams.get('entry');

  // State for the modal
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentEntry, setCurrentEntry] = useState<KnowledgeEntry | null>(null);
  const [currentEntryIndex, setCurrentEntryIndex] = useState<number>(-1);

  const {
    data,
    error,
    isError,
    isFetchingNextPage,
    hasNextPage,
    fetchNextPage,
    refetch,
    isPending,
  } = useInfiniteQuery({
    queryKey: ['knowledge', categorySlug, ''],
    queryFn: async ({ pageParam = 1 }) => {
      // First get the category by slug to get its ID
      const category = categorySlug
        ? await KnowledgeService.getCategoryBySlug(categorySlug)
        : null;

      const response = await KnowledgeService.listKnowledgeEntries({
        categoryId: category?.$id,
        page: pageParam,
      });

      // Ensure that every mapped document includes categorySlug.
      const mappedDocuments = response.documents.map((doc) => ({
        ...doc,
        categorySlug: doc.categorySlug
          ? doc.categorySlug
          : categorySlug || 'uncategorized',
      }));
      return {
        documents: mappedDocuments as KnowledgeEntry[],
        total: response.total,
        hasMore: response.documents.length === 9,
        nextPage: pageParam + 1,
      };
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) =>
      lastPage.hasMore ? lastPage.nextPage : undefined,
    initialData: initialData
      ? {
          pages: [initialData],
          pageParams: [1],
        }
      : undefined,
  });

  // Flatten all pages into a single array.
  const entries = data?.pages.flatMap((page) => page.documents) || [];

  // Effect to handle URL changes
  useEffect(() => {
    if (entrySlug && entries.length > 0) {
      const entry = entries.find((e) => e.slug === entrySlug);
      if (entry) {
        setCurrentEntry(entry);
        setCurrentEntryIndex(entries.findIndex((e) => e.slug === entrySlug));
        setIsModalOpen(true);
      }
    } else {
      setIsModalOpen(false);
    }
  }, [entrySlug, entries]);

  // Handle opening the modal
  const handleOpenModal = (entry: KnowledgeEntry) => {
    // Update the URL with the entry slug
    const params = new URLSearchParams(searchParams.toString());
    params.set('entry', entry.slug);
    router.push(`${pathname}?${params.toString()}`, { scroll: false });
  };

  // Handle closing the modal
  const handleCloseModal = () => {
    // Remove the entry slug from the URL
    const params = new URLSearchParams(searchParams.toString());
    params.delete('entry');
    router.push(`${pathname}?${params.toString()}`, { scroll: false });
  };

  // Handle navigation to previous entry
  const handlePreviousEntry = () => {
    if (currentEntryIndex > 0) {
      const prevEntry = entries[currentEntryIndex - 1];
      const params = new URLSearchParams(searchParams.toString());
      params.set('entry', prevEntry.slug);
      router.push(`${pathname}?${params.toString()}`, { scroll: false });
    }
  };

  // Handle navigation to next entry
  const handleNextEntry = () => {
    if (currentEntryIndex < entries.length - 1) {
      const nextEntry = entries[currentEntryIndex + 1];
      const params = new URLSearchParams(searchParams.toString());
      params.set('entry', nextEntry.slug);
      router.push(`${pathname}?${params.toString()}`, { scroll: false });
    }
  };

  if (isPending) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(6)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (isError) {
    return (
      <div className='mt-8 text-center'>
        <p className='text-red-500'>Error loading entries: {error.message}</p>
        <button
          onClick={() => refetch()}
          className='rounded bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90'
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <>
      <InfiniteGrid
        hasMore={hasNextPage}
        isFetching={isFetchingNextPage}
        fetchNextAction={() => fetchNextPage()}
      >
        {entries.map((entry: KnowledgeEntry) => (
          <button
            key={entry.$id}
            onClick={() => handleOpenModal(entry)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleOpenModal(entry);
              }
            }}
            className='w-full cursor-pointer border-none bg-transparent p-0 text-left'
            aria-label={`Open ${entry.title}`}
          >
            <EnhancedKnowledgeCategoryCard
              category={{
                $id: entry.$id,
                name: entry.title,
                slug: entry.slug,
                description: entry.summary,
                order: 0,
                isActive: true,
                imageUrl: entry.imageUrl,
                $createdAt: entry.$createdAt,
                $updatedAt: entry.$updatedAt,
              }}
            />
          </button>
        ))}
      </InfiniteGrid>

      {/* Entry Modal */}
      {currentEntry && (
        <EntryModal
          entry={currentEntry}
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          onPrevious={handlePreviousEntry}
          onNext={handleNextEntry}
          hasPrevious={currentEntryIndex > 0}
          hasNext={currentEntryIndex < entries.length - 1}
        />
      )}
    </>
  );
};
</file>

<file path="src/components/core/knowledge/FeaturedKnowledge.tsx">
'use client';
import { useQuery } from '@tanstack/react-query';
import { KnowledgeCard } from './KnowledgeCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { KnowledgeService } from '@/models/server/knowledge';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

export const FeaturedKnowledge = () => {
  const { data, isLoading, error } = useQuery<KnowledgeEntry[]>({
    queryKey: ['knowledge', 'featured'],
    queryFn: () => KnowledgeService.listFeaturedEntries(),
  });

  if (isLoading) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(3)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (error) {
    return <p className='text-red-500'>Failed to load featured content.</p>;
  }

  return (
    <section className='space-y-6'>
      <h2 className='text-2xl font-bold'>Featured Content</h2>
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {data?.map((entry) => <KnowledgeCard key={entry.$id} entry={entry} />)}
      </div>
    </section>
  );
};
</file>

<file path="src/components/core/knowledge/FilterPanel.tsx">
'use client';

import { Button } from '@/components/ui/atoms/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
} from '@/components/ui/dropdown-menu';
import { SlidersHorizontal } from 'lucide-react';

interface FilterPanelProps {
  _onFilterChange?: (filters: string[]) => void;
}

export function FilterPanel({ _onFilterChange }: FilterPanelProps) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant='outline' size='sm' className='gap-2'>
          <SlidersHorizontal className='h-4 w-4' />
          Filters
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align='end' className='w-48'>
        <DropdownMenuLabel>Filter by</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuCheckboxItem checked>
          Featured Knowledge
        </DropdownMenuCheckboxItem>
        <DropdownMenuCheckboxItem>Recently Added</DropdownMenuCheckboxItem>
        <DropdownMenuCheckboxItem>Most Popular</DropdownMenuCheckboxItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/components/core/knowledge/KnowledgeCard.tsx">
'use client';
import Link from 'next/link';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';
import type { KnowledgeEntry } from '@/types/core/knowledge';

interface KnowledgeCardProps {
  entry: KnowledgeEntry;
  className?: string;
}

export const KnowledgeCard = ({ entry, className }: KnowledgeCardProps) => {
  return (
    <Link
      href={`/knowledge/${entry.categorySlug}/${entry.slug}`}
      aria-label={`View ${entry.title} entry`}
      className='group block'
    >
      <motion.article
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className={cn(
          'relative flex h-full flex-col overflow-hidden rounded-lg border bg-card shadow-sm',
          'transition-all hover:shadow-md group-hover:border-primary',
          className
        )}
      >
        {entry.imageUrl && (
          <div className='relative aspect-video'>
            <Image
              src={entry.imageUrl}
              alt={`Cover image for ${entry.title}`}
              fill
              className='object-cover'
              sizes='(max-width: 768px) 100vw, 33vw'
              unoptimized
            />
          </div>
        )}

        <div className='flex flex-1 flex-col p-6'>
          <div className='flex items-center justify-between gap-2 text-sm text-muted-foreground'>
            <time dateTime={entry.$createdAt}>
              {new Date(entry.$createdAt).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
              })}
            </time>
          </div>
          <h3 className='mt-2 text-xl font-semibold tracking-tight'>
            {entry.title}
          </h3>
          {entry.summary && (
            <p className='mt-2 line-clamp-2 text-muted-foreground'>
              {entry.summary}
            </p>
          )}
        </div>
      </motion.article>
    </Link>
  );
};
</file>

<file path="src/components/core/knowledge/KnowledgeCardSkeleton.tsx">
import { Skeleton } from '@/components/ui/atoms/skeleton';

export const KnowledgeCardSkeleton = () => (
  <div className='flex flex-col gap-3 rounded-lg border p-6'>
    <Skeleton className='h-4 w-1/2' />
    <Skeleton className='h-6 w-3/4' />
    <div className='space-y-2'>
      <Skeleton className='h-4 w-full' />
      <Skeleton className='h-4 w-2/3' />
    </div>
    <Skeleton className='mt-4 aspect-video w-full rounded-md' />
  </div>
);
</file>

<file path="src/components/core/knowledge/KnowledgeCategoryCard.tsx">
'use client';
import Link from 'next/link';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';
import type { KnowledgeCategory } from '@/types/core/knowledge';

interface KnowledgeCategoryCardProps {
  category: KnowledgeCategory;
  className?: string;
}

export const KnowledgeCategoryCard = ({
  category,
  className,
}: KnowledgeCategoryCardProps) => {
  return (
    <Link href={`/knowledge/${category.slug}`}>
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className={cn(
          'group relative flex flex-col overflow-hidden rounded-lg border bg-card shadow-sm transition-all hover:shadow-md',
          className
        )}
      >
        {category.imageUrl && (
          <div className='relative aspect-video'>
            <Image
              src={category.imageUrl}
              alt={category.name}
              fill
              className='object-cover'
              sizes='(max-width: 768px) 100vw, 33vw'
            />
          </div>
        )}

        <div className='flex flex-col p-6'>
          <time className='mb-2 text-sm text-muted-foreground'>
            {new Date(category.$createdAt).toLocaleDateString()}
          </time>
          <h3 className='text-xl font-semibold tracking-tight'>
            {category.name}
          </h3>
          {category.description && (
            <p className='mt-2 line-clamp-2 text-muted-foreground'>
              {category.description}
            </p>
          )}
        </div>
      </motion.div>
    </Link>
  );
};
</file>

<file path="src/components/core/knowledge/KnowledgeCategoryGrid.tsx">
'use client';

import { useQuery } from '@tanstack/react-query';
import { KnowledgeService } from '@/models/server/knowledge';
import { KnowledgeCategoryCard } from '@/components/core/knowledge/KnowledgeCategoryCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { useSearchParams } from 'next/navigation';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { AlertCircle } from 'lucide-react';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';
import { useEffect } from 'react';

export const KnowledgeCategoryGrid = () => {
  const searchParams = useSearchParams();
  const categorySlug = searchParams.get('category');
  const setIsFetching = useKnowledgeStore((state) => state.setIsFetching);

  const {
    data: categories,
    isPending,
    error,
    isError,
  } = useQuery({
    queryKey: ['knowledge', 'categories', categorySlug],
    queryFn: async () => {
      try {
        if (categorySlug) {
          // Get main category first
          const mainCategory =
            await KnowledgeService.getMainCategoryBySlug(categorySlug);

          // Then get its subcategories
          const subcategories = await KnowledgeService.getSubcategories(
            mainCategory.$id
          );
          return subcategories;
        } else {
          // If no category selected, get all knowledge categories
          const allCategories = await KnowledgeService.getKnowledgeCategories();
          return allCategories;
        }
      } catch (err) {
        console.error('Error in KnowledgeCategoryGrid:', err);
        throw err;
      }
    },
  });

  // Update isFetching state in store
  useEffect(() => {
    setIsFetching(isPending);
  }, [isPending, setIsFetching]);

  if (isError) {
    return (
      <Alert variant='destructive'>
        <AlertCircle className='h-4 w-4' />
        <AlertDescription>
          {error instanceof Error
            ? error.message
            : 'Failed to load knowledge categories'}
        </AlertDescription>
      </Alert>
    );
  }

  if (isPending) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(3)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (!categories?.length) {
    return (
      <Alert>
        <AlertDescription>No knowledge categories found</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3'>
      {categories.map((category) => (
        <KnowledgeCategoryCard key={category.$id} category={category} />
      ))}
    </div>
  );
};
</file>

<file path="src/components/core/knowledge/KnowledgeEntryHeader.tsx">
'use client';
import Link from 'next/link';
import { BookOpen, Share2 } from 'lucide-react';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

interface KnowledgeEntryHeaderProps {
  entry: KnowledgeEntry;
}

export default function KnowledgeEntryHeader({
  entry,
}: KnowledgeEntryHeaderProps) {
  // Example: derive formatted date and breadcrumb text
  const publishedDate = new Date(entry.$createdAt).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  });

  // For badge we capitalize the entry type
  const contentTypeBadge = entry.type ? entry.type.toUpperCase() : 'UNKNOWN';

  return (
    <header className='mb-8 border-b pb-4'>
      {/* Breadcrumb */}
      <nav className='mb-2 text-sm text-gray-500'>
        <ol className='flex items-center space-x-2'>
          <li>
            <Link href='/knowledge' className='hover:text-primary'>
              Knowledge Hub
            </Link>
          </li>
          <li aria-hidden='true'>/</li>
          <li>
            <Link
              href={`/knowledge/${entry.categorySlug}`}
              className='hover:text-primary'
            >
              {entry.categorySlug}
            </Link>
          </li>
          <li aria-hidden='true'>/</li>
          <li className='font-medium'>{entry.title}</li>
        </ol>
      </nav>
      {/* Title Area */}
      <div className='flex flex-col justify-between md:flex-row md:items-center'>
        <h1 className='bg-gradient-to-r from-blue-500 to-indigo-500 bg-clip-text text-4xl font-bold text-transparent'>
          {entry.title}
        </h1>
        <div className='mt-4 flex items-center space-x-4 md:mt-0'>
          <span className='rounded-full bg-blue-100 px-3 py-1 text-xs font-semibold text-blue-700'>
            {contentTypeBadge}
          </span>
          <span className='text-sm text-gray-600'>{publishedDate}</span>
          {/* Action buttons */}
          <button
            aria-label='Share'
            className='rounded-full p-2 hover:bg-gray-200'
          >
            <Share2 className='h-5 w-5 text-gray-600' />
          </button>
          <button
            aria-label='Save Entry'
            className='rounded-full p-2 hover:bg-gray-200'
          >
            <BookOpen className='h-5 w-5 text-gray-600' />
          </button>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/core/knowledge/KnowledgeGrid.tsx">
'use client';
import { useInfiniteQuery } from '@tanstack/react-query';
import { KnowledgeCard } from './KnowledgeCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { InfiniteGrid } from '@/components/shared/InfiniteGrid';
import { KnowledgeService } from '@/models/server/knowledge';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';

interface KnowledgeGridProps {
  categorySlug?: string;
  initialData?: {
    documents: KnowledgeEntry[];
    total: number;
    hasMore: boolean;
    nextPage: number;
  };
}

export const KnowledgeGrid = ({
  categorySlug,
  initialData,
}: KnowledgeGridProps) => {
  const {
    data,
    error,
    isError,
    isFetchingNextPage,

    hasNextPage,
    fetchNextPage,

    refetch,
    isPending,
  } = useInfiniteQuery({
    queryKey: ['knowledge', categorySlug, ''],
    queryFn: async ({ pageParam = 1 }) => {
      // First get the category by slug to get its ID
      const category = categorySlug
        ? await KnowledgeService.getCategoryBySlug(categorySlug)
        : null;

      const response = await KnowledgeService.listKnowledgeEntries({
        categoryId: category?.$id,
        page: pageParam,
      });

      // Ensure that every mapped document includes categorySlug.
      const mappedDocuments = response.documents.map((doc) => ({
        ...doc,
        categorySlug: doc.categorySlug ? doc.categorySlug : doc.categoryId,
      }));
      return {
        documents: mappedDocuments as KnowledgeEntry[],
        total: response.total,
        hasMore: response.documents.length === 9,
        nextPage: pageParam + 1,
      };
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) =>
      lastPage.hasMore ? lastPage.nextPage : undefined,
    initialData: initialData
      ? {
          pages: [initialData],
          pageParams: [1],
        }
      : undefined,
  });

  // Flatten all pages into a single array.
  const entries = data?.pages.flatMap((page) => page.documents) || [];
  const _totalEntries = data?.pages[0]?.total ?? 0;

  const _getFirstCategoryId = (doc: KnowledgeEntry): string => {
    return doc.categoryId || '';
  };

  if (isPending) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(6)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (isError) {
    return (
      <div className='mt-8 text-center'>
        <p className='text-red-500'>Error loading entries: {error.message}</p>
        <button
          onClick={() => refetch()}
          className='rounded bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90'
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <InfiniteGrid
      hasMore={hasNextPage}
      isFetching={isFetchingNextPage}
      fetchNextAction={() => fetchNextPage()}
    >
      {entries.map((entry: KnowledgeEntry) => (
        <KnowledgeCard key={entry.$id} entry={entry} />
      ))}
    </InfiniteGrid>
  );
};
</file>

<file path="src/components/core/knowledge/LoadingOverlay.tsx">
'use client';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';
import { Loader2 } from 'lucide-react';

export const LoadingOverlay = () => {
  const { isFetching } = useKnowledgeStore();

  if (!isFetching) return null;

  return (
    <div className='fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm'>
      <div className='flex items-center gap-2 text-foreground'>
        <Loader2 className='h-8 w-8 animate-spin' />
        <span className='text-lg'>Loading...</span>
      </div>
    </div>
  );
};
</file>

<file path="src/components/core/knowledge/SearchBar.tsx">
'use client';
import { useDebounce } from '@/lib/hooks/shared/useDebounce';
import { Input } from '@/components/ui/atoms/input';
import { Search, X, Loader2 } from 'lucide-react';
import { useEffect, useState } from 'react';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';

export const SearchBar = () => {
  const [localQuery, setLocalQuery] = useState('');
  const debouncedQuery = useDebounce(localQuery, 300);
  const { setSearchQuery, isFetching } = useKnowledgeStore();

  useEffect(() => {
    setSearchQuery(debouncedQuery);
  }, [debouncedQuery, setSearchQuery]);

  return (
    <div className='relative w-full max-w-md'>
      <Search className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2' />
      <Input
        value={localQuery}
        onChange={(e) => setLocalQuery(e.target.value)}
        placeholder='Search knowledge base...'
        className='pl-9 pr-12'
      />
      {localQuery && (
        <button
          onClick={() => setLocalQuery('')}
          className='absolute right-3 top-1/2 -translate-y-1/2'
          aria-label='Clear search'
        >
          {isFetching ? (
            <Loader2 className='h-4 w-4 animate-spin' />
          ) : (
            <X className='h-4 w-4' />
          )}
        </button>
      )}
    </div>
  );
};
</file>

<file path="src/components/core/knowledge/UrlSync.tsx">
'use client';
import { useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';
import { KnowledgeService } from '@/models/server/knowledge';

export function UrlSync() {
  const searchParams = useSearchParams();
  const { setCategory, setSearchQuery, setSortBy, selectedCategory } =
    useKnowledgeStore();

  // Fetch category by slug
  useEffect(() => {
    async function fetchCategory() {
      const categorySlug = searchParams.get('category');
      if (!categorySlug) return;

      try {
        const category = await KnowledgeService.getCategoryBySlug(categorySlug);
        if (category) {
          setCategory(category.$id);
        }
      } catch (error) {
        console.error('Error fetching category:', error);
      }
    }

    fetchCategory();
  }, [searchParams, setCategory]);

  // Update URL when store changes
  useEffect(() => {
    if (!selectedCategory) return;

    const newUrl = new URL(window.location.href);
    newUrl.searchParams.set('category', selectedCategory);
    window.history.replaceState({}, '', newUrl.toString());
  }, [selectedCategory]);

  useEffect(() => {
    let isActive = true;
    const params = {
      categorySlug: searchParams.get('category'),
      query: searchParams.get('q'),
      sort: searchParams.get('sort'),
    };

    if (isActive) {
      if (params.query) setSearchQuery(params.query);
      if (params.sort) setSortBy(params.sort);
    }

    return () => {
      isActive = false;
    };
  }, [searchParams, setSearchQuery, setSortBy]);

  return null;
}
</file>

<file path="src/components/core/resources/entries/DefaultEntry.tsx">
import type { ResourceEntry } from '@/types/core/resources/entry';
import DOMPurify from 'dompurify';

interface DefaultEntryProps {
  entry: ResourceEntry;
}

export default function DefaultEntry({ entry }: DefaultEntryProps) {
  const safeContent = DOMPurify.sanitize(entry.content);

  return (
    <section className='prose dark:prose-invert mx-auto'>
      <div dangerouslySetInnerHTML={{ __html: safeContent }} />
    </section>
  );
}
</file>

<file path="src/components/core/resources/CategoryHeader.tsx">
'use client';

import Link from 'next/link';
import { cn } from '@/lib/utils';
import type { ResourceCategory } from '@/types/core/resources/category';

export interface CategoryHeaderProps {
  category: ResourceCategory;
  totalEntries: number;
  className?: string;
}

export const CategoryHeader = ({
  category,
  totalEntries,
  className,
}: CategoryHeaderProps) => {
  return (
    <header
      className={cn(
        'relative overflow-hidden bg-gradient-to-br from-green-900/80 to-teal-900/50',
        'border-b border-green-800/30 backdrop-blur-lg',
        className
      )}
    >
      <div className='container relative py-16 md:py-24'>
        {/* Breadcrumb Navigation */}
        <nav aria-label='Breadcrumb' className='mb-6 text-sm text-green-200'>
          <ol className='flex items-center space-x-2'>
            <li>
              <Link
                href='/resources'
                className='transition-colors hover:text-primary'
              >
                Resources Hub
              </Link>
            </li>
            <li aria-hidden='true' className='text-green-400'>
              /
            </li>
            <li className='font-medium text-white' aria-current='page'>
              {category.name}
            </li>
          </ol>
        </nav>
        {/* Main Header Content */}
        <div className='max-w-3xl'>
          <h1 className='text-4xl font-bold tracking-tight text-white md:text-5xl'>
            {category.name}
          </h1>
          {category.description && (
            <p className='mt-4 text-lg text-green-100'>
              {category.description}
            </p>
          )}
          <div className='mt-6 flex items-center gap-4'>
            <span className='inline-flex items-center rounded-full bg-green-800/30 px-4 py-2 text-sm font-medium text-green-100'>
              {totalEntries} curated resources
            </span>
          </div>
        </div>
        {/* Gradient Overlay */}
        <div
          className='absolute inset-0 -z-10 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.4),transparent_60%)]'
          aria-hidden='true'
        />
      </div>
    </header>
  );
};
</file>

<file path="src/components/core/resources/CategoryNavWrapper.tsx">
'use client';

import React, { useState } from 'react';
import { CategoryNav } from '@/components/ui/molecules/CategoryNav';

// Resource categories - in a real implementation, these would come from a data source
const resourceCategories = [
  { id: 'books', name: 'Books', slug: 'books' },
  { id: 'courses', name: 'Courses', slug: 'courses' },
  { id: 'tools', name: 'Tools', slug: 'tools' },
  { id: 'articles', name: 'Articles', slug: 'articles' },
  { id: 'podcasts', name: 'Podcasts', slug: 'podcasts' }
];

export function CategoryNavWrapper() {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

  const handleCategorySelect = (slug: string | null) => {
    setSelectedCategory(slug);
    
    // In a real implementation, this would:
    // 1. Update a Zustand store
    // 2. Trigger filtering of resources
    // 3. Possibly update the URL for shareable states
  };

  return (
    <CategoryNav
      categories={resourceCategories}
      selectedCategory={selectedCategory}
      onSelectAction={handleCategorySelect}
    />
  );
}
</file>

<file path="src/components/core/resources/FeaturedResources.tsx">
'use client';

import { useQuery } from '@tanstack/react-query';
import { ResourceCard } from './ResourceCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { ResourceService } from '@/models/server/resources';
import type { ResourceEntry } from '@/types/core/resources/entry';

export const FeaturedResources = () => {
  const { data, isLoading, error } = useQuery<ResourceEntry[]>({
    queryKey: ['resources', 'featured'],
    queryFn: () => ResourceService.listFeaturedEntries(3),
  });

  if (isLoading) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(3)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (error) {
    return <p className='text-red-500'>Failed to load featured content.</p>;
  }

  return (
    <section className='space-y-6'>
      <h2 className='text-2xl font-bold'>Featured Resources</h2>
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {data?.map((entry) => <ResourceCard key={entry.$id} entry={entry} />)}
      </div>
    </section>
  );
};
</file>

<file path="src/components/core/resources/LoadingOverlay.tsx">
'use client';
import { useResourcesStore } from '@/store/useResourcesStore';
import { Loader2 } from 'lucide-react';

export const LoadingOverlay = () => {
  const { isFetching } = useResourcesStore();

  if (!isFetching) return null;

  return (
    <div className='fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm'>
      <div className='flex items-center gap-2 text-foreground'>
        <Loader2 className='h-8 w-8 animate-spin' />
        <span className='text-lg'>Loading...</span>
      </div>
    </div>
  );
};
</file>

<file path="src/components/core/resources/ResourceCard.tsx">
'use client';

import Link from 'next/link';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';
import type { ResourceEntry } from '@/types/core/resources/entry';

interface ResourceCardProps {
  entry: ResourceEntry;
  className?: string;
}

export const ResourceCard = ({ entry, className }: ResourceCardProps) => {
  return (
    <Link
      href={`/resources/${entry.categorySlug}/${entry.slug}`}
      aria-label={`View ${entry.title} resource`}
      className='group block'
    >
      <motion.article
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className={cn(
          'relative flex h-full flex-col overflow-hidden rounded-lg border bg-card shadow-sm transition-all hover:shadow-md group-hover:border-primary',
          className
        )}
      >
        {entry.imageUrl && (
          <div className='relative aspect-video'>
            <Image
              src={entry.imageUrl}
              alt={`Cover image for ${entry.title}`}
              fill
              className='object-cover'
              sizes='(max-width: 768px) 100vw, 33vw'
              unoptimized
            />
          </div>
        )}
        <div className='flex flex-1 flex-col p-6'>
          <div className='flex items-center justify-between gap-2 text-sm text-muted-foreground'>
            <time dateTime={entry.$createdAt}>
              {new Date(entry.$createdAt).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
              })}
            </time>
          </div>
          <h3 className='mt-2 text-xl font-semibold tracking-tight'>
            {entry.title}
          </h3>
          {entry.summary && (
            <p className='mt-2 line-clamp-2 text-muted-foreground'>
              {entry.summary}
            </p>
          )}
        </div>
      </motion.article>
    </Link>
  );
};
</file>

<file path="src/components/core/resources/ResourceCardSkeleton.tsx">
import { Skeleton } from '@/components/ui/atoms/skeleton';

export const ResourceCardSkeleton = () => (
  <div className='flex flex-col gap-3 rounded-lg border p-6'>
    <Skeleton className='h-4 w-1/2' />
    <Skeleton className='h-6 w-3/4' />
    <div className='space-y-2'>
      <Skeleton className='h-4 w-full' />
      <Skeleton className='h-4 w-2/3' />
    </div>
    <Skeleton className='mt-4 aspect-video w-full rounded-md' />
  </div>
);
</file>

<file path="src/components/core/resources/ResourceCategoryCard.tsx">
'use client';

import Link from 'next/link';
import { cn } from '@/lib/utils';
import type { ResourceCategory } from '@/types/core/resources/category';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';

interface ResourceCategoryCardProps {
  category: ResourceCategory;
  className?: string;
}

export const ResourceCategoryCard = ({
  category,
  className,
}: ResourceCategoryCardProps) => {
  return (
    <Link href={`/resources/${category.slug}`}>
      <Card className={cn('group h-full cursor-pointer', className)}>
        <CardHeader>
          <CardTitle className='line-clamp-2'>{category.name}</CardTitle>
        </CardHeader>
        <CardContent>
          {category.description && (
            <p className='line-clamp-3 text-sm text-muted-foreground'>
              {category.description}
            </p>
          )}
        </CardContent>
      </Card>
    </Link>
  );
};
</file>

<file path="src/components/core/resources/ResourceCategoryGrid.test.tsx">
/**
 * @jest-environment jsdom
 */
import { render, screen, waitFor } from '@testing-library/react';
import { ResourceCategoryGrid } from './ResourceCategoryGrid';
import { ResourceService } from '@/models/server/resources';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

// Mock the next/navigation module
jest.mock('next/navigation', () => ({
  useSearchParams: () => ({
    get: jest.fn((param) => param === 'category' ? null : null),
  }),
}));

// Mock the ResourceService
jest.mock('@/models/server/resources', () => ({
  ResourceService: {
    getResourceCategories: jest.fn(),
    getMainCategoryBySlug: jest.fn(),
    getSubcategories: jest.fn(),
  },
}));

// Mock the ResourceCategoryCard component
jest.mock('./ResourceCategoryCard', () => ({
  ResourceCategoryCard: function MockResourceCategoryCard({ category }: { category: any }) {
    return (
      <div data-testid="resource-category-card">
        {category.name}
      </div>
    );
  },
}));

// Mock the Skeleton component
jest.mock('@/components/ui/skeleton', () => ({
  Skeleton: function MockSkeleton(props: React.HTMLAttributes<HTMLDivElement>) {
    return <div data-testid="skeleton" {...props} />;
  },
}));

describe('ResourceCategoryGrid', () => {
  let queryClient: QueryClient;

  beforeEach(() => {
    queryClient = new QueryClient({
      defaultOptions: {
        queries: {
          retry: false,
        },
      },
    });
    jest.clearAllMocks();
  });

  it('renders loading state initially', () => {
    // Mock the service to return a promise that never resolves
    (ResourceService.getResourceCategories as jest.Mock).mockReturnValue(
      new Promise(() => {})
    );

    render(
      <QueryClientProvider client={queryClient}>
        <ResourceCategoryGrid />
      </QueryClientProvider>
    );

    // Check for loading skeletons
    expect(screen.getAllByTestId('skeleton')).toHaveLength(3);
  });

  it('renders resource categories when data is loaded', async () => {
    // Mock data
    const mockCategories = [
      { $id: '1', name: 'Category 1', description: 'Description 1' },
      { $id: '2', name: 'Category 2', description: 'Description 2' },
      { $id: '3', name: 'Category 3', description: 'Description 3' },
    ];

    // Mock the service to return the data
    (ResourceService.getResourceCategories as jest.Mock).mockResolvedValue(mockCategories);

    render(
      <QueryClientProvider client={queryClient}>
        <ResourceCategoryGrid />
      </QueryClientProvider>
    );

    // Wait for the data to load
    await waitFor(() => {
      expect(screen.getAllByTestId('resource-category-card')).toHaveLength(3);
    });

    // Check that each category is rendered
    expect(screen.getByText('Category 1')).toBeInTheDocument();
    expect(screen.getByText('Category 2')).toBeInTheDocument();
    expect(screen.getByText('Category 3')).toBeInTheDocument();
  });

  it('renders error state when there is an error', async () => {
    // Mock the service to throw an error
    (ResourceService.getResourceCategories as jest.Mock).mockRejectedValue(
      new Error('Failed to fetch categories')
    );

    render(
      <QueryClientProvider client={queryClient}>
        <ResourceCategoryGrid />
      </QueryClientProvider>
    );

    // Wait for the error message to appear
    await waitFor(() => {
      expect(screen.getByText(/Error loading resource categories/)).toBeInTheDocument();
    });
  });

  it('renders empty state when no categories are found', async () => {
    // Mock the service to return an empty array
    (ResourceService.getResourceCategories as jest.Mock).mockResolvedValue([]);

    render(
      <QueryClientProvider client={queryClient}>
        <ResourceCategoryGrid />
      </QueryClientProvider>
    );

    // Wait for the empty message to appear
    await waitFor(() => {
      expect(screen.getByText(/No resource categories found/)).toBeInTheDocument();
    });
  });
});
</file>

<file path="src/components/core/resources/ResourceCategoryGrid.tsx">
'use client';

import { useQuery } from '@tanstack/react-query';
import { ResourceService } from '@/models/server/resources';
import { ResourceCategoryCard } from '@/components/core/resources/ResourceCategoryCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import { useSearchParams } from 'next/navigation';

export const ResourceCategoryGrid = () => {
  const searchParams = useSearchParams();
  const categorySlug = searchParams.get('category');

  const { data, isPending, error } = useQuery({
    queryKey: ['resources', 'categories', categorySlug],
    queryFn: async () => {
      try {
        if (categorySlug) {
          // Get main category first
          const mainCategory =
            await ResourceService.getMainCategoryBySlug(categorySlug);

          // Then get its subcategories
          return ResourceService.getSubcategories(mainCategory.$id);
        } else {
          // If no category selected, get all resource categories
          return ResourceService.getResourceCategories();
        }
      } catch (err) {
        console.error('Error in ResourceCategoryGrid:', err);
        throw err;
      }
    },
    staleTime: 60 * 1000,
  });

  if (isPending) {
    return (
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(3)].map((_, i) => (
          <Skeleton key={i} className='h-64 w-full rounded-xl' />
        ))}
      </div>
    );
  }

  if (error) {
    console.error('ResourceCategoryGrid error:', error);
    return (
      <p className='text-center text-red-500'>
        Error loading resource categories. Please try again later.
      </p>
    );
  }

  if (!data || data.length === 0) {
    return (
      <p className='text-center text-muted-foreground'>
        No resource categories found {categorySlug ? `for ${categorySlug}` : ''}
        .
      </p>
    );
  }

  return (
    <section>
      <h2 className='sr-only'>Resource Categories</h2>
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>
        {data.map((category) => (
          <ResourceCategoryCard
            key={category.$id}
            category={category}
            className='transition-shadow hover:shadow-lg'
          />
        ))}
      </div>
    </section>
  );
};
</file>

<file path="src/components/core/resources/ResourceGrid.tsx">
'use client';

import { useQuery } from '@tanstack/react-query';
import { ResourceService } from '@/models/server/resources';
import { ResourceCard } from './ResourceCard';
import { Skeleton } from '@/components/ui/atoms/skeleton';
import type { ResourceEntry } from '@/types/core/resources/entry';

interface ResourceGridProps {
  initialData?: {
    documents: ResourceEntry[];
    total: number;
    hasMore: boolean;
    nextPage: number;
  };
  searchQuery?: string;
  categoryId?: string;
}

export function ResourceGrid({
  initialData,
  searchQuery,
  categoryId,
}: ResourceGridProps) {
  const {
    data: resources,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['resources', 'entries', categoryId, searchQuery],
    queryFn: () =>
      ResourceService.listResourceEntries({ categoryId, searchQuery }),
    initialData,
  });

  if (isLoading) {
    return (
      <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3'>
        {[...Array(6)].map((_, i) => (
          <Skeleton key={i} className='h-48 rounded-lg' />
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className='text-center'>
        <p className='text-destructive'>Failed to load resources</p>
      </div>
    );
  }

  if (!resources?.documents.length) {
    return (
      <div className='text-center'>
        <p className='text-muted-foreground'>No resources found</p>
      </div>
    );
  }

  return (
    <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3'>
      {resources.documents.map((resource: ResourceEntry) => (
        <ResourceCard key={resource.$id} entry={resource} />
      ))}
    </div>
  );
}
</file>

<file path="src/components/core/resources/ResourceHeader.tsx">
'use client';

import Link from 'next/link';
import { BookOpen, Share2 } from 'lucide-react';
import type { ResourceEntry } from '@/types/core/resources/entry';

interface ResourceEntryHeaderProps {
  entry: ResourceEntry;
}

export default function ResourceEntryHeader({
  entry,
}: ResourceEntryHeaderProps) {
  const publishedDate = new Date(entry.$createdAt).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  });
  const contentTypeBadge = entry.type ? entry.type.toUpperCase() : 'UNKNOWN';
  return (
    <header className='mb-8 border-b pb-4'>
      <nav className='mb-2 text-sm text-gray-500'>
        <ol className='flex items-center space-x-2'>
          <li>
            <Link href='/resources' className='hover:text-primary'>
              Resources
            </Link>
          </li>
          <li aria-hidden='true'>/</li>
          <li>
            <Link
              href={`/resources/${entry.categorySlug}`}
              className='hover:text-primary'
            >
              {entry.categorySlug}
            </Link>
          </li>
          <li aria-hidden='true'>/</li>
          <li className='font-medium'>{entry.title}</li>
        </ol>
      </nav>
      <div className='flex flex-col justify-between md:flex-row md:items-center'>
        <h1 className='bg-gradient-to-r from-blue-500 to-indigo-500 bg-clip-text text-4xl font-bold text-transparent'>
          {entry.title}
        </h1>
        <div className='mt-4 flex items-center space-x-4 md:mt-0'>
          <span className='rounded-full bg-blue-100 px-3 py-1 text-xs font-semibold text-blue-700'>
            {contentTypeBadge}
          </span>
          <span className='text-sm text-gray-600'>{publishedDate}</span>
          <button
            aria-label='Share'
            className='rounded-full p-2 hover:bg-gray-200'
          >
            <Share2 className='h-5 w-5 text-gray-600' />
          </button>
          <button
            aria-label='Save Resource'
            className='rounded-full p-2 hover:bg-gray-200'
          >
            <BookOpen className='h-5 w-5 text-gray-600' />
          </button>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/core/resources/UrlSync.tsx">
'use client';

import { useCallback, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import { useResourcesStore } from '@/store/useResourcesStore';
import { ResourceService } from '@/models/server/resources';

export function UrlSyncResources() {
  const searchParams = useSearchParams();
  const setCategory = useResourcesStore((state) => state.setCategory);
  const setSearchQuery = useResourcesStore((state) => state.setSearchQuery);

  /**
   * Helper function to get a category ID from a slug.
   * Returns null if not found or on error.
   */
  const getCategoryIdBySlug = useCallback(async (slug: string) => {
    try {
      const category = await ResourceService.getCategoryBySlug(slug);
      if (!category) {
        console.error('Category slug lookup failed: category is null');
        return null;
      }
      return category.$id;
    } catch (_error) {
      console.error('Category slug lookup failed:', _error);
      return null;
    }
  }, []);

  useEffect(() => {
    const categorySlug = searchParams.get('category');
    const searchQuery = searchParams.get('q');

    // Set the search query immediately
    setSearchQuery(searchQuery || '');

    // If there's a category slug, look up its ID and set it
    if (categorySlug) {
      getCategoryIdBySlug(categorySlug).then((categoryId) => {
        setCategory(categoryId);
      });
    } else {
      setCategory(null);
    }
  }, [searchParams, getCategoryIdBySlug, setCategory, setSearchQuery]);

  return null;
}
</file>

<file path="src/components/design-system/atoms/avatar-section.tsx">
import React from 'react';
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@/components/ui/atoms/avatar';

export function AvatarSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Avatar</h2>
      <p className='text-muted-foreground'>
        Avatars are used to represent users or entities in the interface.
      </p>

      <div className='flex space-x-4'>
        <Avatar>
          <AvatarImage src='https://github.com/shadcn.png' alt='@shadcn' />
          <AvatarFallback>CN</AvatarFallback>
        </Avatar>

        <Avatar>
          <AvatarFallback>JD</AvatarFallback>
        </Avatar>
      </div>

      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>src: string (for AvatarImage)</li>
          <li>alt: string (for AvatarImage)</li>
          <li>children: ReactNode (for Avatar and AvatarFallback)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/badge-section.tsx">
import React from 'react';
import { Badge } from '@/components/ui/atoms/badge';

export function BadgeSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-2xl font-bold'>Badge</h2>
      <p className='text-muted-foreground'>
        Badges are used to highlight statuses, labels, or categories.
      </p>

      <div className='flex flex-wrap gap-4'>
        <Badge variant='default'>Default</Badge>
        <Badge variant='secondary'>Secondary</Badge>
        <Badge variant='destructive'>Destructive</Badge>
        <Badge variant='outline'>Outline</Badge>
      </div>

      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>variant: "default" | "secondary" | "destructive" | "outline"</li>
          <li>className: string (optional)</li>
          <li>children: ReactNode</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/breadcrumb-section.tsx">
import React from 'react';
import {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@/components/ui/atoms/breadcrumb';
import { Home } from 'lucide-react';

export function BreadcrumbSection() {
  return (
    <section className='space-y-6 border-t border-zinc-700/30 px-6 py-8'>
      <h2 className='font-heading text-3xl font-bold text-zinc-100'>
        Breadcrumb
      </h2>
      <p className='text-zinc-400'>
        Breadcrumbs provide navigation context, showing the user’s location
        within the app. Used for hierarchical page navigation.
      </p>

      {/* Demo 1: No Background */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>No Background</h3>
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href='/'>Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href='/components'>Components</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>

      {/* Demo 2: With Background and Border */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>
          With Background and Border
        </h3>
        <Breadcrumb hasBackground>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href='/'>Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href='/components'>Components</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>

      {/* Demo 3: Slash Separator */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>Slash Separator</h3>
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href='/'>Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator>/</BreadcrumbSeparator>
            <BreadcrumbItem>
              <BreadcrumbLink href='/components'>Components</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator>/</BreadcrumbSeparator>
            <BreadcrumbItem>
              <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>

      {/* Demo 4: With Icon */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>With Icon</h3>
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href='/' isIcon>
                <Home className='h-4 w-4' />
                <span className='sr-only'>Home</span>
              </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href='/components'>Components</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>

      <div className='text-sm text-zinc-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>
            separator: ReactNode (custom separator, defaults to ChevronRight)
          </li>
          <li>href: string (for BreadcrumbLink)</li>
          <li>asChild: boolean (for BreadcrumbLink, optional)</li>
          <li>
            isIcon: boolean (for BreadcrumbLink, optional for icon-only links)
          </li>
          <li>
            hasBackground: boolean (for Breadcrumb, optional for glassmorphism
            styling)
          </li>
          <li>children: ReactNode (for all components)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/button-section.tsx">
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/atoms/button';

export function ButtonSection() {
  const [isLoading, setIsLoading] = useState(false);

  const toggleLoading = () => {
    setIsLoading(true);
    setTimeout(() => setIsLoading(false), 2000);
  };

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Button</h2>
      <p className='text-muted-foreground'>
        Buttons trigger actions or navigate users through the interface with a
        premium, polished design.
      </p>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Variants</h3>
        <div className='flex flex-wrap gap-4'>
          <Button variant='default'>Default</Button>
          <Button variant='destructive'>Destructive</Button>
          <Button variant='outline'>Outline</Button>
          <Button variant='secondary'>Secondary</Button>
          <Button variant='ghost'>Ghost</Button>
          <Button variant='link'>Link</Button>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Sizes</h3>
        <div className='flex flex-wrap gap-4'>
          <Button size='sm'>Small</Button>
          <Button size='default'>Default</Button>
          <Button size='lg'>Large</Button>
          <Button size='icon' aria-label='Icon Button'>
            <svg
              xmlns='http://www.w3.org/2000/svg'
              fill='none'
              viewBox='0 0 24 24'
              strokeWidth={1.5}
              stroke='currentColor'
              className='h-5 w-5'
            >
              <path
                strokeLinecap='round'
                strokeLinejoin='round'
                d='M12 4.5v15m7.5-7.5h-15'
              />
            </svg>
          </Button>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Loading States</h3>
        <div className='flex flex-wrap gap-4'>
          <Button loading={isLoading} onClick={toggleLoading}>
            Toggle Loading
          </Button>
          <Button
            loading={isLoading}
            loadingText='Submitting...'
            onClick={toggleLoading}
          >
            Toggle with Text
          </Button>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Disabled State</h3>
        <div className='flex flex-wrap gap-4'>
          <Button disabled>Disabled</Button>
          <Button variant='destructive' disabled>
            Destructive Disabled
          </Button>
          <Button variant='outline' disabled>
            Outline Disabled
          </Button>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Tooltip</h3>
        <div className='flex flex-wrap gap-4'>
          <Button tooltipText='Click to proceed'>With Tooltip</Button>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Animations</h3>
        <p className='text-muted-foreground'>
          Subtle hover, tap, and custom animations enhance interactivity.
        </p>
        <div className='flex flex-wrap gap-4'>
          <Button variant='glowingRing'>Glowing Ring</Button>
          <Button variant='shimmer'>Shimmer Effect</Button>
          <Button variant='perimeterShimmer'>Perimeter Shimmer</Button>
          <Button variant='hoverGlow'>Hover Glow</Button>
        </div>
      </div>

      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>
            variant: "default" | "destructive" | "outline" | "secondary" |
            "ghost" | "link" | "glowingRing" | "shimmer" | "perimeterShimmer" |
            "hoverGlow"
          </li>
          <li>size: "sm" | "default" | "lg" | "icon"</li>
          <li>loading: boolean (shows a spinner)</li>
          <li>loadingText: string (optional text while loading)</li>
          <li>tooltipText: string (optional tooltip text)</li>
          <li>asChild: boolean (renders as a child component)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/card-section.tsx">
import React from 'react';
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from '@/components/ui/atoms/card';

export function CardSection() {
  return (
    <section className='space-y-6 px-6'>
      <div>
        <h2 className='font-heading text-3xl font-bold tracking-tight text-white'>
          Card
        </h2>
        <p className='mt-2 text-muted-foreground'>
          Cards group related content and actions in a sleek, minimal container.
        </p>
      </div>

      {/* Default Variant */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-white'>Default Variant</h3>
        <Card className='max-w-md'>
          <CardHeader>
            <CardTitle>Premium Feature</CardTitle>
            <CardDescription>A sleek and modern card design.</CardDescription>
          </CardHeader>
          <CardContent>
            <p>Display key information with clarity and elegance.</p>
          </CardContent>
          <CardFooter>
            <button className='rounded-md bg-neutral-600 px-4 py-2 text-sm font-medium text-white shadow-[inset_2px_2px_5px_rgba(0,0,0,0.3),inset_-2px_-2px_5px_rgba(255,255,255,0.1)] transition-shadow hover:shadow-[inset_2px_2px_5px_rgba(0,0,0,0.4),inset_-2px_-2px_5px_rgba(255,255,255,0.05)]'>
              Learn More
            </button>
          </CardFooter>
        </Card>
      </div>

      {/* Glass Variant */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-white'>Glass Variant</h3>
        <div className='rounded-lg bg-neutral-900 p-4'>
          {' '}
          {/* Subtle background only for glass context */}
          <Card variant='glass' className='max-w-md'>
            <CardHeader>
              <CardTitle>Glass Effect</CardTitle>
              <CardDescription>
                Subtle blur for a premium touch.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p>Perfect for modern interfaces with a luxurious feel.</p>
            </CardContent>
            <CardFooter>
              <button className='rounded-md bg-neutral-600/20 px-4 py-2 text-sm font-medium text-white shadow-[inset_2px_2px_5px_rgba(0,0,0,0.3),inset_-2px_-2px_5px_rgba(255,255,255,0.05)] transition-shadow hover:shadow-[inset_2px_2px_5px_rgba(0,0,0,0.4),inset_-2px_-2px_5px_rgba(255,255,255,0.02)]'>
                Explore
              </button>
            </CardFooter>
          </Card>
        </div>
      </div>

      {/* Hover State */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-white'>Interactive Hover</h3>
        <p className='text-muted-foreground'>
          Subtle scaling enhances interactivity.
        </p>
        <div className='grid max-w-4xl grid-cols-1 gap-6 sm:grid-cols-2'>
          <Card className='w-full'>
            <CardHeader>
              <CardTitle>Hover Me</CardTitle>
              <CardDescription>
                Experience the smooth animation.
              </CardDescription>
            </CardHeader>
            <CardContent>Designed for a premium user experience.</CardContent>
          </Card>

          <Card variant='glass' className='w-full'>
            <CardHeader>
              <CardTitle>Glass Hover</CardTitle>
              <CardDescription>A refined interactive effect.</CardDescription>
            </CardHeader>
            <CardContent>Elevate your UI with this style.</CardContent>
          </Card>
        </div>
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>variant: "default" | "glass"</li>
          <li>children: ReactNode</li>
          <li>onClick?: () =&gt; void</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/checkbox-section.tsx">
import React from 'react';
import {
  Checkbox,
  GradientCheckbox,
  TransformerCheckbox,
  AnimatedCheckbox,
} from '@/components/ui/atoms/checkbox';

export function CheckboxSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Checkbox</h2>
      <p className='text-muted-foreground'>
        Checkboxes allow users to toggle options on or off.
      </p>

      {/* Default Checkbox */}
      <div>
        <h3 className='text-lg font-semibold'>Default Checkbox</h3>
        <div className='flex flex-wrap gap-4'>
          <Checkbox id='default-checkbox' />
          <Checkbox id='checked-checkbox' checked />
          <Checkbox id='disabled-checkbox' disabled />
        </div>
      </div>

      {/* Gradient Checkbox */}
      <div>
        <h3 className='text-lg font-semibold'>Gradient Checkbox</h3>
        <div className='flex flex-wrap gap-4'>
          <GradientCheckbox id='gradient-checkbox' />
          <GradientCheckbox id='gradient-checked-checkbox' checked />
          <GradientCheckbox id='gradient-disabled-checkbox' disabled />
        </div>
      </div>

      {/* Transformer Checkbox */}
      <div>
        <h3 className='text-lg font-semibold'>Transformer Checkbox</h3>
        <div className='flex flex-wrap gap-4'>
          <TransformerCheckbox id='transformer-checkbox' />
          <TransformerCheckbox id='transformer-checked-checkbox' checked />
          <TransformerCheckbox id='transformer-disabled-checkbox' disabled />
        </div>
      </div>

      {/* Animated Checkbox */}
      <div>
        <h3 className='text-lg font-semibold'>Animated Checkbox</h3>
        <div className='flex flex-wrap gap-4'>
          <AnimatedCheckbox id='animated-checkbox' />
          <AnimatedCheckbox id='animated-checked-checkbox' checked />
          <AnimatedCheckbox id='animated-disabled-checkbox' disabled />
        </div>
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>id: string (unique identifier for the checkbox)</li>
          <li>checked: boolean (whether the checkbox is checked)</li>
          <li>label: string (optional label for accessibility)</li>
          <li>disabled: boolean (whether the checkbox is disabled)</li>
          <li>onChange: function (callback for state changes)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/icon-section.tsx">
import React from 'react';
import { Icon } from '@/components/ui/atoms/icon';
import { Home, Settings, User, Search } from 'lucide-react';

export function IconSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Icon</h2>
      <p className='text-muted-foreground'>
        Icons are used to visually represent actions, objects, or statuses.
      </p>

      {/* Default Icons */}
      <div>
        <h3 className='text-lg font-semibold'>Default Icons</h3>
        <div className='flex flex-wrap gap-6'>
          <Icon name={Home} size='sm' />
          <Icon name={Settings} size='md' />
          <Icon name={User} size='lg' />
          <Icon name={Search} size={40} />
        </div>
      </div>

      {/* Custom Colors */}
      <div>
        <h3 className='text-lg font-semibold'>Custom Colors</h3>
        <div className='flex flex-wrap gap-6'>
          <Icon name={Home} size='md' color='#1677ff' />
          <Icon name={Settings} size='md' color='#ff4d4f' />
          <Icon name={User} size='md' color='#52c41a' />
          <Icon name={Search} size='md' color='#faad14' />
        </div>
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>name: LucideIcon (icon type from lucide-react)</li>
          <li>size: "sm" | "md" | "lg" | number (custom dimensions)</li>
          <li>color: string (CSS-compatible color value)</li>
          <li>className: string (optional additional classes)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/input-section.tsx">
'use client';

import React, { useState } from 'react';
import { Input } from '@/components/ui/atoms/input';

export function InputSection() {
  const [value, setValue] = useState('');

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Input</h2>
      <p className='text-muted-foreground'>
        Input components allow users to input single-line text.
      </p>

      {/* Basic Input */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>Basic Input</h3>
        <Input
          type='text'
          placeholder='Enter your text here'
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />
      </div>

      {/* States */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>States</h3>
        <div className='space-y-2'>
          <Input type='text' placeholder='Normal state' />
          <Input type='text' placeholder='Disabled state' disabled />
          <Input
            type='text'
            placeholder='Error state'
            className='border-destructive'
          />
        </div>
      </div>

      {/* Input with Animated Label */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>Input with Animated Label</h3>
        <Input label='Your Name' />
        <Input label='Email' type='email' error='Please enter a valid email' />
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>type: string (e.g., "text", "password")</li>
          <li>value: string</li>
          <li>placeholder: string</li>
          <li>disabled: boolean</li>
          <li>className: string</li>
          <li>
            onChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) = void
          </li>
          <li>label: string (optional, adds animated label)</li>
          <li>error: string (optional, shows error message)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/label-section.tsx">
// src/components/sections/LabelSection.tsx
import React from 'react';
import { Label } from '@/components/ui/atoms/label';

export function LabelSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Label</h2>
      <p className='text-muted-foreground'>
        Elegant labels with gradient text and subtle animations for form
        context.
      </p>

      <div className='space-y-6'>
        <div>
          <h3 className='mb-2 text-lg font-semibold'>Normal State</h3>
          <div className='rounded-xl border border-zinc-700/30 bg-gradient-to-br from-zinc-900/70 to-zinc-800/50 p-4 shadow-md backdrop-blur-sm'>
            <Label htmlFor='username' className='mb-2 block'>
              Username
            </Label>
            <input
              id='username'
              type='text'
              className='w-full rounded-lg border border-zinc-700/40 bg-zinc-900/50 px-3 py-2 text-foreground transition-all duration-200 placeholder:text-muted-foreground/60 focus:outline-none focus:ring-2 focus:ring-primary/50'
              placeholder='Enter username'
            />
          </div>
        </div>

        <div>
          <h3 className='mb-2 text-lg font-semibold'>Required State</h3>
          <div className='rounded-xl border border-zinc-700/30 bg-gradient-to-br from-zinc-900/70 to-zinc-800/50 p-4 shadow-md backdrop-blur-sm'>
            <Label htmlFor='email' required className='mb-2 block'>
              Email Address
            </Label>
            <input
              id='email'
              type='email'
              className='w-full rounded-lg border border-zinc-700/40 bg-zinc-900/50 px-3 py-2 text-foreground transition-all duration-200 placeholder:text-muted-foreground/60 focus:outline-none focus:ring-2 focus:ring-primary/50'
              placeholder='Enter email'
              required
            />
          </div>
        </div>
      </div>

      <div className='text-sm text-gray-500'>
        <p className='mb-1 font-semibold'>Props:</p>
        <ul className='list-inside list-disc'>
          <li>htmlFor: string (ID of the associated input element)</li>
          <li>children: ReactNode (content inside the label)</li>
          <li>required: boolean (indicates if the field is required)</li>
          <li>className: string (additional CSS classes)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/radio-group-section.tsx">
'use client';

import React from 'react';
import { RadioGroup, RadioGroupItem } from '@/components/ui/atoms/radio-group';

export function RadioGroupSection() {
  const [value, setValue] = React.useState('option1');

  return (
    <section className='space-y-6 border-t border-zinc-700/30 px-6 py-8'>
      <h2 className='font-heading text-3xl font-bold text-zinc-100'>
        Radio Group
      </h2>
      <p className='text-zinc-400'>
        Radio groups allow single selection from multiple options. Used for
        forms or filters.
      </p>

      {/* Demo 1: Basic Usage */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>Basic Selection</h3>
        <RadioGroup
          value={value}
          onValueChange={setValue}
          aria-label='Select an option'
        >
          <div className='flex items-center space-x-2'>
            <RadioGroupItem value='option1' id='option1' />
            <label htmlFor='option1' className='text-zinc-100'>
              Option 1
            </label>
          </div>
          <div className='flex items-center space-x-2'>
            <RadioGroupItem value='option2' id='option2' />
            <label htmlFor='option2' className='text-zinc-100'>
              Option 2
            </label>
          </div>
          <div className='flex items-center space-x-2'>
            <RadioGroupItem value='option3' id='option3' />
            <label htmlFor='option3' className='text-zinc-100'>
              Option 3
            </label>
          </div>
        </RadioGroup>
      </div>

      {/* Demo 2: Disabled State */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>Disabled State</h3>
        <RadioGroup value='disabled' disabled aria-label='Disabled options'>
          <div className='flex items-center space-x-2'>
            <RadioGroupItem value='disabled' id='disabled' />
            <label htmlFor='disabled' className='text-zinc-400'>
              Disabled Option
            </label>
          </div>
        </RadioGroup>
      </div>

      <div className='text-sm text-zinc-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>value: string (selected value)</li>
          <li>
            onValueChange: function(value: string): void (updates selection)
          </li>
          <li>disabled: boolean (disables group or item)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/rating-section.tsx">
'use client';

import React, { useState } from 'react';
import { StarRating } from '@/components/ui/atoms/star-rating';

export function RatingSection() {
  const [rating, setRating] = useState(0);

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Rating</h2>
      <p className='text-muted-foreground'>
        The Rating component allows users to provide feedback or rate items
        using an interactive star system.
      </p>

      {/* Interactive Demo */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Interactive Demo</h3>
        <div className='flex flex-col items-start space-y-4'>
          <StarRating
            value={rating}
            setValue={setRating}
            numStars={5}
            iconProps={{ className: 'text-yellow-500' }}
          />
          <p>Current Rating: {rating}</p>
        </div>
      </div>

      {/* Showcase (Disabled State) */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Disabled State</h3>
        <StarRating
          value={3}
          numStars={5}
          disabled
          iconProps={{ className: 'text-gray-400' }}
        />
        <p className='text-sm text-gray-500'>This is a read-only rating.</p>
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>
            **value**: number (current rating, controlled by parent component)
          </li>
          <li>
            **setValue**: Dispatch&lt;SetStateAction&lt;number&gt;&gt; (function
            to update the rating)
          </li>
          <li>**numStars**: number (total number of stars)</li>
          <li>**iconProps**: LucideProps (customize star icon appearance)</li>
          <li>**disabled**: boolean (disable interactivity)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/select-section.tsx">
'use client';

import React, { useState } from 'react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/atoms/select';

const CustomSelect = React.forwardRef<
  HTMLButtonElement,
  {
    options: { value: string; label: string }[];
    value: string;
    placeholder?: string;
    disabled?: boolean;
    onChange: (value: string) => void;
  }
>(({ options, value, placeholder, disabled, onChange }, ref) => (
  <Select value={value} onValueChange={onChange} disabled={disabled}>
    <SelectTrigger ref={ref}>
      <SelectValue placeholder={placeholder} />
    </SelectTrigger>
    <SelectContent>
      {options.map((option) => (
        <SelectItem key={option.value} value={option.value}>
          {option.label}
        </SelectItem>
      ))}
    </SelectContent>
  </Select>
));

CustomSelect.displayName = 'CustomSelect';

export function SelectSection() {
  const [value, setValue] = useState('');
  const options = [
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' },
    { value: 'option3', label: 'Option 3' },
  ];

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Select</h2>
      <p className='text-muted-foreground'>
        Select components allow users to choose from a list of options.
      </p>

      <div className='space-y-4'>
        <div>
          <h3 className='mb-2 text-lg font-semibold'>Normal State</h3>
          <CustomSelect
            options={options}
            value={value}
            onChange={setValue}
            placeholder='Choose an option'
          />
        </div>

        <div>
          <h3 className='mb-2 text-lg font-semibold'>Disabled State</h3>
          <CustomSelect
            options={options}
            value=''
            onChange={() => {}}
            placeholder='Disabled select'
            disabled
          />
        </div>
      </div>

      <div className='text-sm text-gray-500'>
        <p className='mb-1 font-semibold'>Props:</p>
        <ul className='list-inside list-disc'>
          <li>options: Array of option objects (value and label)</li>
          <li>value: string (currently selected value)</li>
          <li>placeholder: string (placeholder text)</li>
          <li>disabled: boolean (disables the select)</li>
          <li>onChange: function (callback for value changes)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/skeleton-section.tsx">
// components/design-system/atoms/skeleton-section.tsx
import React from 'react';
import { Skeleton } from '@/components/ui/atoms/skeleton';

export function SkeletonSection() {
  return (
    <section className='space-y-6 border-t border-zinc-700/30 px-6 py-8'>
      <h2 className='font-heading text-3xl font-bold text-zinc-100'>
        Skeleton
      </h2>
      <p className='text-zinc-400'>
        Skeletons indicate loading content with a shimmering effect. Used for
        placeholders.
      </p>

      {/* Demo 1: Various Sizes */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>Sizes</h3>
        <Skeleton className='h-4 w-[200px]' />
        <Skeleton className='h-8 w-[300px]' />
        <Skeleton className='h-12 w-[150px]' />
      </div>

      {/* Demo 2: Card-like Layout */}
      <div className='space-y-4'>
        <h3 className='text-lg font-semibold text-zinc-200'>
          Card Placeholder
        </h3>
        <div className='w-[300px] space-y-3'>
          <Skeleton className='h-40 w-full' /> {/* Image */}
          <Skeleton className='h-6 w-3/4' /> {/* Title */}
          <Skeleton className='h-4 w-full' /> {/* Description Line 1 */}
          <Skeleton className='h-4 w-5/6' /> {/* Description Line 2 */}
        </div>
      </div>

      <div className='text-sm text-zinc-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>className: string (custom sizing and styling)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/spinner-section.tsx">
import React from 'react';
import { Spinner } from '@/components/ui/atoms/spinner';

export function SpinnerSection() {
  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Spinner</h2>
      <p className='text-muted-foreground'>
        Spinners indicate loading states in the application.
      </p>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Variants</h3>
        <div className='flex flex-wrap gap-28'>
          <Spinner variant='default' size={32} />
          <Spinner variant='circle' size={32} />
          <Spinner variant='pinwheel' size={32} />
          <Spinner variant='circle-filled' size={32} />
          <Spinner variant='ellipsis' size={32} />
          <Spinner variant='ring' size={32} />
          <Spinner variant='bars' size={32} />
          <Spinner variant='infinite' size={32} />
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Sizes</h3>
        <div className='flex flex-wrap items-center gap-28'>
          <Spinner size={16} />
          <Spinner size={24} />
          <Spinner size={32} />
          <Spinner size={48} />
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Colors</h3>
        <div className='flex flex-wrap gap-28'>
          <Spinner size={32} color='currentColor' />
          <Spinner size={32} color='#1677ff' />
          <Spinner size={32} color='#52c41a' />
          <Spinner size={32} color='#faad14' />
          <Spinner size={32} color='#ff4d4f' />
        </div>
      </div>

      <div className='text-sm text-gray-500'>
        <p className='mb-1 font-semibold'>Props:</p>
        <ul className='list-inside list-disc'>
          <li>
            variant: "default" | "circle" | "pinwheel" | "circle-filled" |
            "ellipsis" | "ring" | "bars" | "infinite"
          </li>
          <li>size: number (size in pixels)</li>
          <li>color: string (CSS color value)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/tabs-section.tsx">
// components/design-system/atoms/tabs-section.tsx
import React from 'react';
import {
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
} from '@/components/ui/atoms/tabs';

export function TabsSection() {
  return (
    <section className='space-y-6 border-t border-zinc-700/30 px-6 py-8'>
      <h2 className='font-heading text-3xl font-bold text-zinc-100'>Tabs</h2>
      <p className='text-zinc-400'>
        Tabs switch between content with a premium, modern design. Used for
        navigation or grouping.
      </p>

      <Tabs defaultValue='tab1' className='w-[400px]'>
        <TabsList aria-label='Content Tabs'>
          <TabsTrigger value='tab1'>Tab 1</TabsTrigger>
          <TabsTrigger value='tab2'>Tab 2</TabsTrigger>
          <TabsTrigger value='tab3' disabled>
            Tab 3 (Disabled)
          </TabsTrigger>
        </TabsList>
        <TabsContent value='tab1'>
          Tab 1: Sleek and premium content area.
        </TabsContent>
        <TabsContent value='tab2'>
          Tab 2: Smooth, tactile switching.
        </TabsContent>
        <TabsContent value='tab3'>Tab 3: Disabled but consistent.</TabsContent>
      </Tabs>

      <div className='text-sm text-zinc-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>defaultValue: string (initial tab)</li>
          <li>value: string (controlled tab)</li>
          <li>disabled: boolean (disables trigger)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/textarea-section.tsx">
'use client';

import React, { useState } from 'react';
import { Textarea } from '@/components/ui/atoms/textarea';

export function TextareaSection() {
  const [value, setValue] = useState('');

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Textarea</h2>
      <p className='text-muted-foreground'>
        Textarea components allow users to input multi-line text.
      </p>

      {/* Basic Textarea */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>Basic Textarea</h3>
        <Textarea placeholder='Enter your message here' />
      </div>

      {/* States */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>States</h3>
        <div className='space-y-2'>
          <Textarea placeholder='Normal state' />
          <Textarea placeholder='Disabled state' disabled />
          <Textarea placeholder='Error state' hasError />
        </div>
      </div>

      {/* Animated Label */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>Animated Label</h3>
        <Textarea animatedLabel label='Your Message' placeholder=' ' />
      </div>

      {/* Auto-growing */}
      <div className='space-y-2'>
        <h3 className='text-lg font-semibold'>Auto-growing</h3>
        <Textarea
          autoGrow
          placeholder='Start typing to see me grow...'
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />
      </div>

      {/* Documentation */}
      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>value: string</li>
          <li>placeholder: string</li>
          <li>rows: number</li>
          <li>disabled: boolean</li>
          <li>hasError: boolean</li>
          <li>animatedLabel: boolean</li>
          <li>autoGrow: boolean</li>
          <li>label: string</li>
          <li>
            onChange: (event: React.ChangeEvent&lt;HTMLTextAreaElement&gt;)
            =&gt; void
          </li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/toast-section.tsx">
// src/components/sections/ToastSection.tsx
'use client';

import React from 'react';
import {
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastAction,
  ToastClose,
} from '@/components/ui/atoms/toast';

export function ToastSection() {
  const [defaultOpen, setDefaultOpen] = React.useState(false);
  const [destructiveOpen, setDestructiveOpen] = React.useState(false);
  const [successOpen, setSuccessOpen] = React.useState(false);
  const duration = 5000;

  const getProgress = (openTime: number) =>
    Math.max(0, 1 - (Date.now() - openTime) / duration);

  const [defaultTime, setDefaultTime] = React.useState(0);
  const [destructiveTime, setDestructiveTime] = React.useState(0);
  const [successTime, setSuccessTime] = React.useState(0);

  React.useEffect(() => {
    let interval: number;
    if (defaultOpen || destructiveOpen || successOpen) {
      interval = window.setInterval(() => {
        if (defaultOpen) setDefaultTime(Date.now());
        if (destructiveOpen) setDestructiveTime(Date.now());
        if (successOpen) setSuccessTime(Date.now());
      }, 100);
    }
    return () => clearInterval(interval);
  }, [defaultOpen, destructiveOpen, successOpen]);

  return (
    <section className='space-y-8 border-t border-zinc-700/30 px-6 py-10'>
      <h2 className='font-heading text-3xl font-bold text-zinc-100'>Toast</h2>
      <p className='text-zinc-400'>
        Sleek, glassmorphic notifications with clear variant differentiation.
      </p>

      <ToastProvider swipeDirection='left'>
        <div className='space-y-6'>
          <h3 className='text-lg font-semibold text-zinc-200'>Default</h3>
          <button
            className='rounded-md bg-zinc-800 px-4 py-2 text-zinc-100 hover:bg-zinc-700/80'
            onClick={() => {
              setDefaultOpen(true);
              setDefaultTime(Date.now());
              setTimeout(() => setDefaultOpen(false), duration);
            }}
          >
            Show Default
          </button>
          <Toast
            open={defaultOpen}
            onOpenChange={setDefaultOpen}
            progress={defaultOpen ? getProgress(defaultTime) : 1}
          >
            <ToastTitle>Notification</ToastTitle>
            <ToastDescription>
              Event has been scheduled successfully.
            </ToastDescription>
            <ToastClose />
          </Toast>
        </div>

        <div className='space-y-6'>
          <h3 className='text-base font-medium text-zinc-200'>Destructive</h3>
          <button
            className='rounded-md bg-zinc-800 px-4 py-2 text-zinc-100 hover:bg-zinc-700/80'
            onClick={() => {
              setDestructiveOpen(true);
              setDestructiveTime(Date.now());
              setTimeout(() => setDestructiveOpen(false), duration);
            }}
          >
            Show Destructive
          </button>
          <Toast
            variant='destructive'
            open={destructiveOpen}
            onOpenChange={setDestructiveOpen}
            progress={destructiveOpen ? getProgress(destructiveTime) : 1}
          >
            <ToastTitle>Error</ToastTitle>
            <ToastDescription>
              Something went wrong. Please try again.
            </ToastDescription>
            <ToastClose />
          </Toast>
        </div>

        <div className='space-y-6'>
          <h3 className='font-medium text-zinc-200'>Success</h3>
          <button
            className='rounded-md bg-zinc-800 px-4 py-2 text-zinc-100 hover:bg-zinc-700/80'
            onClick={() => {
              setSuccessOpen(true);
              setSuccessTime(Date.now());
              setTimeout(() => setSuccessOpen(false), duration);
            }}
          >
            Show Success
          </button>
          <Toast
            variant='success'
            open={successOpen}
            onOpenChange={setSuccessOpen}
            progress={successOpen ? getProgress(successTime) : 1}
          >
            <ToastTitle>Success</ToastTitle>
            <ToastDescription>
              Your request was completed successfully!
            </ToastDescription>
            <ToastAction altText='Undo'>Undo</ToastAction>
            <ToastClose />
          </Toast>
        </div>

        <ToastViewport />
      </ToastProvider>

      <div className='text-sm text-zinc-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>variant: 'default' | 'destructive' | 'success'</li>
          <li>open: boolean</li>
          <li>progress: number (0-1)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/atoms/toggle-section.tsx">
// src/components/sections/ToggleSection.tsx
'use client';

import React, { useState } from 'react';
import { Toggle } from '@/components/ui/atoms/toggle';
import { Sun } from 'lucide-react';
import { Moon } from '@phosphor-icons/react'; // Use Phosphor Moon icon
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';

export function ToggleSection() {
  const [isToggled, setIsToggled] = useState(false);
  const [theme, setTheme] = useState('light');

  const themeSizes = {
    sm: { container: 'size-8', icon: 14 },
    md: { container: 'size-9', icon: 16 },
    lg: { container: 'size-10', icon: 18 },
  };

  return (
    <section className='space-y-6 px-6'>
      <h2 className='font-heading text-3xl font-bold'>Toggle</h2>
      <p className='text-muted-foreground'>
        Sleek toggles with glassmorphic design and smooth animations for state
        switching.
      </p>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Basic Toggle</h3>
        <Toggle
          pressed={isToggled}
          onPressedChange={() => setIsToggled(!isToggled)}
          aria-label={`Toggle is ${isToggled ? 'on' : 'off'}`}
        >
          {isToggled ? 'On' : 'Off'}
        </Toggle>
        <p className='text-sm text-muted-foreground'>
          State: {isToggled ? 'On' : 'Off'}
        </p>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Variants</h3>
        <div className='flex flex-wrap gap-4'>
          <Toggle variant='default'>Default</Toggle>
          <Toggle variant='outline'>Outline</Toggle>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Sizes</h3>
        <div className='flex flex-wrap gap-4'>
          <Toggle size='sm'>Small</Toggle>
          <Toggle size='default'>Default</Toggle>
          <Toggle size='lg'>Large</Toggle>
        </div>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Disabled State</h3>
        <Toggle disabled aria-label='Disabled toggle'>
          Disabled
        </Toggle>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Theme Toggle Example</h3>
        <p className='text-muted-foreground'>
          A polished theme switcher with a classic dark mode moon icon from
          Phosphor.
        </p>
        <div className='flex flex-wrap gap-6'>
          <div className='flex flex-col items-center gap-2'>
            <Toggle
              variant='outline'
              className={cn('group relative', themeSizes.sm.container)}
              pressed={theme === 'dark'}
              onPressedChange={() =>
                setTheme(theme === 'dark' ? 'light' : 'dark')
              }
              aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
            >
              <motion.div
                className='absolute inset-0 rounded-md'
                initial={false}
                animate={{
                  boxShadow:
                    theme === 'dark'
                      ? '0 0 8px rgba(var(--primary), 0.3)'
                      : 'none',
                }}
                transition={{ duration: 0.3 }}
              />
              <Moon
                size={themeSizes.sm.icon}
                weight='fill' // Ensures the icon is filled for a solid look
                className='shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-0 group-data-[state=on]:opacity-100'
              />
              <Sun
                size={themeSizes.sm.icon}
                strokeWidth={2}
                className='absolute shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-100 group-data-[state=on]:opacity-0'
              />
            </Toggle>
            <span className='text-xs text-muted-foreground'>Small</span>
          </div>
          <div className='flex flex-col items-center gap-2'>
            <Toggle
              variant='outline'
              className={cn('group relative', themeSizes.md.container)}
              pressed={theme === 'dark'}
              onPressedChange={() =>
                setTheme(theme === 'dark' ? 'light' : 'dark')
              }
              aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
            >
              <motion.div
                className='absolute inset-0 rounded-md'
                initial={false}
                animate={{
                  boxShadow:
                    theme === 'dark'
                      ? '0 0 8px rgba(var(--primary), 0.3)'
                      : 'none',
                }}
                transition={{ duration: 0.3 }}
              />
              <Moon
                size={themeSizes.md.icon}
                weight='fill'
                className='shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-0 group-data-[state=on]:opacity-100'
              />
              <Sun
                size={themeSizes.md.icon}
                strokeWidth={2}
                className='absolute shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-100 group-data-[state=on]:opacity-0'
              />
            </Toggle>
            <span className='text-xs text-muted-foreground'>
              Medium (Default)
            </span>
          </div>
          <div className='flex flex-col items-center gap-2'>
            <Toggle
              variant='outline'
              className={cn('group relative', themeSizes.lg.container)}
              pressed={theme === 'dark'}
              onPressedChange={() =>
                setTheme(theme === 'dark' ? 'light' : 'dark')
              }
              aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
            >
              <motion.div
                className='absolute inset-0 rounded-md'
                initial={false}
                animate={{
                  boxShadow:
                    theme === 'dark'
                      ? '0 0 8px rgba(var(--primary), 0.3)'
                      : 'none',
                }}
                transition={{ duration: 0.3 }}
              />
              <Moon
                size={themeSizes.lg.icon}
                weight='fill'
                className='shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-0 group-data-[state=on]:opacity-100'
              />
              <Sun
                size={themeSizes.lg.icon}
                strokeWidth={2}
                className='absolute shrink-0 transition-all duration-300 ease-in-out group-data-[state=off]:opacity-100 group-data-[state=on]:opacity-0'
              />
            </Toggle>
            <span className='text-xs text-muted-foreground'>Large</span>
          </div>
        </div>
        <p className='text-sm text-muted-foreground'>Current Theme: {theme}</p>
      </div>

      <div className='space-y-4'>
        <h3 className='text-lg font-semibold'>Custom Toggle Example</h3>
        <p className='text-muted-foreground'>
          A custom toggle using the base Toggle component.
        </p>
        <Toggle
          variant='default'
          className='group size-9'
          pressed={isToggled}
          onPressedChange={() => setIsToggled(!isToggled)}
          aria-label={`Custom toggle is ${isToggled ? 'on' : 'off'}`}
        >
          {isToggled ? 'On' : 'Off'}
        </Toggle>
      </div>

      <div className='text-sm text-gray-500'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>pressed: boolean</li>
          <li>onPressedChange: (pressed: boolean) =&gt; void</li>
          <li>variant: "default" | "outline"</li>
          <li>size: "sm" | "default" | "lg"</li>
          <li>disabled: boolean</li>
          <li>className: string</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/accordion-section.tsx">
import React from 'react';
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from '@/components/ui/molecules/accordion';

export function AccordionSection() {
  return (
    <section className='space-y-6 px-6 py-12'>
      <h2 className='font-heading text-3xl font-bold text-foreground'>
        Accordion
      </h2>
      <p className='text-muted-foreground'>
        A collapsible component for displaying content in a compact, elegant
        manner.
      </p>

      <Accordion type='single' collapsible className='w-full max-w-md'>
        <AccordionItem value='item-1'>
          <AccordionTrigger>What is the membership platform?</AccordionTrigger>
          <AccordionContent>
            It’s a premium community platform built with Next.js, Appwrite, and
            Stripe, offering a sleek user experience.
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value='item-2'>
          <AccordionTrigger>Can I customize it?</AccordionTrigger>
          <AccordionContent>
            Yes, it’s highly customizable with Tailwind CSS and a modular design
            system.
          </AccordionContent>
        </AccordionItem>
      </Accordion>

      <div className='text-sm text-muted-foreground'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>type: "single" | "multiple" (Accordion)</li>
          <li>collapsible: boolean (Accordion)</li>
          <li>value: string (AccordionItem)</li>
          <li>className: string (all components)</li>
          <li>children: ReactNode (Trigger & Content)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/auth-button-section.tsx">
'use client';

import * as React from 'react';
import { AuthButtons } from '@/components/ui/molecules/AuthButtons';
import { motion } from 'motion/react';

export function AuthButtonsSection() {
  const [isLoggedIn, setIsLoggedIn] = React.useState(false);

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>AuthButtons</h2>
      <p className='text-muted-foreground'>
        Premium buttons with gradients and glassmorphic effects for
        authentication actions.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <AuthButtons
            mobile={false}
            onAction={() => setIsLoggedIn(!isLoggedIn)}
          />
        </motion.div>
        <button
          onClick={() => setIsLoggedIn(!isLoggedIn)}
          className='rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
        >
          Toggle Login State
        </button>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>mobile</code>: Toggle mobile layout (default: false)
          </li>
          <li>
            <code>onAction</code>: Callback for actions (e.g., logout)
          </li>
        </ul>
        <p>
          <strong>States:</strong> Logged Out (login/register), Logged In
          (user/logout)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/auth-fields-section.tsx">
'use client';

import * as React from 'react';
import { AuthFields } from '@/components/ui/molecules/AuthFields';
import { motion } from 'motion/react';

export function AuthFieldsSection() {
  const [type, setType] = React.useState<'login' | 'register'>('login');

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>AuthFields</h2>
      <p className='text-muted-foreground'>
        Sleek, skeuomorphic input fields with glassmorphic styling for login and
        registration.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <AuthFields type={type} isLoading={false} />
        </motion.div>
        <button
          onClick={() => setType(type === 'login' ? 'register' : 'login')}
          className='rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
        >
          Switch to {type === 'login' ? 'Register' : 'Login'}
        </button>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>type</code>: "login" or "register"
          </li>
          <li>
            <code>isLoading</code>: Disable inputs when loading
          </li>
        </ul>
        <p>
          <strong>States:</strong> Login (email/password), Register
          (name/email/password)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/auth-form-section.tsx">
'use client';

import * as React from 'react';
import { AuthForm } from '@/components/ui/molecules/AuthForm';
import { motion } from 'motion/react';

export function AuthFormSection() {
  const [formState, setFormState] = React.useState<
    'normal' | 'success' | 'error'
  >('normal');

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setFormState('success');
  };

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>AuthForm</h2>
      <p className='text-muted-foreground'>
        A versatile, glassmorphic form with skeuomorphic inputs for
        authentication flows.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <AuthForm
            type='forgot-password'
            title='Reset Password'
            description='Enter your email to reset your password.'
            fields={[
              {
                id: 'email',
                name: 'email',
                label: 'Email',
                type: 'email',
                placeholder: 'you@example.com',
                required: true,
              },
            ]}
            onSubmit={handleSubmit}
            buttonText='Send Reset Link'
            successMessage={
              formState === 'success'
                ? 'Check your email for a reset link.'
                : undefined
            }
            errorMessage={
              formState === 'error' ? 'Something went wrong.' : undefined
            }
            isLoading={false}
            linkText='Back to login'
            linkHref='/login'
          />
        </motion.div>
        <div className='flex gap-2'>
          <button
            onClick={() => setFormState('error')}
            className='rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
          >
            Show Error
          </button>
          <button
            onClick={() => setFormState('normal')}
            className='rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
          >
            Reset
          </button>
        </div>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>type</code>: Form type (e.g., "forgot-password")
          </li>
          <li>
            <code>title</code>: Form title
          </li>
          <li>
            <code>description</code>: Form description
          </li>
          <li>
            <code>fields</code>: Array of input fields
          </li>
          <li>
            <code>onSubmit</code>: Form submission handler
          </li>
          <li>
            <code>buttonText</code>: Button text
          </li>
          <li>
            <code>successMessage</code>: Success message
          </li>
          <li>
            <code>errorMessage</code>: Error message
          </li>
          <li>
            <code>isLoading</code>: Loading state
          </li>
          <li>
            <code>linkText</code>: Link text
          </li>
          <li>
            <code>linkHref</code>: Link destination
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (inputs), Success (message), Error
          (alert), Loading (disabled)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/auth-header-section.tsx">
'use client';

import * as React from 'react';
import { AuthHeader } from '@/components/ui/molecules/AuthHeader';
import { motion } from 'motion/react';

export function AuthHeaderSection() {
  const [error, setError] = React.useState<string | undefined>(undefined);

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>AuthHeader</h2>
      <p className='text-muted-foreground'>
        A premium header with gradient text and subtle skeuomorphic depth for
        authentication screens.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <AuthHeader
            title='Welcome Back'
            subtitle='Login to your account.'
            linkText='Need an account?'
            linkHref='/register'
            error={error}
          />
        </motion.div>
        <button
          onClick={() => setError(error ? undefined : 'Invalid credentials')}
          className='mt-4 rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
        >
          {error ? 'Clear Error' : 'Show Error'}
        </button>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>title</code>: Header text
          </li>
          <li>
            <code>subtitle</code>: Descriptive text
          </li>
          <li>
            <code>linkText</code>: Link text
          </li>
          <li>
            <code>linkHref</code>: Link destination
          </li>
          <li>
            <code>error</code>: Optional error message
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (gradient text), Error (inset error
          box)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/cards-section.tsx">
'use client';

import React from 'react';
import { H2, P } from '@/components/ui/typography';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';
import { Button } from '@/components/ui/atoms/button';
import { Badge } from '@/components/ui/atoms/badge';

export function CardsSection() {
  return (
    <section id='cards' className='space-y-6 border-t py-8'>
      <H2>Cards</H2>
      <P className='text-muted-foreground'>
        Card components and variations used throughout the application.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='grid gap-6 md:grid-cols-2'>
            <div className='space-y-6'>
              <Card>
                <CardHeader>
                  <CardTitle>Basic Card</CardTitle>
                  <CardDescription>
                    A simple card with header, content, and footer.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    This is the main content area of the card. It can contain
                    text, images, or any other content.
                  </p>
                </CardContent>
                <CardFooter className='flex justify-between'>
                  <Button variant='ghost'>Cancel</Button>
                  <Button>Submit</Button>
                </CardFooter>
              </Card>

              <Card className='overflow-hidden'>
                <div className='flex h-40 items-center justify-center bg-muted'>
                  <svg
                    xmlns='http://www.w3.org/2000/svg'
                    width='24'
                    height='24'
                    viewBox='0 0 24 24'
                    fill='none'
                    stroke='currentColor'
                    strokeWidth='2'
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    className='h-10 w-10 text-muted-foreground'
                  >
                    <rect
                      width='18'
                      height='18'
                      x='3'
                      y='3'
                      rx='2'
                      ry='2'
                    ></rect>
                    <circle cx='9' cy='9' r='2'></circle>
                    <path d='m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21'></path>
                  </svg>
                </div>
                <CardHeader>
                  <CardTitle>Card with Image</CardTitle>
                  <CardDescription>
                    A card with an image at the top.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    Cards with images are commonly used for blog posts,
                    products, or any content that benefits from visual
                    representation.
                  </p>
                </CardContent>
                <CardFooter>
                  <Button variant='outline' className='w-full'>
                    View Details
                  </Button>
                </CardFooter>
              </Card>
            </div>

            <div className='space-y-6'>
              <Card className='border-primary'>
                <CardHeader className='pb-2'>
                  <div className='flex items-center justify-between'>
                    <CardTitle>Featured Card</CardTitle>
                    <Badge>Featured</Badge>
                  </div>
                  <CardDescription>
                    A card with a featured badge and border.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    Featured cards can be used to highlight important content or
                    premium features.
                  </p>
                </CardContent>
                <CardFooter>
                  <Button className='w-full'>Get Started</Button>
                </CardFooter>
              </Card>

              <Card className='bg-muted'>
                <CardHeader>
                  <CardTitle>Muted Card</CardTitle>
                  <CardDescription>
                    A card with a muted background.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    Muted cards can be used for secondary content or to create
                    visual hierarchy.
                  </p>
                </CardContent>
                <CardFooter>
                  <Button variant='outline' className='w-full'>
                    Learn More
                  </Button>
                </CardFooter>
              </Card>

              <Card className='feature-card p-6'>
                <div className='mb-4'>
                  <svg
                    xmlns='http://www.w3.org/2000/svg'
                    width='24'
                    height='24'
                    viewBox='0 0 24 24'
                    fill='none'
                    stroke='currentColor'
                    strokeWidth='2'
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    className='h-10 w-10'
                  >
                    <path d='M12 2v8'></path>
                    <path d='m4.93 10.93 1.41 1.41'></path>
                    <path d='M2 18h2'></path>
                    <path d='M20 18h2'></path>
                    <path d='m19.07 10.93-1.41 1.41'></path>
                    <path d='M22 22H2'></path>
                    <path d='m8 22 4-10 4 10'></path>
                  </svg>
                </div>
                <h3 className='mb-2 text-xl font-semibold'>Feature Card</h3>
                <p className='mb-4 text-muted-foreground'>
                  This is a feature card with a custom background and icon.
                </p>
                <Button variant='outline' className='w-full'>
                  Explore
                </Button>
              </Card>
            </div>

            <Card className='card-3d md:col-span-2'>
              <CardHeader>
                <CardTitle>3D Hover Effect Card</CardTitle>
                <CardDescription>
                  A card with a 3D hover effect.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p>
                  This card has a subtle 3D effect when hovered. It's great for
                  interactive elements that you want to stand out.
                </p>
              </CardContent>
              <CardFooter>
                <Button variant='outline' className='w-full'>
                  Hover Me
                </Button>
              </CardFooter>
            </Card>

            <div className='md:col-span-2'>
              <Card className='glass-effect'>
                <CardHeader>
                  <CardTitle>Glass Effect Card</CardTitle>
                  <CardDescription>
                    A card with a glass-like effect.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    The glass effect creates a modern, translucent look that
                    works well on gradient or image backgrounds.
                  </p>
                </CardContent>
                <CardFooter>
                  <Button variant='outline' className='w-full'>
                    Explore
                  </Button>
                </CardFooter>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <CardHeader>
              <CardTitle>How to Use Cards</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div>
                  <h4 className='mb-2 text-lg font-semibold'>Basic Import</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Basic Card Structure
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Main content goes here</p>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Card Variations
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`// Featured Card
<Card className="border-primary">
  <CardHeader>
    <div className="flex items-center justify-between">
      <CardTitle>Featured Card</CardTitle>
      <Badge>Featured</Badge>
    </div>
    <CardDescription>Description</CardDescription>
  </CardHeader>
  <CardContent>...</CardContent>
</Card>

// Muted Card
<Card className="bg-muted">
  <CardHeader>...</CardHeader>
  <CardContent>...</CardContent>
</Card>

// Feature Card with Custom Style
<Card className="feature-card p-6">
  <div className="mb-4">
    <IconComponent />
  </div>
  <h3 className="text-xl font-semibold mb-2">Feature Title</h3>
  <p className="text-muted-foreground mb-4">Description</p>
  <Button>Action</Button>
</Card>

// 3D Effect Card
<Card className="card-3d">
  <CardHeader>...</CardHeader>
  <CardContent>...</CardContent>
</Card>

// Glass Effect Card
<Card className="glass-effect">
  <CardHeader>...</CardHeader>
  <CardContent>...</CardContent>
</Card>`}</code>
                  </pre>
                </div>

                <div className='rounded-md border bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-950'>
                  <h4 className='mb-2 text-lg font-semibold'>Important Note</h4>
                  <p>
                    Cards are one of the most versatile components in the design
                    system. They can be customized with different backgrounds,
                    borders, and effects to create visual hierarchy and draw
                    attention to important content. Always use the appropriate
                    card variation based on the content's importance and the
                    desired user interaction.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/category-nav-section.tsx">
'use client';
import * as React from 'react';
import { CategoryNav } from '@/components/ui/molecules/CategoryNav';

export function CategoryNavSection() {
  const [selectedCategory, setSelectedCategory] = React.useState<string | null>(
    null
  );

  const demoCategories = [
    { id: '1', name: 'Habits', slug: 'habits' },
    { id: '2', name: 'Mindset', slug: 'mindset' },
    { id: '3', name: 'Productivity', slug: 'productivity' },
    { id: '4', name: 'Growth', slug: 'growth' },
  ];

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>CategoryNav</h2>
      <p className='text-muted-foreground'>
        A navigation component for selecting categories with a premium
        glassmorphic design and Motion highlight. Used for filtering content
        like Knowledge or Resources.
      </p>
      <div className='rounded-lg border border-zinc-700/20 bg-background p-4'>
        <CategoryNav
          categories={demoCategories}
          selectedCategory={selectedCategory}
          onSelectAction={setSelectedCategory}
        />
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>categories</code>: Array of category objects (id, name, slug)
          </li>
          <li>
            <code>selectedCategory</code>: Currently selected category slug (or
            null)
          </li>
          <li>
            <code>onSelect</code>: Function to handle category selection
          </li>
        </ul>
        <p>
          <strong>States:</strong> Selected (highlighted with gradient),
          Unselected (neutral glass effect)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/comments-section.tsx">
'use client';
import * as React from 'react';
import { CommentItem } from '@/components/ui/molecules/CommentItem';
import { CommentForm } from '@/components/ui/molecules/CommentForm';

export function CommentsSection() {
  const [comments, setComments] = React.useState([
    {
      username: 'Alex',
      text: 'This is a great resource! Really helped me stay focused.',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
      avatar: 'https://i.pravatar.cc/150?u=alex',
    },
    {
      username: 'Sam',
      text: 'Love the simplicity of this platform.',
      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago
      avatar: 'https://i.pravatar.cc/150?u=sam',
    },
  ]);

  const handleSubmit = (text: string) => {
    setComments((prev) => [
      ...prev,
      {
        username: 'You',
        text,
        timestamp: new Date(),
        avatar: 'https://i.pravatar.cc/150?u=you',
      },
    ]);
  };

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>Comments</h2>
      <p className='text-muted-foreground'>
        A sleek system for displaying and submitting comments with a premium
        glassmorphic design. Used in the Community section.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        {/* Comment List */}
        <div className='space-y-3'>
          {comments.map((comment, index) => (
            <CommentItem
              key={index}
              username={comment.username}
              text={comment.text}
              timestamp={comment.timestamp}
              avatar={comment.avatar}
            />
          ))}
        </div>
        {/* Comment Form */}
        <CommentForm onSubmitAction={handleSubmit} />
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>CommentItem Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>username</code>: Comment author’s name
          </li>
          <li>
            <code>text</code>: Comment content
          </li>
          <li>
            <code>timestamp</code>: Date or string of when posted
          </li>
          <li>
            <code>avatar</code>: Optional avatar URL
          </li>
        </ul>
        <p>
          <strong>CommentForm Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>onSubmit</code>: Function to handle comment submission
          </li>
        </ul>
        <p>
          <strong>States:</strong> CommentItem (normal), CommentForm (normal,
          submitting)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/dialogs-section.tsx">
'use client';

import React from 'react';
import { H2, P } from '@/components/ui/typography';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';
import { Button } from '@/components/ui/atoms/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from '@/components/ui/drawer';
import { Input } from '@/components/ui/atoms/input';
import { Label } from '@/components/ui/atoms/label';

export function DialogsSection() {
  return (
    <section id='dialogs' className='space-y-6 border-t py-8'>
      <H2>Dialogs & Modals</H2>
      <P className='text-muted-foreground'>
        Dialog, modal, and overlay components used throughout the application.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='grid gap-6 md:grid-cols-2'>
            <Card>
              <CardHeader>
                <CardTitle>Dialog</CardTitle>
              </CardHeader>
              <CardContent className='flex justify-center'>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant='outline'>Open Dialog</Button>
                  </DialogTrigger>
                  <DialogContent className='sm:max-w-[425px]'>
                    <DialogHeader>
                      <DialogTitle>Edit Profile</DialogTitle>
                      <DialogDescription>
                        Make changes to your profile here. Click save when
                        you're done.
                      </DialogDescription>
                    </DialogHeader>
                    <div className='grid gap-4 py-4'>
                      <div className='grid grid-cols-4 items-center gap-4'>
                        <Label htmlFor='name' className='text-right'>
                          Name
                        </Label>
                        <Input
                          id='name'
                          value='John Doe'
                          className='col-span-3'
                        />
                      </div>
                      <div className='grid grid-cols-4 items-center gap-4'>
                        <Label htmlFor='username' className='text-right'>
                          Username
                        </Label>
                        <Input
                          id='username'
                          value='@johndoe'
                          className='col-span-3'
                        />
                      </div>
                    </div>
                    <DialogFooter>
                      <Button type='submit'>Save changes</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Alert Dialog</CardTitle>
              </CardHeader>
              <CardContent className='flex justify-center'>
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant='outline'>Delete Account</Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>
                        Are you absolutely sure?
                      </AlertDialogTitle>
                      <AlertDialogDescription>
                        This action cannot be undone. This will permanently
                        delete your account and remove your data from our
                        servers.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>Cancel</AlertDialogCancel>
                      <AlertDialogAction>Continue</AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Sheet (Slide-in Panel)</CardTitle>
              </CardHeader>
              <CardContent className='flex justify-center'>
                <Sheet>
                  <SheetTrigger asChild>
                    <Button variant='outline'>Open Sheet</Button>
                  </SheetTrigger>
                  <SheetContent>
                    <SheetHeader>
                      <SheetTitle>Edit Profile</SheetTitle>
                      <SheetDescription>
                        Make changes to your profile here. Click save when
                        you're done.
                      </SheetDescription>
                    </SheetHeader>
                    <div className='grid gap-4 py-4'>
                      <div className='grid grid-cols-4 items-center gap-4'>
                        <Label htmlFor='sheet-name' className='text-right'>
                          Name
                        </Label>
                        <Input
                          id='sheet-name'
                          value='John Doe'
                          className='col-span-3'
                        />
                      </div>
                      <div className='grid grid-cols-4 items-center gap-4'>
                        <Label htmlFor='sheet-username' className='text-right'>
                          Username
                        </Label>
                        <Input
                          id='sheet-username'
                          value='@johndoe'
                          className='col-span-3'
                        />
                      </div>
                    </div>
                    <SheetFooter>
                      <Button type='submit'>Save changes</Button>
                    </SheetFooter>
                  </SheetContent>
                </Sheet>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Drawer (Bottom Sheet)</CardTitle>
              </CardHeader>
              <CardContent className='flex justify-center'>
                <Drawer>
                  <DrawerTrigger asChild>
                    <Button variant='outline'>Open Drawer</Button>
                  </DrawerTrigger>
                  <DrawerContent>
                    <div className='mx-auto w-full max-w-sm'>
                      <DrawerHeader>
                        <DrawerTitle>Edit Profile</DrawerTitle>
                        <DrawerDescription>
                          Make changes to your profile here. Click save when
                          you're done.
                        </DrawerDescription>
                      </DrawerHeader>
                      <div className='p-4 pb-0'>
                        <div className='grid gap-4'>
                          <div className='grid gap-2'>
                            <Label htmlFor='drawer-name'>Name</Label>
                            <Input id='drawer-name' value='John Doe' />
                          </div>
                          <div className='grid gap-2'>
                            <Label htmlFor='drawer-username'>Username</Label>
                            <Input id='drawer-username' value='@johndoe' />
                          </div>
                        </div>
                      </div>
                      <DrawerFooter>
                        <Button>Save changes</Button>
                        <DrawerTrigger asChild>
                          <Button variant='outline'>Cancel</Button>
                        </DrawerTrigger>
                      </DrawerFooter>
                    </div>
                  </DrawerContent>
                </Drawer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <CardHeader>
              <CardTitle>How to Use Dialogs & Modals</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div>
                  <h4 className='mb-2 text-lg font-semibold'>Dialog Import</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Basic Dialog Usage
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<Dialog>
  <DialogTrigger asChild>
    <Button variant="outline">Open Dialog</Button>
  </DialogTrigger>
  <DialogContent className="sm:max-w-[425px]">
    <DialogHeader>
      <DialogTitle>Dialog Title</DialogTitle>
      <DialogDescription>
        Dialog description goes here.
      </DialogDescription>
    </DialogHeader>
    <div className="py-4">
      {/* Dialog content */}
    </div>
    <DialogFooter>
      <Button type="submit">Save changes</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Alert Dialog Import
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Alert Dialog Usage
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<AlertDialog>
  <AlertDialogTrigger asChild>
    <Button variant="outline">Delete Item</Button>
  </AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Sheet Import (Side Panel)
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Drawer Import (Bottom Panel)
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { Drawer, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger } from '@/components/ui/drawer';`}</code>
                  </pre>
                </div>

                <div className='rounded-md border bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-950'>
                  <h4 className='mb-2 text-lg font-semibold'>Important Note</h4>
                  <p>
                    Choose the appropriate dialog type based on the context:
                  </p>
                  <ul className='mt-2 list-inside list-disc space-y-1'>
                    <li>
                      <strong>Dialog:</strong> For general modal interactions
                    </li>
                    <li>
                      <strong>AlertDialog:</strong> For confirmations and
                      destructive actions
                    </li>
                    <li>
                      <strong>Sheet:</strong> For side panels with more complex
                      forms or content
                    </li>
                    <li>
                      <strong>Drawer:</strong> For mobile-friendly bottom sheets
                    </li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/dropdown-section.tsx">
'use client';
import React from 'react';
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from '@/components/ui/molecules/dropdown';

export function DropdownMenuSection() {
  const [selected, setSelected] = React.useState('Profile');

  return (
    <section className='space-y-6 px-6 py-12'>
      <h2 className='font-heading text-3xl font-bold text-foreground'>
        Dropdown Menu
      </h2>
      <p className='text-muted-foreground'>
        A sleek, premium dropdown menu with sharp design and subtle gradients.
      </p>

      <div>
        <DropdownMenu>
          <DropdownMenuTrigger>{selected}</DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem onSelect={() => setSelected('Profile')}>
              Profile
              <span className='mt-1 text-xs text-muted-foreground'>
                View your profile details.
              </span>
            </DropdownMenuItem>
            <DropdownMenuItem onSelect={() => setSelected('Billing')}>
              Billing
              <span className='mt-1 text-xs text-muted-foreground'>
                Manage your payment methods.
              </span>
            </DropdownMenuItem>
            <DropdownMenuItem onSelect={() => setSelected('Settings')}>
              Settings
              <span className='mt-1 text-xs text-muted-foreground'>
                Customize your preferences.
              </span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <div className='text-sm text-muted-foreground'>
        <p>Props:</p>
        <ul className='list-inside list-disc'>
          <li>className: string (all components)</li>
          <li>sideOffset: number (Content)</li>
          <li>align: "start" | "end" | "center" (Content)</li>
          <li>description: string (Item, optional)</li>
          <li>children: ReactNode (Trigger & Content)</li>
        </ul>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/filter-bar-section.tsx">
'use client';
import * as React from 'react';
import {
  FilterBar,
  type FilterOption,
} from '@/components/ui/molecules/FilterBar';

export function FilterBarSection() {
  const [activeFilters, setActiveFilters] = React.useState<string[]>([]);
  const [sortBy, setSortBy] = React.useState<string | null>(null);

  const demoFilters: FilterOption[] = [
    { label: 'Books', value: 'books' },
    { label: 'Apps', value: 'apps' },
    { label: '4+ Stars', value: '4-stars' },
    { label: 'Free', value: 'free' },
  ];

  const handleFilterChange = (updates: {
    activeFilters?: string[];
    sortBy?: string | null;
  }) => {
    if (updates.activeFilters !== undefined)
      setActiveFilters(updates.activeFilters);
    if (updates.sortBy !== undefined) setSortBy(updates.sortBy);
  };

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>FilterBar</h2>
      <p className='text-muted-foreground'>
        A premium filter component with glassmorphic dropdown and Motion toggles
        for filtering and sorting content.
      </p>
      <div className='rounded-lg border border-zinc-700/20 bg-background p-4'>
        <FilterBar
          filters={demoFilters}
          activeFilters={activeFilters}
          sortBy={sortBy}
          onFilterChangeAction={handleFilterChange}
        />
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>filters</code>: Array of filter options (label, value)
          </li>
          <li>
            <code>activeFilters</code>: Array of active filter values
          </li>
          <li>
            <code>sortBy</code>: Current sort option (or null)
          </li>
          <li>
            <code>onFilterChange</code>: Callback for filter/sort updates
          </li>
        </ul>
        <p>
          <strong>States:</strong> Active filters shown with toggles and Motion
          scaling
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/form-field-section.tsx">
'use client';
import * as React from 'react';
import { FormField } from '@/components/ui/molecules/FormField';
import { Input } from '@/components/ui/atoms/input'; // Your atom (assuming renamed from Input)
import { Checkbox } from '@/components/ui/atoms/checkbox'; // Your atom

export function FormFieldSection() {
  const textInputRef = React.useRef<HTMLInputElement>(null);
  const checkboxRef = React.useRef<HTMLInputElement>(null);

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>FormField</h2>
      <p className='text-muted-foreground'>
        A premium form field component with glassmorphic styling, supporting
        normal and error states, used for input grouping.
      </p>
      <div className='space-y-6 rounded-lg border border-zinc-700/20 bg-background p-4'>
        {/* Normal State with TextInput */}
        <FormField label='Username' htmlFor='username-demo' ref={textInputRef}>
          <Input placeholder='Enter your username' />
        </FormField>
        {/* Error State with TextInput */}
        <FormField
          label='Email'
          htmlFor='email-demo'
          error='Invalid email address'
          ref={textInputRef}
        >
          <Input placeholder='Enter your email' />
        </FormField>
        {/* Normal State with Checkbox */}
        <FormField
          label='Agree to terms'
          htmlFor='terms-demo'
          ref={checkboxRef}
        >
          <Checkbox />
        </FormField>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>label</code>: Field label text
          </li>
          <li>
            <code>htmlFor</code>: ID linking label to input
          </li>
          <li>
            <code>children</code>: Input component (e.g., TextInput, Checkbox)
          </li>
          <li>
            <code>error</code>: Optional error message
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (clean), Error (red highlights)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/input-group-section.tsx">
'use client';
import * as React from 'react';
import { InputGroup } from '@/components/ui/molecules/InputGroup';
import { Input } from '@/components/ui/atoms/input'; // Your Input atom
import { Search, User } from 'lucide-react'; // Assuming lucide-react is in use

export function InputGroupSection() {
  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>InputGroup</h2>
      <p className='text-muted-foreground'>
        A sleek input group combining an input with an icon, styled with
        glassmorphism for a premium look.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        {/* Icon on Left */}
        <InputGroup icon={<Search className='h-4 w-4' />}>
          <Input placeholder='Search...' />
        </InputGroup>
        {/* Icon on Right */}
        <InputGroup icon={<User className='h-4 w-4' />} position='right'>
          <Input placeholder='Username' />
        </InputGroup>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>children</code>: Input component (e.g., TextInput)
          </li>
          <li>
            <code>icon</code>: Icon element (e.g., Lucide icon)
          </li>
          <li>
            <code>position</code>: Icon placement ("left" or "right")
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (glassmorphic with hover/focus
          effects)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/search-bar-section.tsx">
'use client';
import * as React from 'react';
import { SearchBar } from '@/components/ui/molecules/SearchBar';
import { motion } from 'motion/react';
import { useDebounce } from '@/lib/hooks/shared/useDebounce';
import { cn } from '@/lib/utils';

export function SearchBarSection() {
  const [searchValue, setSearchValue] = React.useState('');
  const debouncedValue = useDebounce(searchValue, 300);
  const searchBarRef = React.useRef<HTMLInputElement>(null);

  const items = [
    'Productivity Tips',
    'Mindfulness Guide',
    'Habit Tracker',
    'Goal Setting',
    'Time Management',
  ];

  const filteredItems = items.filter((item) =>
    item.toLowerCase().includes(debouncedValue.toLowerCase())
  );

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>SearchBar</h2>
      <p className='text-muted-foreground'>
        A sleek, premium search bar with glassmorphic styling and subtle focus
        animations.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <SearchBar
          value={searchValue}
          onChange={setSearchValue}
          placeholder='Search items...'
          ref={searchBarRef}
        />
        <ul className='space-y-2'>
          {filteredItems.length > 0 ? (
            filteredItems.map((item, index) => (
              <motion.li
                key={index}
                className={cn(
                  'rounded-lg border border-zinc-700/30 bg-zinc-900/40 p-3 backdrop-blur-md',
                  'text-sm font-medium text-zinc-100 shadow-sm',
                  'bg-gradient-to-r from-zinc-900/50 to-zinc-800/50',
                  'transition-all duration-200 hover:bg-zinc-800/60'
                )}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.05 }}
                whileHover={{
                  scale: 1.02,
                  boxShadow: '0 0 8px rgba(59,130,246,0.1)',
                }}
              >
                {item}
              </motion.li>
            ))
          ) : (
            <li
              className={cn(
                'rounded-lg border border-zinc-700/30 bg-zinc-900/40 p-3 backdrop-blur-md',
                'text-sm font-medium text-muted-foreground shadow-sm'
              )}
            >
              No results found
            </li>
          )}
        </ul>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>value</code>: Current search value
          </li>
          <li>
            <code>onChange</code>: Handler for value changes
          </li>
          <li>
            <code>placeholder</code>: Optional placeholder text
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (neutral), Focused (glow effect)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/molecules/social-auth-section.tsx">
'use client';

import * as React from 'react';
import { SocialAuth } from '@/components/ui/molecules/SocialAuth';
import { motion } from 'motion/react';

export function SocialAuthSection() {
  const [isLoading, setIsLoading] = React.useState(false);

  return (
    <section className='space-y-4'>
      <h2 className='text-2xl font-semibold text-foreground'>SocialAuth</h2>
      <p className='text-muted-foreground'>
        Premium social login buttons with glassmorphic styling and subtle
        gradients.
      </p>
      <div className='space-y-4 rounded-lg border border-zinc-700/20 bg-background p-4'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <SocialAuth isLoading={isLoading} />
        </motion.div>
        <button
          onClick={() => setIsLoading(!isLoading)}
          className='rounded-md bg-muted px-4 py-2 text-foreground transition-all hover:bg-muted-foreground/20'
        >
          {isLoading ? 'Enable Buttons' : 'Disable Buttons'}
        </button>
      </div>
      <div className='text-sm text-muted-foreground'>
        <p>
          <strong>Props:</strong>
        </p>
        <ul className='list-disc pl-5'>
          <li>
            <code>isLoading</code>: Disable buttons when loading
          </li>
        </ul>
        <p>
          <strong>States:</strong> Normal (enabled), Disabled (loading)
        </p>
      </div>
    </section>
  );
}
</file>

<file path="src/components/design-system/organisms/grid-section.tsx">
'use client';

import { useState } from 'react';
import { H2, P } from '@/components/ui/typography';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';
import { Card } from '@/components/ui/atoms/card';
import { motion } from 'motion/react';
import Image from 'next/image';

// Sample data for the grid display
const categories = [
  {
    title: 'React',
    description:
      'Modern JavaScript library for building user interfaces. Master component-based architecture and efficient state management.',
    imageUrl: '/images/placeholder.png',
    category: 'Frontend',
  },
  {
    title: 'Next.js',
    description:
      'The React framework for production. Create high-performance server-side rendered and statically generated applications.',
    imageUrl: '/images/placeholder.png',
    category: 'Framework',
  },
  {
    title: 'TypeScript',
    description:
      'Strongly typed superset of JavaScript. Enhance your development workflow with powerful static type checking and tooling.',
    imageUrl: '/images/placeholder.png',
    category: 'Language',
  },
  {
    title: 'Tailwind CSS',
    description:
      'Utility-first CSS framework for rapid UI development. Build modern, responsive layouts without leaving your HTML.',
    imageUrl: '/images/placeholder.png',
    category: 'Styling',
  },
  {
    title: 'GraphQL',
    description:
      'Query language for your API. Optimize data fetching with precise queries and unlock new levels of flexibility in your applications.',
    imageUrl: '/images/placeholder.png',
    category: 'API',
  },
  {
    title: 'Docker',
    description:
      'Platform for containerized applications. Streamline development, deployment, and scaling with consistent environments across your stack.',
    imageUrl: '/images/placeholder.png',
    category: 'DevOps',
  },
];

// Modern Knowledge Card Component
function ModernKnowledgeCard({
  title,
  description,
  imageUrl,
  category,
}: {
  title: string;
  description: string;
  imageUrl: string;
  category?: string;
}) {
  const [isHovered, setIsHovered] = useState(false);
  const [isClicked, setIsClicked] = useState(false);

  const handleClick = () => {
    setIsClicked(true);
    // Reset the clicked state after the animation completes
    setTimeout(() => setIsClicked(false), 300);
  };

  return (
    <motion.div
      className='group relative overflow-hidden rounded-xl border border-gray-700 transition-all duration-300 ease-in-out'
      style={{
        height: '320px',
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={handleClick}
      whileHover={{ scale: 1.03 }}
      whileTap={{ scale: 0.98 }}
      animate={{
        scale: isClicked ? [1, 0.97, 1] : isHovered ? [1, 1.05, 1] : 1,
      }}
      transition={{
        type: 'spring',
        stiffness: 300,
        damping: 20,
        scale: {
          duration: 0.3,
        },
      }}
    >
      <div className='absolute inset-0 h-full w-full'>
        <Image
          src={imageUrl || '/images/placeholder.png'}
          alt={title}
          fill
          className='object-cover transition-transform duration-700 ease-in-out group-hover:scale-110'
          priority
        />
        {/* Gradient overlay on the image */}
        <div className='absolute inset-0 z-10 bg-gradient-to-b from-transparent via-black/50 to-black/90' />
      </div>

      <div className='relative z-20 flex h-full w-full flex-col p-6'>
        {category && (
          <div className='mb-2 text-xs font-semibold uppercase tracking-wider text-blue-800'>
            {category}
          </div>
        )}

        <div className='mt-auto'>
          <motion.h3
            className='mb-2 font-heading text-2xl font-semibold tracking-tight text-white'
            initial={{ y: 0 }}
            animate={{ y: isHovered ? -10 : 0 }}
            transition={{ duration: 0.3 }}
          >
            {title}
          </motion.h3>
          <motion.p
            className='text-sm leading-relaxed text-gray-300'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: isHovered ? 1 : 0, y: isHovered ? 0 : 20 }}
            transition={{ duration: 0.3 }}
          >
            {description}
          </motion.p>
        </div>
      </div>

      <motion.div
        className='absolute inset-0 bg-gradient-to-br from-blue-500/20 via-blue-500/10 to-transparent opacity-0'
        initial={{ opacity: 0 }}
        animate={{ opacity: isHovered ? 1 : 0 }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
}

export function KnowledgeGridSection() {
  return (
    <section id='grid' className='space-y-6 border-t py-8'>
      <H2>Grid Layout</H2>
      <P className='text-muted-foreground'>
        Modern grid layouts for displaying collections of content with
        consistent spacing and responsive behavior.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='mb-6'>
            <h3 className='mb-4 text-xl font-semibold'>Knowledge Hub Grid</h3>
            <p className='mb-6 text-muted-foreground'>
              A responsive grid layout with modern, sleek, and premium card
              designs featuring hover effects and animations.
            </p>

            <div>
              <div className='mx-auto'>
                <h1 className='mb-4 font-heading text-3xl font-bold tracking-tight'>
                  Knowledge Hub
                </h1>
                <p className='mb-8 max-w-3xl text-lg text-muted-foreground'>
                  Explore cutting-edge technologies and elevate your development
                  skills with our curated resources.
                </p>
                <div className='grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3'>
                  {categories.map((category, index) => (
                    <ModernKnowledgeCard
                      key={index}
                      title={category.title}
                      description={category.description}
                      imageUrl={category.imageUrl}
                      category={category.category}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <div className='space-y-4 p-6'>
              <h3 className='text-xl font-semibold'>Grid Implementation</h3>
              <p className='text-muted-foreground'>
                Use Tailwind CSS grid classes to create responsive grid layouts
                with modern card components.
              </p>

              <div>
                <h4 className='mb-2 text-lg font-semibold'>
                  Basic Grid Structure
                </h4>
                <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                  <code>{`<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
  {items.map((item, index) => (
    <ModernKnowledgeCard
      key={index}
      title={item.title}
      description={item.description}
      imageUrl={item.imageUrl}
      category={item.category}
    />
  ))}
</div>`}</code>
                </pre>
              </div>

              <div>
                <h4 className='mb-2 text-lg font-semibold'>
                  Modern Knowledge Card Component
                </h4>
                <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                  <code>{`
// Import the motion library from motion/react (NOT framer-motion)
import { motion } from 'motion/react';
import Image from 'next/image';
import { useState } from 'react';

function ModernKnowledgeCard({ title, description, imageUrl, category }) {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="relative overflow-hidden rounded-xl border border-gray-700 group"
      style={{ height: "320px" }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      whileHover={{ scale: 1.03 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
    >
      <div className="absolute inset-0 h-full w-full">
        <Image
          src={imageUrl || "/images/placeholder.png"}
          alt={title}
          fill
          className="object-cover transition-transform duration-700 ease-in-out group-hover:scale-110"
          priority
        />
        {/* Gradient overlay on the image */}
        <div className="absolute inset-0 z-10 bg-gradient-to-b from-transparent via-black/50 to-black/90" />
      </div>

      <div className="relative z-20 flex h-full w-full flex-col p-6">
        {category && (
          <div className="mb-2 text-xs font-semibold uppercase tracking-wider text-emerald-400">
            {category}
          </div>
        )}

        <div className="mt-auto">
          <motion.h3 
            className="gradient-text mb-2 font-heading text-2xl font-semibold tracking-tight text-white"
            initial={{ y: 0 }}
            animate={{ y: isHovered ? -10 : 0 }}
            transition={{ duration: 0.3 }}
          >
            {title}
          </motion.h3>
          <motion.p
            className="text-sm leading-relaxed text-gray-300"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: isHovered ? 1 : 0, y: isHovered ? 0 : 20 }}
            transition={{ duration: 0.3 }}
          >
            {description}
          </motion.p>
        </div>
      </div>

      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-emerald-500/20 via-blue-500/10 to-transparent opacity-0"
        initial={{ opacity: 0 }}
        animate={{ opacity: isHovered ? 1 : 0 }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
}`}</code>
                </pre>
              </div>

              <div>
                <h4 className='mb-2 text-lg font-semibold'>
                  Responsive Behavior
                </h4>
                <ul className='list-disc space-y-2 pl-6'>
                  <li>
                    <code className='rounded bg-muted px-1 py-0.5'>
                      grid-cols-1
                    </code>
                    : Single column on mobile
                  </li>
                  <li>
                    <code className='rounded bg-muted px-1 py-0.5'>
                      md:grid-cols-2
                    </code>
                    : Two columns on medium screens
                  </li>
                  <li>
                    <code className='rounded bg-muted px-1 py-0.5'>
                      lg:grid-cols-3
                    </code>
                    : Three columns on large screens
                  </li>
                  <li>
                    <code className='rounded bg-muted px-1 py-0.5'>gap-8</code>:
                    Consistent spacing between grid items
                  </li>
                </ul>
              </div>
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/design-system/styles/colors-section.tsx">
'use client';

import React from 'react';
import { H2, P } from '@/components/ui/typography';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';
import { cn } from '@/lib/utils';

interface ColorSwatchProps {
  name: string;
  variable: string;
  className?: string;
  textClass?: string;
}

function ColorSwatch({
  name,
  variable,
  className,
  textClass,
}: ColorSwatchProps) {
  return (
    <div className='space-y-1.5'>
      <div className={cn('h-16 w-full rounded-md', className)} />
      <div className='space-y-0.5'>
        <div className={cn('text-sm font-medium', textClass)}>{name}</div>
        <div className='text-xs text-muted-foreground'>{variable}</div>
      </div>
    </div>
  );
}

export function ColorsSection() {
  return (
    <section id='colors' className='space-y-6 border-t py-8'>
      <H2>Colors</H2>
      <P className='text-muted-foreground'>
        The color palette used throughout the application.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='grid gap-6'>
            <Card>
              <CardHeader>
                <CardTitle>Primary Colors</CardTitle>
              </CardHeader>
              <CardContent className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'>
                <ColorSwatch
                  name='Background'
                  variable='--background'
                  className='border bg-background'
                />
                <ColorSwatch
                  name='Foreground'
                  variable='--foreground'
                  className='bg-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Primary'
                  variable='--primary'
                  className='bg-primary'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Primary Foreground'
                  variable='--primary-foreground'
                  className='border bg-primary-foreground'
                />
                <ColorSwatch
                  name='Secondary'
                  variable='--secondary'
                  className='bg-secondary'
                />
                <ColorSwatch
                  name='Secondary Foreground'
                  variable='--secondary-foreground'
                  className='bg-secondary-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Muted'
                  variable='--muted'
                  className='bg-muted'
                />
                <ColorSwatch
                  name='Muted Foreground'
                  variable='--muted-foreground'
                  className='bg-muted-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Accent'
                  variable='--accent'
                  className='bg-accent'
                />
                <ColorSwatch
                  name='Accent Foreground'
                  variable='--accent-foreground'
                  className='bg-accent-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Destructive'
                  variable='--destructive'
                  className='bg-destructive'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Destructive Foreground'
                  variable='--destructive-foreground'
                  className='border bg-destructive-foreground'
                />
                <ColorSwatch
                  name='Border'
                  variable='--border'
                  className='bg-border'
                />
                <ColorSwatch
                  name='Input'
                  variable='--input'
                  className='bg-input'
                />
                <ColorSwatch
                  name='Ring'
                  variable='--ring'
                  className='bg-ring'
                  textClass='text-white'
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Sidebar Colors</CardTitle>
              </CardHeader>
              <CardContent className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'>
                <ColorSwatch
                  name='Sidebar Background'
                  variable='--sidebar-background'
                  className='bg-sidebar'
                />
                <ColorSwatch
                  name='Sidebar Foreground'
                  variable='--sidebar-foreground'
                  className='bg-sidebar-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Sidebar Primary'
                  variable='--sidebar-primary'
                  className='bg-sidebar-primary'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Sidebar Primary Foreground'
                  variable='--sidebar-primary-foreground'
                  className='border bg-sidebar-primary-foreground'
                />
                <ColorSwatch
                  name='Sidebar Accent'
                  variable='--sidebar-accent'
                  className='bg-sidebar-accent'
                />
                <ColorSwatch
                  name='Sidebar Accent Foreground'
                  variable='--sidebar-accent-foreground'
                  className='bg-sidebar-accent-foreground'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Sidebar Border'
                  variable='--sidebar-border'
                  className='bg-sidebar-border'
                />
                <ColorSwatch
                  name='Sidebar Ring'
                  variable='--sidebar-ring'
                  className='bg-sidebar-ring'
                  textClass='text-white'
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Chart Colors</CardTitle>
              </CardHeader>
              <CardContent className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5'>
                <ColorSwatch
                  name='Chart 1'
                  variable='--chart-1'
                  className='bg-chart-1'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Chart 2'
                  variable='--chart-2'
                  className='bg-chart-2'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Chart 3'
                  variable='--chart-3'
                  className='bg-chart-3'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Chart 4'
                  variable='--chart-4'
                  className='bg-chart-4'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Chart 5'
                  variable='--chart-5'
                  className='bg-chart-5'
                  textClass='text-white'
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Button Colors</CardTitle>
              </CardHeader>
              <CardContent className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3'>
                <ColorSwatch
                  name='Button Background'
                  variable='--button-bg'
                  className='bg-[var(--button-bg)]'
                />
                <ColorSwatch
                  name='Button Hover'
                  variable='--button-hover'
                  className='bg-[var(--button-hover)]'
                />
                <ColorSwatch
                  name='Button Text'
                  variable='--button-text'
                  className='bg-[var(--button-text)]'
                  textClass='text-white'
                />
                <ColorSwatch
                  name='Button Border'
                  variable='--button-border'
                  className='bg-[var(--button-border)]'
                />
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <CardHeader>
              <CardTitle>How to Use Colors</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Tailwind Classes
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<div className="bg-primary text-primary-foreground">
  Primary background with appropriate text color
</div>

<div className="bg-secondary text-secondary-foreground">
  Secondary background with appropriate text color
</div>

<div className="bg-muted text-muted-foreground">
  Muted background with appropriate text color
</div>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>CSS Variables</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`.custom-element {
  background-color: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: 1px solid hsl(var(--border));
}`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Direct Variable Usage
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<div className="bg-[var(--button-bg)] text-[var(--button-text)]">
  Using CSS variables directly in Tailwind
</div>`}</code>
                  </pre>
                </div>

                <div className='rounded-md border bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-950'>
                  <h4 className='mb-2 text-lg font-semibold'>Important Note</h4>
                  <p>
                    Always use the semantic color variables (like primary,
                    secondary, etc.) rather than hardcoded color values to
                    ensure consistency and support for both light and dark
                    modes.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/design-system/styles/typography-section.tsx">
'use client';

import React from 'react';
import {
  H1,
  H2,
  H3,
  H4,
  P,
  Lead,
  Large,
  Small,
  Subtle,
  Overline,
  GradientText,
} from '@/components/ui/typography';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';

export function TypographySection() {
  return (
    <section id='typography' className='space-y-6 border-t py-8'>
      <H2>Typography</H2>
      <P className='text-muted-foreground'>
        Typography components and styles used throughout the application.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='grid gap-6'>
            <Card>
              <CardHeader>
                <CardTitle>Headings</CardTitle>
              </CardHeader>
              <CardContent className='space-y-6'>
                <div className='space-y-2'>
                  <H1>Heading 1 (font-heading)</H1>
                  <code className='text-sm text-muted-foreground'>
                    font-heading text-4xl font-bold tracking-tight
                  </code>
                </div>

                <div className='space-y-2'>
                  <H2>Heading 2 (font-heading)</H2>
                  <code className='text-sm text-muted-foreground'>
                    font-heading text-3xl font-semibold tracking-tight
                  </code>
                </div>

                <div className='space-y-2'>
                  <H3>Heading 3 (font-heading)</H3>
                  <code className='text-sm text-muted-foreground'>
                    font-heading text-2xl font-semibold tracking-tight
                  </code>
                </div>

                <div className='space-y-2'>
                  <H4>Heading 4 (font-heading)</H4>
                  <code className='text-sm text-muted-foreground'>
                    font-heading text-xl font-semibold tracking-tight
                  </code>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Paragraphs</CardTitle>
              </CardHeader>
              <CardContent className='space-y-6'>
                <div className='space-y-2'>
                  <Lead>Lead Paragraph</Lead>
                  <code className='text-sm text-muted-foreground'>
                    text-xl text-muted-foreground
                  </code>
                </div>

                <div className='space-y-2'>
                  <P>Default Paragraph</P>
                  <code className='text-sm text-muted-foreground'>
                    text-base leading-7
                  </code>
                </div>

                <div className='space-y-2'>
                  <Large>Large Text</Large>
                  <code className='text-sm text-muted-foreground'>
                    text-lg font-semibold
                  </code>
                </div>

                <div className='space-y-2'>
                  <Small>Small Text</Small>
                  <code className='text-sm text-muted-foreground'>
                    text-sm font-medium leading-none
                  </code>
                </div>

                <div className='space-y-2'>
                  <Subtle>Subtle Text</Subtle>
                  <code className='text-sm text-muted-foreground'>
                    text-sm text-muted-foreground
                  </code>
                </div>

                <div className='space-y-2'>
                  <Overline>Overline Text</Overline>
                  <code className='text-sm text-muted-foreground'>
                    text-sm uppercase tracking-widest font-medium
                  </code>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Special Text</CardTitle>
              </CardHeader>
              <CardContent className='space-y-6'>
                <div className='space-y-2'>
                  <GradientText className='text-2xl'>
                    Gradient Text
                  </GradientText>
                  <code className='text-sm text-muted-foreground'>
                    gradient-text
                  </code>
                </div>

                <div className='space-y-2'>
                  <p className='p-regular'>P Regular</p>
                  <code className='text-sm text-muted-foreground'>
                    p-regular
                  </code>
                </div>

                <div className='space-y-2'>
                  <p className='p-small'>P Small</p>
                  <code className='text-sm text-muted-foreground'>p-small</code>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <CardHeader>
              <CardTitle>How to Use Typography Components</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div>
                  <h4 className='mb-2 text-lg font-semibold'>Import</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { H1, H2, H3, H4, P, Lead, Large, Small, Subtle, Overline, GradientText } from '@/components/ui/typography';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>Basic Usage</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<H1>Main Heading</H1>
<H2>Section Heading</H2>
<P>Regular paragraph text</P>
<Lead>Lead paragraph that introduces a section</Lead>
<GradientText>Special gradient text effect</GradientText>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    With Custom Classes
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<H1 className="text-primary mb-8">Custom Heading</H1>
<P className="text-muted-foreground">Custom paragraph</P>`}</code>
                  </pre>
                </div>

                <div className='rounded-md border bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-950'>
                  <h4 className='mb-2 text-lg font-semibold'>Important Note</h4>
                  <p>
                    Always use the typography components for consistent styling
                    across the application. For headings, ensure you're using
                    the <code>font-heading</code> class as it applies the Cinzel
                    font.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/design-system/inputs-section.tsx">
'use client';

import React from 'react';
import { H2, P } from '@/components/ui/typography';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/atoms/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/atoms/tabs';
import { Input } from '@/components/ui/atoms/input';
import { Label } from '@/components/ui/atoms/label';
import { Textarea } from '@/components/ui/atoms/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/atoms/radio-group';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/atoms/select';
import { Switch } from '@/components/ui/switch';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';

const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
  email: z.string().email({
    message: 'Please enter a valid email address.',
  }),
  bio: z.string().max(160).optional(),
  notifications: z.boolean().default(false),
  theme: z.enum(['light', 'dark', 'system'], {
    required_error: 'Please select a theme.',
  }),
});

export function InputsSection() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: '',
      bio: '',
      notifications: false,
      theme: 'system',
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    // This is just for demonstration
    console.log(values);
  }

  return (
    <section id='inputs' className='space-y-6 border-t py-8'>
      <H2>Inputs & Forms</H2>
      <P className='text-muted-foreground'>
        Form controls and input components used throughout the application.
      </P>

      <Tabs defaultValue='preview'>
        <TabsList className='mb-4'>
          <TabsTrigger value='preview'>Preview</TabsTrigger>
          <TabsTrigger value='usage'>Usage</TabsTrigger>
        </TabsList>

        <TabsContent value='preview'>
          <div className='grid gap-6'>
            <Card>
              <CardHeader>
                <CardTitle>Basic Inputs</CardTitle>
              </CardHeader>
              <CardContent className='grid gap-6'>
                <div className='grid w-full max-w-sm items-center gap-1.5'>
                  <Label htmlFor='email'>Email</Label>
                  <Input type='email' id='email' placeholder='Email' />
                </div>

                <div className='grid w-full max-w-sm items-center gap-1.5'>
                  <Label htmlFor='password'>Password</Label>
                  <Input type='password' id='password' placeholder='Password' />
                </div>

                <div className='grid w-full max-w-sm items-center gap-1.5'>
                  <Label htmlFor='disabled'>Disabled Input</Label>
                  <Input disabled id='disabled' placeholder='Disabled' />
                </div>

                <div className='grid w-full max-w-sm items-center gap-1.5'>
                  <Label htmlFor='with-icon'>With Icon</Label>
                  <div className='relative'>
                    <svg
                      xmlns='http://www.w3.org/2000/svg'
                      width='24'
                      height='24'
                      viewBox='0 0 24 24'
                      fill='none'
                      stroke='currentColor'
                      strokeWidth='2'
                      strokeLinecap='round'
                      strokeLinejoin='round'
                      className='absolute left-2 top-2.5 h-4 w-4 text-muted-foreground'
                    >
                      <circle cx='11' cy='11' r='8' />
                      <path d='m21 21-4.3-4.3' />
                    </svg>
                    <Input
                      id='with-icon'
                      className='pl-8'
                      placeholder='Search...'
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Textarea</CardTitle>
              </CardHeader>
              <CardContent>
                <div className='grid w-full gap-1.5'>
                  <Label htmlFor='message'>Message</Label>
                  <Textarea
                    id='message'
                    placeholder='Type your message here.'
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Select</CardTitle>
              </CardHeader>
              <CardContent>
                <div className='grid w-full max-w-sm items-center gap-1.5'>
                  <Label htmlFor='theme'>Theme</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder='Select a theme' />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value='light'>Light</SelectItem>
                      <SelectItem value='dark'>Dark</SelectItem>
                      <SelectItem value='system'>System</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Checkbox & Radio</CardTitle>
              </CardHeader>
              <CardContent className='grid gap-6'>
                <div className='flex items-center space-x-2'>
                  <Checkbox id='terms' />
                  <Label htmlFor='terms'>Accept terms and conditions</Label>
                </div>

                <div className='space-y-3'>
                  <Label>Notification preferences</Label>
                  <RadioGroup defaultValue='all'>
                    <div className='flex items-center space-x-2'>
                      <RadioGroupItem value='all' id='all' />
                      <Label htmlFor='all'>All notifications</Label>
                    </div>
                    <div className='flex items-center space-x-2'>
                      <RadioGroupItem value='important' id='important' />
                      <Label htmlFor='important'>Important only</Label>
                    </div>
                    <div className='flex items-center space-x-2'>
                      <RadioGroupItem value='none' id='none' />
                      <Label htmlFor='none'>No notifications</Label>
                    </div>
                  </RadioGroup>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Switch</CardTitle>
              </CardHeader>
              <CardContent>
                <div className='flex items-center space-x-2'>
                  <Switch id='airplane-mode' />
                  <Label htmlFor='airplane-mode'>Airplane Mode</Label>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Complete Form Example</CardTitle>
              </CardHeader>
              <CardContent>
                <Form {...form}>
                  <form
                    onSubmit={form.handleSubmit(onSubmit)}
                    className='space-y-6'
                  >
                    <FormField
                      control={form.control}
                      name='username'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Username</FormLabel>
                          <FormControl>
                            <Input placeholder='johndoe' {...field} />
                          </FormControl>
                          <FormDescription>
                            This is your public display name.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='email'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input
                              placeholder='john.doe@example.com'
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='bio'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Bio</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder='Tell us about yourself'
                              className='resize-none'
                              {...field}
                            />
                          </FormControl>
                          <FormDescription>
                            You can{' '}
                            <span className='font-medium'>@mention</span> other
                            users and organizations.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='notifications'
                      render={({ field }) => (
                        <FormItem className='flex flex-row items-center justify-between rounded-lg border p-4'>
                          <div className='space-y-0.5'>
                            <FormLabel className='text-base'>
                              Notifications
                            </FormLabel>
                            <FormDescription>
                              Receive notifications about account activity.
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='theme'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Theme</FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder='Select a theme' />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value='light'>Light</SelectItem>
                              <SelectItem value='dark'>Dark</SelectItem>
                              <SelectItem value='system'>System</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormDescription>
                            Select your preferred theme.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <button
                      type='submit'
                      className='button-base button-default'
                    >
                      Submit
                    </button>
                  </form>
                </Form>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value='usage'>
          <Card>
            <CardHeader>
              <CardTitle>How to Use Form Components</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div>
                  <h4 className='mb-2 text-lg font-semibold'>Basic Imports</h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    Basic Input with Label
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`<div className="grid w-full max-w-sm items-center gap-1.5">
  <Label htmlFor="email">Email</Label>
  <Input type="email" id="email" placeholder="Email" />
</div>`}</code>
                  </pre>
                </div>

                <div>
                  <h4 className='mb-2 text-lg font-semibold'>
                    React Hook Form Integration
                  </h4>
                  <pre className='overflow-x-auto rounded-md bg-muted p-4'>
                    <code>{`import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

// Define your schema
const formSchema = z.object({
  username: z.string().min(2),
  email: z.string().email(),
});

// In your component:
const form = useForm<z.infer<typeof formSchema>>({
  resolver: zodResolver(formSchema),
  defaultValues: {
    username: "",
    email: "",
  },
});

function onSubmit(values: z.infer<typeof formSchema>) {
  console.log(values);
}

// In your JSX:
<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
    <FormField
      control={form.control}
      name="username"
      render={({ field }) => (
        <FormItem>
          <FormLabel>Username</FormLabel>
          <FormControl>
            <Input {...field} />
          </FormControl>
          <FormDescription>Your display name</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
    
    {/* More fields... */}
    
    <button type="submit">Submit</button>
  </form>
</Form>`}</code>
                  </pre>
                </div>

                <div className='rounded-md border bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-950'>
                  <h4 className='mb-2 text-lg font-semibold'>Important Note</h4>
                  <p>
                    Always use the Form components with React Hook Form and Zod
                    for validation to ensure consistent form handling throughout
                    the application. This provides type safety, validation, and
                    a consistent user experience.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}
</file>

<file path="src/components/marketing/about/About.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

interface AboutSectionProps {
  title: string;
  children: React.ReactNode;
  className?: string;
}

export function AboutSection({
  title,
  children,
  className,
}: AboutSectionProps) {
  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      className={className}
    >
      <Container className='mx-auto max-w-3xl space-y-4'>
        <h2 className='text-3xl font-bold'>{title}</h2>
        {children}
      </Container>
    </motion.section>
  );
}
</file>

<file path="src/components/marketing/about/AboutHero.tsx">
'use client';

import { motion, useScroll, useTransform } from 'motion/react';
import { useRef } from 'react';
import { Spotlight } from '@/components/ui/spotlight';
import { Container } from '@/components/ui/container';

export function AboutHero() {
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.8]);

  return (
    <section
      ref={containerRef}
      className='relative flex h-[95vh] items-center justify-center overflow-hidden bg-background'
    >
      <Spotlight
        translateY={-350}
        width={560}
        height={1380}
        duration={7}
        xOffset={100}
      />

      <div className='pointer-events-none absolute inset-0 bg-gradient-to-b from-background via-background to-transparent' />

      <Container className='relative z-10'>
        <motion.div
          style={{ opacity, scale }}
          className='mx-auto max-w-3xl text-center'
        >
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className='gradient-text font-heading text-3xl font-bold tracking-tight md:text-5xl lg:text-6xl'
          >
            Building a Space Away From the Bullshit{' '}
          </motion.h1>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className='mt-6 text-lg text-zinc-400'
          >
            WYOS started with a simple observation: the internet has lost its
            way. Everything's become about quick profits, manipulative tactics,
            and advice that just sounds good. We're changing that by creating
            something real - a space to actually find what works, connect with
            others, and level up their life.
          </motion.p>
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/about/OurStory.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

export function OurStory() {
  return (
    <section className='relative -mt-32'>
      <div className='absolute inset-0 h-[50vh]'>
        {' '}
        {/* Limit gradient height */}
        {/* Primary gradient background */}
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0),transparent_50%)]' />
        {/* Subtle pattern overlay */}
        <div
          className='absolute h-full w-full bg-[linear-gradient(to_right,#000103_1px,transparent_1px),linear-gradient(to_bottom,#000103_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]'
          style={{ opacity: 0.02 }}
        />
        {/* Additional gradient for depth - limit the height */}
        <div className='absolute inset-0 h-full bg-gradient-to-b from-transparent via-background/50 to-background' />
      </div>

      <Container className='relative pt-32'>
        {' '}
        {/* Add relative to ensure content stays above gradients */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-3xl'
        >
          <h2 className='font-heading text-3xl font-bold md:text-4xl'>
            Our Story
          </h2>

          <div className='mt-8 space-y-6 text-lg text-zinc-400'>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              WYOS started in 2019 during my darkest moments. While building my
              first business and dealing with personal struggles, I spent
              countless hours searching for genuine help. What I found instead
              was an endless maze of paywalls, affiliate links, and generic
              advice that led nowhere.
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              The more I searched, the clearer it became - finding real help
              shouldn't be this hard. We shouldn't have to wade through
              mountains of fluff just to find one piece of valuable information.
              That's when I decided to build something different.
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              In 2025, WYOS launched as a platform that brings together the
              absolute best information, resources, and community - all in one
              place, without the hype or manipulation. We're creating something
              real here, and we're building it with our members, not for them.
            </motion.p>
          </div>
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/about/WhatWeBelieve.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

interface PrincipleProps {
  title: string;
  description: string;
}

function Principle({ title, description }: PrincipleProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5 }}
      className='group relative'
    >
      <div className='relative rounded-2xl border border-zinc-800/50 bg-gradient-to-b from-zinc-900/70 to-zinc-900/20 p-8 backdrop-blur-sm transition-all duration-300 hover:border-zinc-700 hover:shadow-[0_0_30px_-5px_rgba(217,91,60,0.1)]'>
        {/* Animated gradient border on hover */}
        <div className='absolute inset-0 rounded-2xl bg-gradient-to-r from-transparent via-zinc-800/20 to-transparent opacity-0 transition-opacity duration-500 group-hover:opacity-100' />

        {/* Subtle glow effect */}
        <div className='absolute -inset-px rounded-2xl bg-gradient-to-r from-zinc-800/5 via-zinc-800/20 to-zinc-800/5 opacity-0 blur-xl transition-opacity duration-500 group-hover:opacity-100' />

        <div className='relative'>
          <h3 className='bg-gradient-to-r from-white via-zinc-300 to-zinc-400 bg-clip-text text-xl font-medium text-transparent'>
            {title}
          </h3>
          <p className='mt-4 text-base leading-relaxed text-zinc-400'>
            {description}
          </p>
        </div>
      </div>
    </motion.div>
  );
}

export function WhatWeBelieve() {
  const principles = [
    {
      title: 'Truth Over Everything',
      description:
        "We don't sugar-coat or hide behind buzzwords. If something works, we'll tell you. If it doesn't, we'll tell you that too. No fake positivity, no manipulation, no hidden agendas. Just the truth, even when it's hard to hear - because that's what actually helps people move forward.",
    },
    {
      title: 'Quality Over Quantity',
      description:
        "We don't need more content - we need better content. Everything on WYOS is carefully chosen because it delivers real results, not because it sounds good or makes us money. No fluff or bs sales tactics.",
    },
    {
      title: 'Stay Independent',
      description:
        'WYOS is funded by member subscriptions, not ads or data selling. We use some affiliate partnerships, but only to keep membership costs low - never to push products. Our loyalty is to our members, not advertisers.',
    },
    {
      title: 'Build Together',
      description:
        "WYOS isn't just another platform - it's being shaped by its founding members. We don't have all the answers, and we don't pretend to. What we have is a vision for something better and a community ready to build it.",
    },
  ];

  return (
    <div className='relative'>
      {/* Background effects */}
      <div className='absolute inset-0 overflow-hidden'>
        <div className='absolute inset-0 bg-[radial-gradient(circle_800px_at_50%_-40%,rgba(217,91,60,0.05),transparent)]' />
        <div
          className='absolute h-full w-full bg-[linear-gradient(to_right,#000103_1px,transparent_1px),linear-gradient(to_bottom,#000103_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_-20%,#000_70%,transparent_110%)]'
          style={{ opacity: 0.1 }}
        />
      </div>

      <Container className='relative py-24'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-3xl text-center'
        >
          <h2 className='font-heading text-4xl font-bold md:text-5xl'>
            What We Believe
          </h2>
          <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
          <p className='mt-4 text-lg text-zinc-400'>
            Principles that guide everything we do at WYOS
          </p>
        </motion.div>
        <div className='mt-16 grid gap-6 md:grid-cols-2'>
          {principles.map((principle, index) => (
            <motion.div
              key={principle.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <Principle {...principle} />
            </motion.div>
          ))}
        </div>
      </Container>
    </div>
  );
}
</file>

<file path="src/components/marketing/about/WhoWeAre.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

export function WhoWeAre() {
  return (
    <section className='relative bg-background py-24'>
      <Container>
        <div className='mx-auto max-w-3xl space-y-24'>
          {/* Who We Are Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <h2 className='font-heading text-3xl font-bold md:text-4xl'>
              Who We Are
            </h2>

            <div className='mt-8 space-y-6 text-lg text-zinc-400'>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                WYOS isn't owned by a company or backed by investors. It's an
                independent platform, developed and maintained by one person
                (hey, I'm Zach 👋).
              </motion.p>

              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.3 }}
              >
                The goal is to keep it that way - self-funded and sustained by
                member subscriptions, answering only to the people who use it.
              </motion.p>
            </div>
          </motion.div>

          {/* Why WYOS Exists Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <h2 className='font-heading text-3xl font-bold md:text-4xl'>
              Why WYOS Exists
            </h2>

            <div className='mt-8 space-y-6 text-lg text-zinc-400'>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                We're living in unprecedented times. AI is reshaping entire
                industries, people are more isolated than ever, and finding
                genuine help online feels impossible. But I believe that's
                exactly why we need to stick together.
              </motion.p>

              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.3 }}
              >
                Real growth and success rarely happen in isolation. Some of the
                most significant breakthroughs in our lives come from the
                connections we make, the knowledge we share, and the support we
                give each other. That's what WYOS is built around.
              </motion.p>
            </div>
          </motion.div>
        </div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/CorePillars.tsx">
'use client';

import { Container } from '@/components/ui/container';
import { motion, AnimatePresence } from 'motion/react';
import { useState, useEffect, useCallback } from 'react';
import { cn } from '@/lib/utils';
import Image from 'next/image';

const AUTOPLAY_DELAY = 7500; // 5 seconds per slide

const pillars = [
  {
    id: 'knowledge',
    title: 'Knowledge',
    description:
      "The Knowledge Section brings together the best insights and wisdom from across the internet, all in one place. Whether you're trying to build better habits, start a business, or just figure life out - you'll find practical, actionable information without having to wade through endless garbage to get it.",
    image: '/images/knowledge-section.jpg',
  },
  {
    id: 'resources',
    title: 'Resources',
    description:
      "The Resources Section is where you'll find tools that actually work. We test everything ourselves and only recommend what delivers real results. From meditation apps to productivity tools, you'll find the best options without the overwhelming choice paralysis.",
    image: '/images/resources-section.jpg',
  },
  {
    id: 'community',
    title: 'Community',
    description:
      "The Community is for people who are done with the fake stuff. It's a place where you can be real about your struggles, share what's actually working, and connect with others who are serious about leveling up. No judgment, no toxic positivity - just honest conversations and real support.",
    image: '/images/community-section.jpg',
  },
];

export function CorePillars() {
  const [activePillar, setActivePillar] = useState(0);
  const [isPaused, setIsPaused] = useState(false);

  const advanceSlide = useCallback(() => {
    setActivePillar((current) => (current + 1) % pillars.length);
  }, []);

  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (!isPaused) {
      interval = setInterval(advanceSlide, AUTOPLAY_DELAY);
    }

    return () => clearInterval(interval);
  }, [isPaused, advanceSlide]);

  const handlePillarClick = (index: number) => {
    setActivePillar(index);
    setIsPaused(true);
  };

  return (
    <section className='relative px-[5%] py-[120px]'>
      <Container className='mx-auto max-w-[1280px] px-5'>
        <div className='mb-12 flex flex-col items-center text-center'>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h2 className='font-heading text-[40px] font-semibold tracking-wide'>
              <span className='block text-white'>One Platform.</span>
              <span className='gradient-text -mt-1 block font-medium'>
                Everything You Need
              </span>
            </h2>
            <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
            <p className='mx-auto mt-6 max-w-2xl text-lg leading-relaxed text-[#A1A1AA]'>
              The idea behind WYOS is to combine everything you need into one
              platform so you can move from where you are now to where you want
              to be.
            </p>
          </motion.div>

          <div className='mt-10 flex justify-center'>
            <div className='flex w-full max-w-2xl justify-between gap-12'>
              {pillars.map((pillar, index) => (
                <div key={pillar.id} className='relative'>
                  <button
                    onClick={() => handlePillarClick(index)}
                    className={cn(
                      'relative min-w-[100px] text-[16px] font-medium transition-all duration-300',
                      activePillar === index
                        ? 'text-white'
                        : 'text-[#71717A] hover:text-[#A1A1AA]'
                    )}
                  >
                    {pillar.title}
                  </button>
                  {activePillar === index && (
                    <motion.div
                      layoutId='activeTab'
                      className='absolute -bottom-2 left-0 right-0 h-[2px] bg-gradient-to-r from-transparent via-blue-500 to-transparent'
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                    />
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className='relative mt-12 h-[500px] w-full overflow-hidden rounded-xl border border-white/10 bg-[#131316]'
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >
          {/* Progress Bar */}
          <div className='absolute left-0 top-0 h-px w-full'>
            <motion.div
              className='h-full w-full bg-gradient-to-r from-transparent via-blue-500 to-transparent'
              initial={{ scaleX: 0 }}
              animate={{ scaleX: 1 }}
              transition={{ duration: 5, ease: 'linear' }}
              key={activePillar}
            />
          </div>

          <AnimatePresence mode='wait'>
            {pillars.map(
              (pillar, index) =>
                activePillar === index && (
                  <motion.div
                    key={pillar.id}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.5 }}
                    className='absolute inset-0'
                  >
                    <Image
                      src={pillar.image}
                      alt={pillar.title}
                      fill
                      className='object-cover'
                      priority={index === 0}
                    />
                    <div className='absolute inset-0 bg-gradient-to-t from-[#0C0C0E]/90 via-[#0C0C0E]/50 to-[#0C0C0E]/20' />
                    <div className='absolute bottom-0 left-0 p-8 sm:p-12'>
                      <h3 className='gradient-text mb-4 font-heading text-[32px] font-bold tracking-wide'>
                        {pillar.title}
                      </h3>
                      <p className='max-w-xl text-lg text-zinc-400'>
                        {pillar.description}
                      </p>
                    </div>
                  </motion.div>
                )
            )}
          </AnimatePresence>
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/FounderNote.tsx">
'use client';

import Image from 'next/image';
import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

export function FounderNote() {
  return (
    <section className='relative px-[5%] py-[120px]'>
      <Container className='relative z-[9] mx-auto w-full max-w-[1072px]'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className='relative flex flex-col items-center justify-start overflow-hidden rounded-[32px] bg-[linear-gradient(#101114,rgba(16,17,20,0))] text-center'
        >
          {/* Content wrapper */}
          <div className='relative flex w-full flex-col items-center justify-center overflow-hidden rounded-[32px] px-24 pb-20 pt-24'>
            {/* Inner content */}
            <div className='flex w-full max-w-[1000px] flex-col items-center justify-start'>
              {/* Title */}
              <div className='mb-8 w-full max-w-[600px]'>
                <h3 className='gradient-text font-heading text-[30px] font-[500] tracking-[-0.02em]'>
                  From the Founder
                </h3>
              </div>

              {/* Text content */}
              <div className='max-w-[800px] text-[18px] leading-[1.8] tracking-[-0.02em] text-[#9ca0ab]'>
                <p className='mb-8'>
                  I was tired of wasting time on generic advice, fake gurus, and
                  endless fluff. I wanted a space where people could find real
                  tools, real insights, and real community—without the BS.
                  That's why I created WYOS.
                </p>
                <p className='mb-8'>
                  WYOS isn't perfect—and it's not supposed to be. It's a work in
                  progress, built by people like you who want to grow, share,
                  and make something better together.
                </p>
                <p>
                  If you're ready to stop wasting time and start building
                  something real—with us—I'd love for you to join.
                </p>
              </div>

              {/* Image and signature */}
              <div className='mt-6 flex items-center'>
                <div className='flex h-[48px] w-[48px] items-center justify-center rounded-[99px] bg-[#141415]'>
                  <Image
                    src='/images/placeholder.png'
                    alt='Founder'
                    width={48}
                    height={48}
                    className='h-full w-full rounded-full object-cover'
                  />
                </div>
                <div className='flex flex-col items-center px-6 py-6'>
                  <span className='text-[12px] tracking-[-0.08em] text-[#9ca0ab]'>
                    Zach
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Border gradient */}
          <div
            className='absolute inset-0 rounded-[36px]'
            style={{
              padding: '1px',
              background:
                'linear-gradient(180deg, rgba(255,255,255,0.12) 0%, rgba(255,255,255,0) 80%)',
              WebkitMask:
                'linear-gradient(#060609, #060609) content-box, linear-gradient(#060609, #060609)',
              WebkitMaskComposite: 'xor',
              pointerEvents: 'none',
            }}
          />
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/FoundingMember.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';
import { Star, Users, MessageSquare, Zap } from 'lucide-react';
import { HoverButton } from '@/components/ui/hover-button';
import { Section } from '@/components/ui/section';
import React from 'react';

export const FoundingMember = () => {
  const benefits = [
    {
      icon: <Users className='h-6 w-6' strokeWidth={1.5} />,
      title: 'Shape The Platform',
      description:
        'Direct input on features, community guidelines, and platform direction',
    },
    {
      icon: <Star className='h-6 w-6' strokeWidth={1.5} />,
      title: 'Lifetime Benefits',
      description:
        'Special perks and rates that remain exclusive to founding members',
    },
    {
      icon: <MessageSquare className='h-6 w-6' strokeWidth={1.5} />,
      title: 'Core Community',
      description:
        'Help build the foundation of our no-BS community from day one',
    },
    {
      icon: <Zap className='h-6 w-6' strokeWidth={1.5} />,
      title: 'Early Access',
      description:
        'First access to new features and content before anyone else',
    },
  ];

  return (
    <Section background='gradient'>
      <Container>
        {/* Title Section with Badge */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className='relative mb-12 text-center'
        >
          {/* Limited Spots Badge */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className='mb-6 flex justify-center'
          >
            <div className='inline-flex items-center gap-2 rounded-full border border-blue-900/20 bg-blue-500/5 px-4 py-2'>
              <Star className='h-4 w-4 text-blue-500' />
              <span className='text-sm font-medium text-blue-500'>
                Limited Founding Member Spots
              </span>
            </div>
          </motion.div>

          <h2 className='font-heading text-[40px] tracking-wide'>
            <span className='block font-semibold text-white'>Become A</span>
            <span className='gradient-text -mt-1 block font-medium'>
              Founding Member
            </span>
          </h2>
          <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className='mx-auto max-w-3xl'
        >
          <p className='text-center text-lg leading-relaxed text-zinc-400 md:text-xl'>
            This isn't about following someone else's vision. It's about
            building something together—a space where we can all grow, learn,
            and succeed on our own terms.
          </p>
        </motion.div>

        {/* Benefits Grid */}
        <div className='mt-16 grid gap-4 sm:grid-cols-2'>
          {benefits.map((benefit, index) => (
            <motion.div
              key={benefit.title}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className='group rounded-xl border border-white/10 bg-[#131316] p-6'
            >
              <div className='flex items-start gap-4'>
                <div className='rounded-lg border border-white/[0.08] bg-white/[0.02] p-3'>
                  {benefit.icon}
                </div>
                <div>
                  <h3 className='gradient-text text-lg font-semibold'>
                    {benefit.title}
                  </h3>
                  <p className='mt-2 text-sm text-zinc-400'>
                    {benefit.description}
                  </p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {/* CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className='mt-16 text-center'
        >
          <HoverButton>Become a Founding Member</HoverButton>
        </motion.div>
      </Container>
    </Section>
  );
};
</file>

<file path="src/components/marketing/home/Hero.tsx">
'use client';

import { motion, useScroll, useTransform } from 'motion/react';
import { useRef } from 'react';
import Link from 'next/link';
import { Spotlight } from '@/components/ui/spotlight';
import { HoverButton } from '@/components/ui/hover-button';
import { HeroScrollAnimation } from './HeroScrollAnimation';

export function Hero() {
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  // Slowed down even more by increasing the scroll range
  const heroY = useTransform(
    scrollYProgress,
    [0, 0.15], // Increased from 0.2 to 0.25 for slightly slower movement
    ['0%', '1%'] // Kept the same movement amount
  );

  return (
    <section ref={containerRef} className='relative h-[450vh]'>
      {/* Spotlight Background */}
      <Spotlight
        gradientFirst='radial-gradient(68.54% 68.72% at 55.02% 31.46%, hsla(210, 100%, 85%, .04) 0, hsla(210, 100%, 55%, .01) 50%, hsla(210, 100%, 45%, 0) 80%)'
        gradientSecond='radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .03) 0, hsla(210, 100%, 55%, .01) 80%, transparent 100%)'
        gradientThird='radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .02) 0, hsla(210, 100%, 45%, .01) 80%, transparent 100%)'
        translateY={-450}
        xOffset={80}
      />

      {/* Hero Content */}
      <motion.div
        style={{ y: heroY }}
        className='sticky top-0 z-0 flex h-screen items-center justify-center'
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className='container relative mx-auto flex max-w-4xl flex-col items-center justify-center text-center'
        >
          <motion.h1
            className='font-heading text-3xl font-bold tracking-tight md:text-5xl lg:text-6xl'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            Stop Waiting for Change.
          </motion.h1>

          <motion.h2
            className='mt-4 font-heading text-4xl font-semibold text-muted-foreground md:text-4xl lg:text-5xl'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            Start Writing Your Own Story
          </motion.h2>

          <motion.p
            className='mt-8 max-w-2xl text-lg text-muted-foreground md:text-xl'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            Discover the knowledge, resources, and community to help you move
            from where you are to where you want to be—on your terms.
          </motion.p>

          <motion.div
            className='mt-12 flex flex-col items-center justify-center gap-4 sm:flex-row'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
          >
            <Link href='/register'>
              <HoverButton>Find Out How</HoverButton>
            </Link>
          </motion.div>
        </motion.div>
      </motion.div>

      {/* Move frame back to original position */}
      <div className='absolute left-0 right-0 top-[70vh] z-10'>
        <HeroScrollAnimation />
      </div>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/HeroScrollAnimation.tsx">
'use client';

import { motion, useScroll, useTransform } from 'motion/react';
import { useRef, useState, useEffect } from 'react';
import Image from 'next/image';
import { TextReveal } from '@/components/ui/text-reveal';

const sentences = [
  "Life's getting chaotic.",
  "Every day, it gets harder to tell what's real and what's not.",
  "You're overwhelmed with choices and drowning in information.",
  'The more you try to make sense of it, the more lost you become.',
  "But it doesn't have to be this way.",
];

export function HeroScrollAnimation() {
  const containerRef = useRef<HTMLDivElement | null>(null);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth <= 768);
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  const rotateX = useTransform(scrollYProgress, [0, 0.1], [20, 0]);
  const scale = useTransform(
    scrollYProgress,
    [0, 0.25],
    [0.9, isMobile ? 1.1 : 1.5] // If desired, change scale from 0.9 to a higher value (e.g. 1.5) to end bigger
  );

  const perspective = 1000;

  return (
    <section ref={containerRef} className='relative h-[400vh]'>
      <div className='sticky top-[20vh] h-screen'>
        <div className='container mx-auto'>
          <motion.div
            initial={{ rotateX: 25, scale: 1 }} // If desired, change scale from 0.09 to a higher value (e.g. 1) to start bigger
            style={{
              rotateX,
              scale,
              transformPerspective: perspective,
              WebkitBackdropFilter: 'blur(64px)',
              backdropFilter: 'blur(64px)',
              backgroundImage:
                'linear-gradient(rgba(16,17,20,.5), rgba(255,255,255,0)), linear-gradient(#060609, #060609)',
            }}
            className='relative mx-auto h-[40rem] w-[90%] max-w-5xl overflow-hidden rounded-[36px] p-4 shadow-2xl'
          >
            {/* Image/Video Background with adjusted padding */}
            <div className='absolute inset-0 rounded-[32px] bg-[#060609]'>
              <div className='relative h-full w-full'>
                <Image
                  src='/images/placeholder.png'
                  alt='Frame'
                  fill
                  className='object-cover'
                  priority
                />
                <div className='absolute inset-0 bg-gradient-to-b from-transparent via-black/40 to-black/70' />
              </div>
            </div>

            {/* Text Content Overlay */}
            <div className='absolute inset-0 flex flex-col items-center justify-center p-8 text-center'>
              {sentences.map((sentence, index) => (
                <TextReveal
                  key={`hero-${sentence.slice(0, 20)}`}
                  text={sentence}
                  progress={scrollYProgress}
                  start={0 + index * 0.15}
                  end={0.1 + index * 0.15}
                  className='mb-6 block !text-white' // Added !text-white to force full opacity
                />
              ))}
            </div>

            {/* Gradient Border */}
            <div
              className='pointer-events-none absolute inset-0 rounded-[36px]'
              style={{
                padding: '1px',
                background:
                  'linear-gradient(180deg, rgba(255,255,255,0.12) 0%, rgba(255,255,255,0) 80%)',
                WebkitMask:
                  'linear-gradient(#060609, #060609) content-box, linear-gradient(#060609, #060609)',
                WebkitMaskComposite: 'xor',
              }}
            />
          </motion.div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/InternetsAMess.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

export const InternetsAMess = () => {
  return (
    <section className='relative py-24 md:py-32'>
      {/* Enhanced Background with multiple layers */}
      <div className='absolute inset-0'>
        {/* Primary gradient background */}
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.15),transparent_50%)]' />

        {/* Subtle pattern overlay */}
        <div
          className='absolute h-full w-full bg-[linear-gradient(to_right,#000103_1px,transparent_1px),linear-gradient(to_bottom,#000103_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]'
          style={{ opacity: 0.03 }}
        />

        {/* Additional gradient for depth */}
        <div className='absolute inset-0 bg-gradient-to-b from-background/0 via-background to-background' />
      </div>

      <Container>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6 }}
          className='mx-auto max-w-3xl'
        >
          {/* Enhanced Title Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className='relative mb-12 text-center'
          >
            <h2 className='font-heading text-[40px] font-semibold tracking-wide'>
              <span className='block text-white'>The Internet's</span>
              <span className='gradient-text -mt-1 block font-medium'>
                a Mess Right Now
              </span>
            </h2>
            <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
          </motion.div>

          {/* Content with enhanced styling */}
          <div className='relative space-y-6 text-lg leading-relaxed text-zinc-400'>
            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.2 }}
            >
              Everywhere you look, there's fake positivity, generic advice, and
              it seems like people are only looking out for themselves.
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.3 }}
            >
              Social media is just highlights and filters. "Gurus" push their
              courses with false promises. And now the rise of AI has only made
              things worse. Finding anything useful has never been more
              difficult.
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.3 }}
            >
              That's why we built WYOS—for the ones who want to get away from it
              all.
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.3 }}
            >
              No fake motivation. No "one-size-fits-all" solutions. No hidden
              agendas or manipulation tactics. Just the best information and
              resources that we've come across combined with a community of
              people who are actually trying to help each other level up.
            </motion.p>

            {/* Simplified Closing Statement */}
            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.4 }}
              className='mt-8 text-center text-xl font-medium text-white'
            >
              If that's what you've been looking for, you're in the right place.
            </motion.p>
          </div>
        </motion.div>
      </Container>
    </section>
  );
};
</file>

<file path="src/components/marketing/home/NoBs.tsx">
'use client';

import * as React from 'react';
import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';

export function NoBs() {
  const coreValues = ['Real Insights', 'Real Growth', 'No BS'];

  return (
    <section className='relative px-[5%] py-[120px]'>
      <Container className='mx-auto max-w-[1280px] px-5'>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className='flex items-center gap-2 rounded-xl border border-white/10 bg-[#131316] p-2'
        >
          {coreValues.map((value, index) => (
            <React.Fragment key={value}>
              <div className='flex h-[112px] flex-1 items-center justify-center'>
                <h3 className='gradient-text font-heading text-[32px] font-normal tracking-wide'>
                  {value}
                </h3>
              </div>
              {index < coreValues.length - 1 && (
                <div className='h-[48px] w-px bg-[#363a3f]' />
              )}
            </React.Fragment>
          ))}
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/home/NotForEveryone.tsx">
'use client';

import { Section } from '@/components/ui/section';
import { motion } from 'motion/react';

export function NotForEveryone() {
  const qualities = [
    {
      right:
        "You're tired of surface-level advice and want real, practical guidance",
      wrong:
        "You're looking for quick fixes or 'hack your way to success' promises",
    },
    {
      right: "You're ready to put in the work and build lasting change",
      wrong: 'You want someone to solve all your problems for you',
    },
    {
      right: 'You value honest conversations about growth and success',
      wrong: 'You prefer feel-good content and avoid hard truths',
    },
  ];

  return (
    <Section background='gradient'>
      {/* Enhanced Title Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        className='relative mb-12 text-center'
      >
        <h2 className='font-heading text-[40px] font-semibold tracking-wide'>
          <span className='block text-white'>Not For Everyone.</span>
          <span className='gradient-text -mt-1 block'>That's The Point.</span>
        </h2>
        <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        className='mx-auto max-w-3xl'
      >
        <p className='text-center text-lg leading-relaxed text-zinc-400 md:text-xl'>
          WYOS isn't trying to be everything for everyone. We're building this
          for people who are serious about real growth.
        </p>
      </motion.div>

      <div className='mt-16 grid gap-8 md:grid-cols-2'>
        {/* Wrong Column - Left side */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          whileInView={{ opacity: 1, x: 0 }}
          viewport={{ once: true }}
          className='space-y-6 rounded-xl border border-red-800/20 bg-card p-8 shadow-lg transition-colors'
        >
          <h3 className='text-xl font-semibold text-red-700'>
            This isn't for you if:
          </h3>
          <ul className='space-y-4'>
            {qualities.map((quality, index) => (
              <motion.li
                key={index}
                initial={{ opacity: 0, x: -20 }}
                whileInView={{ opacity: 1, x: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.1 }}
                className='flex items-start gap-3 text-zinc-400'
              >
                <span className='shrink-0 text-red-700'>×</span>
                <span>{quality.wrong}</span>
              </motion.li>
            ))}
          </ul>
        </motion.div>

        {/* Right Column - Right side */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          whileInView={{ opacity: 1, x: 0 }}
          viewport={{ once: true }}
          className='space-y-6 rounded-xl border border-emerald-900/20 bg-card p-8 shadow-lg transition-colors'
        >
          <h3 className='text-xl font-semibold text-emerald-800'>
            WYOS is for you if:
          </h3>
          <ul className='space-y-4'>
            {qualities.map((quality, index) => (
              <motion.li
                key={index}
                initial={{ opacity: 0, x: 20 }}
                whileInView={{ opacity: 1, x: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.1 }}
                className='flex items-start gap-3 text-zinc-400'
              >
                <span className='shrink-0 text-emerald-800'>✓</span>
                <span>{quality.right}</span>
              </motion.li>
            ))}
          </ul>
        </motion.div>
      </div>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/AffiliateNote.tsx">
'use client';

import { motion } from 'motion/react';
import { Section } from '@/components/ui/section';
import { Container } from '@/components/ui/container';

export function AffiliateNote() {
  return (
    <Section
      className='relative overflow-hidden'
      container={false}
      spacing='lg'
    >
      {/* Gradient background effect */}
      <div className='absolute inset-0 overflow-hidden'>
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_30%_30%,rgba(59,130,246,0.03),transparent_55%)]' />
      </div>

      <Container className='relative z-10'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-4xl'
        >
          <div className='mx-auto mb-16 flex justify-center'>
            <motion.div
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 0.7 }}
              viewport={{ once: true }}
              transition={{ duration: 1 }}
              className='h-px w-16 bg-gradient-to-r from-transparent via-blue-600/40 to-transparent'
            />
          </div>

          <motion.h2
            initial={{ opacity: 0, y: 10 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className='text-center font-heading text-3xl font-bold md:text-4xl mb-10'
          >
            A Note on Affiliate Links
          </motion.h2>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.7 }}
            className='relative overflow-hidden rounded-2xl border border-zinc-800/50 backdrop-blur-md'
          >
            {/* Subtle glow effect */}
            <div className='absolute -left-40 -top-40 h-80 w-80 rounded-full bg-blue-600/5 blur-3xl' />
            <div className='absolute -right-40 -bottom-40 h-80 w-80 rounded-full bg-blue-600/5 blur-3xl' />

            <div className='relative z-10 p-8 md:p-10'>
              <motion.p
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.1 }}
                className='text-lg text-zinc-300'
              >
                Yes, some resources in our library have affiliate programs, and
                we do use those links. But here's what makes us different:
              </motion.p>

              <motion.div
                initial={{ width: 0 }}
                whileInView={{ width: '100%' }}
                viewport={{ once: true }}
                transition={{ duration: 1, delay: 0.3 }}
                className='my-8 h-px w-full bg-gradient-to-r from-transparent via-zinc-700 to-transparent'
              />

              <motion.div
                initial={{ opacity: 0, y: 10 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6, delay: 0.4 }}
                className='rounded-xl bg-gradient-to-br from-zinc-900/50 to-black/20 p-6 md:p-8 border border-zinc-800/30'
              >
                <p className='text-xl font-medium leading-relaxed text-white'>
                  We NEVER recommend something just because it has an affiliate
                  program. We recommend it because it works, and if it happens
                  to have an affiliate program, we'll use that link to help keep
                  membership costs down.
                </p>
              </motion.div>

              <motion.div
                initial={{ width: 0 }}
                whileInView={{ width: '100%' }}
                viewport={{ once: true }}
                transition={{ duration: 1, delay: 0.5 }}
                className='my-8 h-px w-full bg-gradient-to-r from-transparent via-zinc-700 to-transparent'
              />

              <motion.p
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.6 }}
                className='text-lg text-zinc-300'
              >
                Many resources we recommend don't even have affiliate programs.
                We're not here to push products—we're here to show you what
                actually works.
              </motion.p>
            </div>
          </motion.div>
        </motion.div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/FoundingMemberOffer.tsx">
'use client';

import { motion } from 'motion/react';
import { Section } from '@/components/ui/section';
import { Container } from '@/components/ui/container';
import Link from 'next/link';
import { ShinyButton } from '@/components/ui/shiny-button';

export function FoundingMemberOffer() {
  const foundingBenefits = [
    'Lock in this price forever—it will never be this low again',
    'Help shape the future of WYOS—founding members get direct input into platform development',
    'Exclusive founding member badge',
  ];

  return (
    <Section
      className='relative overflow-hidden'
      container={false}
      spacing='lg'
    >
      {/* Animated background elements */}
      <div className='absolute inset-0 overflow-hidden'>
        <motion.div
          animate={{
            opacity: [0.4, 0.6, 0.4],
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            repeatType: 'reverse',
          }}
          className='absolute -top-[30%] left-[10%] h-[60%] w-[80%] rounded-full bg-blue-600/5 blur-3xl'
        />
        <motion.div
          animate={{
            opacity: [0.3, 0.5, 0.3],
            scale: [1, 1.05, 1],
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            repeatType: 'reverse',
            delay: 1,
          }}
          className='absolute -bottom-[30%] right-[10%] h-[60%] w-[80%] rounded-full bg-indigo-600/5 blur-3xl'
        />

        {/* Subtle grid pattern */}
        <div
          className='absolute inset-0 h-full w-full bg-[linear-gradient(to_right,#ffffff02_1px,transparent_1px),linear-gradient(to_bottom,#ffffff02_1px,transparent_1px)] bg-[size:4rem_4rem]'
          style={{ opacity: 0.05 }}
        />
      </div>

      <Container className='relative z-10'>
        <div className='mx-auto mb-16 flex justify-center'>
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 0.7 }}
            viewport={{ once: true }}
            transition={{ duration: 1 }}
            className='h-px w-24 bg-gradient-to-r from-transparent via-primary/30 to-transparent'
          />
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-5xl'
        >
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.7 }}
            className='relative overflow-hidden rounded-2xl bg-gradient-to-b from-zinc-900/95 to-black/95 p-2 shadow-[0_0_50px_-12px_rgba(59,130,246,0.2)] md:p-3'
          >
            {/* Inner border gradient */}
            <div className='absolute inset-0 rounded-2xl bg-gradient-to-b from-zinc-700/20 to-zinc-800/5 p-px'>
              <div className='absolute inset-0 rounded-2xl backdrop-blur-xl'></div>
            </div>

            <div className='relative z-10 rounded-xl p-8 md:p-10'>
              <motion.h2
                initial={{ opacity: 0, y: 10 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6 }}
                className='text-center font-heading text-3xl font-bold md:text-4xl lg:text-5xl'
              >
                Founding Member{' '}
                <span className='text-blue-400'>Opportunity</span>
              </motion.h2>

              <motion.p
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.1 }}
                className='mt-4 text-center text-lg text-zinc-300'
              >
                For the first 50 members only —{' '}
                <span className='font-medium text-blue-400'>
                  be part of something real from the start
                </span>
              </motion.p>

              <div className='mt-12 flex flex-col items-stretch justify-center gap-8 md:flex-row'>
                {/* Monthly plan */}
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                  className='flex-1 overflow-hidden rounded-xl bg-gradient-to-b from-zinc-800/50 to-zinc-900/50 p-px shadow-lg'
                  whileHover={{
                    y: -5,
                    boxShadow: '0 20px 40px -15px rgba(0,0,0,0.3)',
                    transition: { duration: 0.2 },
                  }}
                >
                  <div className='h-full rounded-xl bg-gradient-to-b from-black/60 to-black/95 p-6 md:p-8'>
                    <h3 className='font-heading text-2xl font-bold text-white'>
                      Monthly
                    </h3>
                    <p className='mt-2 text-zinc-400'>Flexible option</p>

                    <div className='my-6 flex items-baseline'>
                      <span className='font-heading text-5xl font-bold text-white'>
                        $25
                      </span>
                      <span className='ml-1 text-zinc-400'>/month</span>
                    </div>

                    <Link href='/register' className='mt-6 block'>
                      <ShinyButton className='w-full'>
                        Choose Monthly
                      </ShinyButton>
                    </Link>
                  </div>
                </motion.div>

                {/* Annual plan */}
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.3 }}
                  className='relative flex-1 overflow-hidden rounded-xl bg-gradient-to-b from-blue-700/30 to-blue-900/20 p-px shadow-lg'
                  whileHover={{
                    y: -5,
                    boxShadow: '0 20px 40px -15px rgba(0,0,0,0.3)',
                    transition: { duration: 0.2 },
                  }}
                >
                  {/* "Best Value" tag */}
                  <div className='absolute -right-12 top-6 rotate-45 bg-blue-600 px-12 py-1 text-xs font-bold uppercase tracking-wider text-white shadow-md'>
                    Best Value
                  </div>

                  <div className='h-full rounded-xl bg-gradient-to-b from-black/60 to-black/95 p-6 md:p-8'>
                    <h3 className='font-heading text-2xl font-bold text-white'>
                      Annual
                    </h3>
                    <p className='mt-2 text-zinc-400'>Save $120</p>

                    <div className='my-6 flex items-baseline'>
                      <span className='font-heading text-5xl font-bold text-white'>
                        $180
                      </span>
                      <span className='ml-1 text-zinc-400'>/year</span>
                    </div>

                    <Link href='/register' className='mt-6 block'>
                      <ShinyButton className='w-full bg-blue-600/80 hover:bg-blue-600/90'>
                        Choose Annual
                      </ShinyButton>
                    </Link>
                  </div>
                </motion.div>
              </div>

              <div className='mt-12 rounded-xl border border-zinc-800/30 bg-gradient-to-br from-zinc-900/50 to-black/20 p-6 md:p-8'>
                <motion.h4
                  initial={{ opacity: 0 }}
                  whileInView={{ opacity: 1 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: 0.4 }}
                  className='mb-4 text-lg font-medium text-white'
                >
                  Founding Member Benefits:
                </motion.h4>

                <motion.ul
                  initial={{ opacity: 0 }}
                  whileInView={{ opacity: 1 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: 0.5 }}
                  className='space-y-4 text-zinc-300'
                >
                  {foundingBenefits.map((benefit, index) => (
                    <motion.li
                      key={index}
                      className='flex items-start'
                      initial={{ opacity: 0, x: -10 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.4, delay: 0.5 + index * 0.1 }}
                    >
                      <span className='mr-3 mt-1 flex h-5 w-5 shrink-0 items-center justify-center rounded-full bg-blue-600/20 text-sm text-blue-400'>
                        ✓
                      </span>
                      <span>{benefit}</span>
                    </motion.li>
                  ))}
                </motion.ul>
              </div>

              <motion.p
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.7 }}
                className='mt-8 text-center text-zinc-400'
              >
                After the first 100 spots are filled, the price will increase.
              </motion.p>
            </div>
          </motion.div>
        </motion.div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/IdealMember.tsx">
'use client';

import { motion } from 'motion/react';
import { Section } from '@/components/ui/section';
import { Container } from '@/components/ui/container';

export function IdealMember() {
  const forYou = [
    "You're tired of wasting time on generic advice that doesn't actually help",
    'You want a bullshit-free zone where people tell it like it is',
    "You're willing to contribute and help build something meaningful",
    "You're ready to put in the work, not just consume more content",
  ];

  const notForYou = [
    "You're looking for quick fixes or magic solutions",
    'You want someone to tell you exactly what to do',
    "You're not willing to engage and contribute",
    'You expect perfection from day one',
  ];

  return (
    <Section className='relative' container={false} spacing='lg'>
      {/* Gradient overlay */}
      <div className='absolute inset-0 overflow-hidden pointer-events-none'>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1 }}
          className='absolute -top-96 left-1/2 -translate-x-1/2 w-full max-w-6xl h-96 bg-gradient-to-b from-blue-700/5 to-transparent blur-3xl'
        />

        <div
          className='absolute inset-0 h-full w-full bg-[linear-gradient(to_right,#ffffff02_1px,transparent_1px),linear-gradient(to_bottom,#ffffff02_1px,transparent_1px)] bg-[size:3rem_3rem]'
          style={{ opacity: 0.05 }}
        />
      </div>

      <Container className='relative z-10'>
        <div className='flex flex-col items-center mb-16'>
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 0.6 }}
            viewport={{ once: true }}
            transition={{ duration: 1 }}
            className='h-px w-20 bg-gradient-to-r from-transparent via-primary/40 to-transparent mb-12'
          />
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-4xl'
        >
          <motion.h2
            initial={{ opacity: 0, y: 10 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className='text-center font-heading text-4xl font-bold tracking-tight md:text-5xl'
          >
            Who This Is Actually For
          </motion.h2>

          <motion.p
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className='mt-8 text-center text-lg text-zinc-300 max-w-3xl mx-auto mb-16'
          >
            WYOS isn't trying to appeal to everyone. In fact, it's probably not
            for most people — and that's exactly the point.
          </motion.p>

          <div className='relative'>
            {/* Glass card background with subtle gradients */}
            <div className='absolute inset-0 rounded-2xl bg-zinc-900/30 backdrop-blur-lg border border-zinc-800/50 overflow-hidden'>
              <div className='absolute -left-40 -top-40 h-80 w-80 rounded-full bg-emerald-600/5 blur-3xl' />
              <div className='absolute -right-40 -bottom-40 h-80 w-80 rounded-full bg-red-600/5 blur-3xl' />
            </div>

            <div className='relative z-10 grid gap-px md:grid-cols-2 rounded-2xl overflow-hidden backdrop-blur-xl'>
              {/* Left Side - For You */}
              <motion.div
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.7, delay: 0.3 }}
                className='bg-gradient-to-br from-black/40 to-zinc-900/40 p-8 md:p-10'
              >
                <h3 className='mb-8 font-heading text-2xl font-bold text-white border-b border-emerald-500/20 pb-4'>
                  <span className='text-emerald-400'>It's for you</span> if:
                </h3>

                <ul className='space-y-6'>
                  {forYou.map((item, index) => (
                    <motion.li
                      key={index}
                      className='flex items-start'
                      initial={{ opacity: 0, x: -10 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.4, delay: 0.4 + index * 0.1 }}
                    >
                      <span className='flex-shrink-0 flex h-6 w-6 items-center justify-center rounded-full bg-emerald-500/10 border border-emerald-500/20 text-emerald-400 mr-4 mt-0.5'>
                        <svg
                          xmlns='http://www.w3.org/2000/svg'
                          className='h-3.5 w-3.5'
                          viewBox='0 0 20 20'
                          fill='currentColor'
                        >
                          <path
                            fillRule='evenodd'
                            d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z'
                            clipRule='evenodd'
                          />
                        </svg>
                      </span>
                      <span className='text-zinc-200'>{item}</span>
                    </motion.li>
                  ))}
                </ul>
              </motion.div>

              {/* Right Side - Not For You */}
              <motion.div
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.7, delay: 0.3 }}
                className='bg-gradient-to-br from-black/40 to-zinc-900/40 p-8 md:p-10'
              >
                <h3 className='mb-8 font-heading text-2xl font-bold text-white border-b border-red-500/20 pb-4'>
                  <span className='text-red-400'>Not for you</span> if:
                </h3>

                <ul className='space-y-6'>
                  {notForYou.map((item, index) => (
                    <motion.li
                      key={index}
                      className='flex items-start'
                      initial={{ opacity: 0, x: 10 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.4, delay: 0.4 + index * 0.1 }}
                    >
                      <span className='flex-shrink-0 flex h-6 w-6 items-center justify-center rounded-full bg-red-500/10 border border-red-500/20 text-red-400 mr-4 mt-0.5'>
                        <svg
                          xmlns='http://www.w3.org/2000/svg'
                          className='h-3.5 w-3.5'
                          viewBox='0 0 20 20'
                          fill='currentColor'
                        >
                          <path
                            fillRule='evenodd'
                            d='M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z'
                            clipRule='evenodd'
                          />
                        </svg>
                      </span>
                      <span className='text-zinc-200'>{item}</span>
                    </motion.li>
                  ))}
                </ul>
              </motion.div>
            </div>
          </div>
        </motion.div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/MemberBenefits.tsx">
'use client';

import { motion } from 'motion/react';
import { Section } from '@/components/ui/section';
import { Container } from '@/components/ui/container';

export function MemberBenefits() {
  const benefits = [
    {
      title: 'The Knowledge Section',
      description:
        'Curated insights and practical wisdom that actually works—no fluff, no generic advice',
      icon: '📚',
    },
    {
      title: 'The Resource Library',
      description:
        'Over 1,000 vetted tools across books, apps, courses, podcasts, software, and YouTube channels',
      icon: '🧰',
    },
    {
      title: 'The Community',
      description:
        'Connect with others who are serious about growth and success',
      icon: '👥',
    },
    {
      title: 'Direct Input',
      description:
        "Help shape what WYOS becomes—this isn't just my platform, it's ours",
      icon: '🎯',
    },
    {
      title: 'Comment & Rate',
      description:
        'Share your experiences with resources to help other members',
      icon: '💬',
    },
    {
      title: 'Support Real Change',
      description:
        'Help build an alternative to the manipulation-driven internet we have today',
      icon: '🔄',
    },
  ];

  return (
    <Section className='relative' container={false} spacing='lg'>
      {/* Blended gradient background to create seamless transition */}
      <div className='absolute inset-0 overflow-hidden'>
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.07),transparent_70%)]' />
        <div
          className='absolute h-full w-full bg-[linear-gradient(to_right,#ffffff02_1px,transparent_1px),linear-gradient(to_bottom,#ffffff02_1px,transparent_1px)] bg-[size:4rem_4rem]'
          style={{ opacity: 0.05 }}
        />
      </div>

      <Container className='relative z-10'>
        <div className='flex flex-col items-center'>
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 0.5 }}
            viewport={{ once: true }}
            transition={{ duration: 1 }}
            className='mb-8 h-px w-16 bg-gradient-to-r from-transparent via-primary/40 to-transparent'
          />

          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className='text-center font-heading text-4xl font-bold tracking-tight md:text-5xl lg:text-5xl mb-6'
          >
            What You Get as a Member
          </motion.h2>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.1 }}
            className='text-center text-lg text-zinc-300 max-w-2xl mb-16'
          >
            Real value that helps you grow, not just more content to consume
          </motion.p>
        </div>

        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
          className='mx-auto max-w-6xl'
        >
          <div className='grid gap-6 md:grid-cols-2 lg:grid-cols-3'>
            {benefits.map((benefit, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.05 * index }}
                className='relative overflow-hidden rounded-xl border border-zinc-800/50 bg-black/20 backdrop-blur-sm p-6 group hover:border-zinc-700/80 transition-all duration-300'
                whileHover={{ y: -5, transition: { duration: 0.2 } }}
              >
                {/* Animated gradient accent */}
                <div className='absolute -left-10 -top-10 h-20 w-20 rounded-full bg-primary/10 blur-xl transition-all duration-500 group-hover:bg-primary/20' />

                <div className='relative z-10'>
                  <div className='mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-zinc-900/70 text-xl'>
                    {benefit.icon}
                  </div>

                  <h3 className='mb-3 font-heading text-xl font-semibold text-white'>
                    {benefit.title}
                  </h3>

                  <p className='text-zinc-300 leading-relaxed'>
                    {benefit.description}
                  </p>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/MembershipHero.tsx">
'use client';

import { motion, useScroll, useTransform } from 'motion/react';
import { useRef } from 'react';
import { Spotlight } from '@/components/ui/spotlight';
import { Container } from '@/components/ui/container';

export function MembershipHero() {
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.8]);
  const y = useTransform(scrollYProgress, [0, 0.5], [0, 50]);

  return (
    <section
      ref={containerRef}
      className='relative flex h-[80vh] items-center justify-center overflow-hidden bg-background'
    >
      <Spotlight
        translateY={-350}
        width={560}
        height={1380}
        duration={7}
        xOffset={100}
        gradientFirst='radial-gradient(68.54% 68.72% at 55.02% 31.46%, hsla(210, 100%, 85%, .07) 0, hsla(210, 100%, 55%, .03) 50%, hsla(210, 100%, 45%, 0) 80%)'
        gradientSecond='radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .05) 0, hsla(210, 100%, 55%, .03) 80%, transparent 100%)'
      />

      {/* Grid pattern overlay with low opacity */}
      <div
        className='absolute inset-0 h-full w-full bg-[linear-gradient(to_right,#ffffff05_1px,transparent_1px),linear-gradient(to_bottom,#ffffff05_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]'
        style={{ opacity: 0.05 }}
      />

      <div className='pointer-events-none absolute inset-0 bg-gradient-to-b from-background via-background to-transparent' />

      <Container className='relative z-10'>
        <motion.div
          style={{ opacity, scale, y }}
          className='mx-auto max-w-3xl text-center'
        >
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.7 }}
            transition={{ duration: 1.5 }}
            className='mx-auto mb-6 flex justify-center'
          >
            <div className='h-px w-24 bg-gradient-to-r from-transparent via-primary/50 to-transparent'></div>
          </motion.div>

          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className='gradient-text font-heading text-4xl font-bold tracking-tight md:text-6xl lg:text-7xl'
          >
            No BS Membership for Real Growth
          </motion.h1>

          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.7 }}
            transition={{ duration: 1.5, delay: 0.6 }}
            className='mx-auto mt-10 flex justify-center'
          >
            <div className='h-px w-14 bg-gradient-to-r from-transparent via-zinc-500 to-transparent'></div>
          </motion.div>
        </motion.div>
      </Container>
    </section>
  );
}
</file>

<file path="src/components/marketing/membership/MembershipIntro.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';
import { Section } from '@/components/ui/section';

export function MembershipIntro() {
  return (
    <Section className='relative -mt-16 z-10' spacing='lg' container={false}>
      <div className='absolute inset-0 opacity-5'>
        <div className='absolute inset-x-0 top-0 h-px bg-gradient-to-r from-transparent via-zinc-500 to-transparent'></div>
        <div
          className='h-full w-full bg-[linear-gradient(to_right,#ffffff05_1px,transparent_1px),linear-gradient(to_bottom,#ffffff05_1px,transparent_1px)] bg-[size:2.5rem_2.5rem]'
          style={{ opacity: 0.3 }}
        />
      </div>

      <Container>
        <div className='flex flex-col items-center justify-center pb-16'>
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className='mx-auto max-w-3xl relative px-4 md:px-8 py-10'
          >
            {/* Subtle border gradient */}
            <div className='absolute inset-0 rounded-2xl bg-gradient-to-b from-zinc-800/30 to-zinc-800/5 p-px'>
              <div className='absolute inset-0 rounded-2xl backdrop-blur-3xl'></div>
            </div>

            <div className='relative z-10 px-4 py-6'>
              <motion.p
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.7, delay: 0.1 }}
                className='text-xl leading-relaxed text-zinc-200 tracking-normal'
              >
                Let's be honest—there's no shortage of platforms asking for your
                credit card these days. Another subscription, another monthly
                payment, another promise that <em>this</em> is the thing that
                will finally help you level up. I get the skepticism. I really
                do.
              </motion.p>

              <motion.p
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.7, delay: 0.2 }}
                className='mt-4 text-xl leading-relaxed text-zinc-200 tracking-normal'
              >
                WYOS isn't free, and that's a deliberate choice. Not because I'm
                trying to build some cash-generating machine, but because I
                believe in creating something sustainable that actually helps
                people—without the bullshit that comes with "free" platforms.
              </motion.p>
            </div>
          </motion.div>
        </div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/marketing/membership/WhyNotFree.tsx">
'use client';

import { motion } from 'motion/react';
import { Container } from '@/components/ui/container';
import { Section } from '@/components/ui/section';

export function WhyNotFree() {
  const reasons = [
    'It keeps WYOS independent—no investors, no corporate owners, no one to answer to except the members',
    "It ensures we can focus on quality over quantity—we don't need to chase views or clicks",
    "It helps filter out people who aren't serious—when you pay for something, you're more likely to actually use it",
    'It creates a better community—members who invest in their growth tend to contribute more meaningfully',
  ];

  return (
    <Section className='relative pt-20' container={false} spacing='lg'>
      <div className='absolute inset-0 h-full'>
        <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.05),transparent_50%)]' />
        <div
          className='absolute h-full w-full bg-[linear-gradient(to_right,#ffffff02_1px,transparent_1px),linear-gradient(to_bottom,#ffffff02_1px,transparent_1px)] bg-[size:3rem_3rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]'
          style={{ opacity: 0.2 }}
        />
      </div>

      <Container className='relative'>
        <div className='flex flex-col items-center mb-16'>
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 0.6 }}
            viewport={{ once: true }}
            transition={{ duration: 1 }}
            className='h-px w-20 bg-gradient-to-r from-transparent via-primary/40 to-transparent mb-12'
          />
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className='mx-auto max-w-3xl'
        >
          <h2 className='font-heading text-3xl font-bold md:text-4xl text-center mb-12'>
            Why isn't WYOS free?
          </h2>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.7 }}
            className='bg-zinc-900/30 backdrop-blur-sm rounded-2xl p-8 border border-zinc-800/40'
          >
            <motion.p
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className='text-lg text-zinc-300'
            >
              When I built WYOS, I had a choice: make it free and fill it with
              ads, sell your data, push affiliate products you don't need, or
              charge a straightforward membership fee. I chose the membership
              model because:
            </motion.p>

            <motion.ul
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.3 }}
              className='mt-8 space-y-5 text-lg'
            >
              {reasons.map((reason, index) => (
                <motion.li
                  key={index}
                  className='flex items-start'
                  initial={{ opacity: 0, x: -10 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.4, delay: 0.3 + index * 0.1 }}
                >
                  <span className='mr-3 mt-1 flex h-6 w-6 shrink-0 items-center justify-center rounded-full border border-primary/30 bg-primary/10 text-primary text-sm'>
                    {index + 1}
                  </span>
                  <span className='text-zinc-200'>{reason}</span>
                </motion.li>
              ))}
            </motion.ul>

            <motion.p
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.6 }}
              className='mt-8 text-lg text-zinc-300'
            >
              The reality is that building and maintaining WYOS costs money.
              Server costs, development, community hosting, content
              curation—these aren't free. But instead of covering these costs by
              compromising the platform's integrity, I'd rather be upfront about
              it.
            </motion.p>
          </motion.div>
        </motion.div>
      </Container>
    </Section>
  );
}
</file>

<file path="src/components/shared/navigation/DesktopNavLinks.tsx">
import Link from 'next/link';
import { motion, AnimatePresence } from 'motion/react';
import { useState } from 'react';

type NavLink = {
  href: string;
  label: string;
};

type DesktopNavLinksProps = {
  links: NavLink[];
};

export function DesktopNavLinks({ links }: DesktopNavLinksProps) {
  const [activeLink, setActiveLink] = useState('');

  return (
    <AnimatePresence>
      <div className='flex items-center space-x-6'>
        {links.map((link) => (
          <motion.div
            key={link.href}
            onHoverStart={() => setActiveLink(link.href)}
            onHoverEnd={() => setActiveLink('')}
            className='relative'
          >
            <Link href={link.href} className='group relative px-3 py-2'>
              <span className='relative z-10 text-sm font-medium tracking-wide text-zinc-400 transition-colors duration-200 group-hover:text-white'>
                {link.label}
              </span>
              {activeLink === link.href && (
                <motion.span
                  layoutId='navHighlight'
                  className='absolute inset-0 -z-10 rounded-md bg-blue-950/30'
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                />
              )}
            </Link>
          </motion.div>
        ))}
      </div>
    </AnimatePresence>
  );
}
</file>

<file path="src/components/shared/navigation/MemberNavLinks.tsx">
'use client';

import { cn } from '@/lib/utils';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

const memberLinks = [
  { href: '/knowledge', label: 'Knowledge' },
  { href: '/resources', label: 'Resources' },
  { href: '/community', label: 'Community' },
] as const;

export function MemberNavLinks() {
  const pathname = usePathname();

  return (
    <nav className="flex items-center space-x-12">
      {memberLinks.map((link) => (
        <Link
          key={link.href}
          href={link.href}
          className={cn(
            'group relative text-base font-medium tracking-wide text-zinc-400 transition-colors hover:text-white',
            pathname === link.href && 'text-white'
          )}
        >
          <span>{link.label}</span>
          <span className="absolute bottom-0 left-1/2 h-[1px] w-0 bg-gradient-to-r from-transparent via-white to-transparent transition-all duration-300 group-hover:left-0 group-hover:w-full" />
        </Link>
      ))}
    </nav>
  );
}
</file>

<file path="src/components/shared/navigation/MobileMenu.tsx">
'use client';

import { motion } from 'motion/react';
import { Button } from '@/components/ui/atoms/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { Menu } from 'lucide-react';
import Link from 'next/link';
import { MobileAuthButtons } from '../../auth/MobileAuthButtons';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';

interface MobileMenuProps {
  isOpen: boolean;
  setIsOpenAction: (isOpen: boolean) => void;
  isMember: boolean;
}

const memberLinks = [
  { href: '/knowledge', label: 'Knowledge' },
  { href: '/resources', label: 'Resources' },
  { href: '/community', label: 'Community' },
] as const;

const publicLinks = [
  { href: '/about', label: 'About' },
  { href: '/knowledge', label: 'Knowledge' },
  { href: '/resources', label: 'Resources' },
  { href: '/community', label: 'Community' },
  { href: '/pricing', label: 'Benefits' },
] as const;

export function MobileMenu({
  isOpen,
  setIsOpenAction,
  isMember,
}: MobileMenuProps) {
  const pathname = usePathname();
  const links = isMember ? memberLinks : publicLinks;

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpenAction}>
      <SheetTrigger asChild className='md:hidden'>
        <Button
          variant='outline'
          size='sm'
          className='ml-auto p-2 hover:bg-blue-950/30 hover:text-white'
        >
          <Menu className='h-5 w-5' />
          <span className='sr-only'>Toggle menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent
        side='right'
        className='rounded-lg border-zinc-800/50 bg-background/95 backdrop-blur-2xl'
      >
        <motion.div
          className='flex flex-col space-y-6 pt-6'
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ staggerChildren: 0.1 }}
        >
          <nav className='mt-12'>
            <ul className='space-y-4'>
              {links.map((link) => (
                <li key={link.href}>
                  <Link
                    href={link.href}
                    onClick={() => setIsOpenAction(false)}
                    className={cn(
                      'block text-base font-medium tracking-wide text-zinc-400 transition-colors duration-150 hover:text-white',
                      pathname === link.href && 'text-white'
                    )}
                  >
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </nav>
          <MobileAuthButtons
            closeMobileMenuAction={() => setIsOpenAction(false)}
          />
        </motion.div>
      </SheetContent>
    </Sheet>
  );
}
</file>

<file path="src/components/shared/navigation/Navbar.tsx">
'use client';

import { useState } from 'react';
import { cn } from '@/lib/utils';
import { Icon } from '../wyosIcon';
import { AuthButtons } from '../../auth/AuthButtons';
import { MobileMenu } from './MobileMenu';
import { useScroll } from '@/lib/hooks/shared/useScroll';
import { useScrollDirection } from '@/lib/hooks/shared/useScrollDirection';
import { FadingDivider } from '@/components/ui/fading-divider';
import { useAuthStore } from '@/store/Auth';
import { MemberNavLinks } from './MemberNavLinks';
import { PublicNavLinks } from './PublicNavLinks';
import { motion } from 'motion/react';

export function Navbar() {
  const isScrolled = useScroll(20);
  const { isVisible } = useScrollDirection();
  const [isOpen, setIsOpen] = useState(false);
  const { session } = useAuthStore();

  // Show member links if user is logged in
  const isMember = !!session;

  return (
    <motion.header
      initial={{ y: -100 }}
      animate={{ y: isVisible ? 0 : -100 }}
      transition={{ duration: 0.2 }}
      className={cn(
        'fixed top-0 z-50 w-full pt-1.5 transition-all duration-500',
        isScrolled
          ? 'before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:bg-gradient-to-b before:from-black/[0.07] before:to-transparent before:backdrop-blur-md after:pointer-events-none after:absolute after:inset-0 after:-z-20 after:bg-white/[0.01] after:backdrop-blur-md after:backdrop-saturate-150'
          : 'bg-transparent'
      )}
    >
      <div className='relative mx-auto flex h-16 max-w-7xl items-center px-6 md:px-8'>
        {/* Left section with logo */}
        <div className='w-40 shrink-0'>
          <Icon />
        </div>

        {/* Center section with nav links */}
        <div className='hidden flex-1 justify-center md:flex'>
          {isMember ? <MemberNavLinks /> : <PublicNavLinks />}
        </div>

        {/* Right section with auth buttons */}
        <div className='w-40 shrink-0 text-right'>
          <AuthButtons />
        </div>

        {/* Mobile Menu */}
        <div className='md:hidden'>
          <MobileMenu
            isOpen={isOpen}
            setIsOpenAction={setIsOpen}
            isMember={isMember}
          />
        </div>
      </div>

      {/* Fading divider that only shows when scrolled */}
      {isScrolled && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <FadingDivider opacity={0.04} />
        </motion.div>
      )}
    </motion.header>
  );
}
</file>

<file path="src/components/shared/navigation/PublicNavLinks.tsx">
'use client';

import Link from 'next/link';
import { cn } from '@/lib/utils';
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuList,
  NavigationMenuTrigger,
} from '@/components/ui/navigation-menu';
import { usePathname } from 'next/navigation';
import { motion } from 'motion/react';

const features = [
  {
    title: 'Knowledge Base',
    description:
      'Access our curated collection of articles, guides, and tutorials.',
    href: '/knowledge',
  },
  {
    title: 'Resource Library',
    description: 'Download templates, worksheets, and practical tools.',
    href: '/resources',
  },
  {
    title: 'Community',
    description: 'Connect with like-minded individuals and share experiences.',
    href: '/community',
  },
];

export function PublicNavLinks() {
  const pathname = usePathname();

  return (
    <nav className='flex items-center space-x-12'>
      <Link
        href='/about'
        className={cn(
          'group relative text-base font-medium tracking-wide text-zinc-400 transition-colors hover:text-white',
          pathname === '/about' && 'text-white'
        )}
      >
        <span>About</span>
        <span className='absolute bottom-0 left-1/2 h-[1px] w-0 bg-gradient-to-r from-transparent via-white to-transparent transition-all duration-300 group-hover:left-0 group-hover:w-full' />
      </Link>

      <NavigationMenu>
        <NavigationMenuList className='gap-0'>
          <NavigationMenuItem>
            <NavigationMenuTrigger
              className={cn(
                'group border-none bg-transparent px-0 py-0 text-base font-medium tracking-wide text-zinc-400 shadow-none transition-colors duration-200 hover:bg-transparent hover:text-white data-[state=open]:bg-transparent data-[state=open]:text-white',
                features.some((feature) => pathname === feature.href) &&
                  'text-white'
              )}
            >
              Features
            </NavigationMenuTrigger>
            <NavigationMenuContent className='duration-200 animate-in fade-in slide-in-from-top-5'>
              <motion.div
                className='grid w-[400px] gap-3 rounded-xl bg-zinc-900/90 p-4 backdrop-blur-sm md:w-[500px] md:grid-cols-2 lg:w-[600px]'
                initial={{ opacity: 0, y: -4 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -4 }}
                transition={{ duration: 0.2 }}
              >
                {features.map((feature) => (
                  <Link
                    key={feature.href}
                    href={feature.href}
                    className={cn(
                      'group block select-none space-y-1 rounded-lg p-3 leading-none no-underline outline-none transition-all duration-200',
                      pathname === feature.href
                        ? 'bg-zinc-800/50 text-white'
                        : 'text-zinc-400 hover:bg-zinc-800/30 hover:text-white'
                    )}
                  >
                    <div className='text-sm font-medium leading-none'>
                      {feature.title}
                    </div>
                    <p className='line-clamp-2 text-sm leading-snug opacity-70'>
                      {feature.description}
                    </p>
                  </Link>
                ))}
              </motion.div>
            </NavigationMenuContent>
          </NavigationMenuItem>
        </NavigationMenuList>
      </NavigationMenu>

      <Link
        href='/membership'
        className={cn(
          'group relative text-base font-medium tracking-wide text-zinc-400 transition-colors hover:text-white',
          pathname === '/membership' && 'text-white'
        )}
      >
        <span>Membership</span>
        <span className='absolute bottom-0 left-1/2 h-[1px] w-0 bg-gradient-to-r from-transparent via-white to-transparent transition-all duration-300 group-hover:left-0 group-hover:w-full' />
      </Link>
    </nav>
  );
}
</file>

<file path="src/components/shared/CTA.tsx">
'use client';

import Link from 'next/link';
import { Container } from '@/components/ui/container';
import { ShinyButton } from '@/components/ui/shiny-button';
import { motion } from 'motion/react';

interface CTAProps {
  headline: string;
  buttonText: string;
  subtext?: string;
}

export function CTA({ headline, buttonText, subtext }: CTAProps) {
  return (
    <div className='relative py-24 md:py-32'>
      {/* Angled gradient background that creates a dynamic transition */}
      <div className='absolute inset-0 overflow-hidden'>
        <div
          className='absolute inset-0 bg-gradient-to-br from-blue-900/20 via-background to-background'
          style={{ transform: 'skewY(-6deg)', transformOrigin: 'top left' }}
        />
      </div>

      {/* Floating orbs effect */}
      <div className='absolute inset-0 overflow-hidden'>
        <div className='absolute -left-20 top-1/4 h-72 w-72 rounded-full bg-blue-900/20 blur-3xl' />
        <div className='absolute -right-20 top-1/2 h-72 w-72 rounded-full bg-blue-800/10 blur-3xl' />
      </div>

      <Container className='relative'>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className='mx-auto max-w-3xl text-center'
        >
          <h2 className='font-heading text-[40px] tracking-tight'>
            <span className='gradient-text block font-semibold'>
              {headline}
            </span>
          </h2>
          <div className='mx-auto mt-6 h-px w-20 bg-gradient-to-r from-transparent via-blue-800/50 to-transparent' />
          {subtext && (
            <p className='mx-auto mt-6 text-lg leading-relaxed text-[#A1A1AA]'>
              {subtext}
            </p>
          )}

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className='mt-16'
          >
            <Link href='/register'>
              <ShinyButton className='text-lg font-medium tracking-widest'>
                {buttonText}
              </ShinyButton>
            </Link>
          </motion.div>
        </motion.div>
      </Container>
    </div>
  );
}
</file>

<file path="src/components/shared/Footer.tsx">
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { Container } from '@/components/ui/container';
import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

const footerLinks = [
  {
    title: 'Start Here',
    links: [
      { href: '/about', label: 'About' },
      { href: '/knowledge', label: 'Knowledge Base' },
      { href: '/resources', label: 'Tools & Resources' },
    ],
  },
  {
    title: 'Join Us',
    links: [
      { href: '/community', label: 'Community' },
      { href: '/register', label: 'Write Your Story' },
      { href: '/login', label: 'Sign In' },
    ],
  },
  {
    title: 'Legal',
    links: [
      { href: '/privacy', label: 'Privacy' },
      { href: '/terms', label: 'Terms' },
    ],
  },
];

const socialLinks = [
  {
    icon: (
      <svg width='24' height='24' viewBox='0 0 24 24' fill='currentColor'>
        <path d='M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z' />
      </svg>
    ),
    href: 'https://x.com/wyos',
    label: 'X',
  },
  {
    icon: (
      <svg width='24' height='24' viewBox='0 0 24 24' fill='currentColor'>
        <path d='M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z' />
      </svg>
    ),
    href: 'https://facebook.com/wyos',
    label: 'Facebook',
  },
  {
    icon: (
      <svg width='24' height='24' viewBox='0 0 24 24' fill='currentColor'>
        <path d='M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266-.058-1.644-.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z' />
      </svg>
    ),
    href: 'https://instagram.com/wyos',
    label: 'Instagram',
  },
];

export function Footer() {
  return (
    <footer className='relative'>
      {/* Premium gradient divider */}
      <div className='absolute inset-x-0 -top-px h-px'>
        <Container className='relative'>
          <div className='h-px w-full bg-gradient-to-r from-transparent via-zinc-800 to-transparent' />
          <div className='absolute inset-0 bg-[radial-gradient(closest-side,rgba(30,58,138,0.12),transparent)]' />
        </Container>
      </div>

      <Container className='relative'>
        <div className='grid grid-cols-1 gap-16 py-16 md:grid-cols-5'>
          {/* Logo and Social Section */}
          <div className='flex flex-col justify-between md:col-span-2'>
            <Link href='/' className='block'>
              <Image
                src='/images/logo300.svg'
                alt='WYOS Logo'
                width={300}
                height={160}
                className='h-auto w-[180px] md:w-[220px] lg:w-[260px]'
              />
            </Link>

            <div className='mt-4 flex items-center gap-8'>
              {socialLinks.map((social) => (
                <Link
                  key={social.label}
                  href={social.href}
                  className='group relative'
                  aria-label={social.label}
                >
                  <div className='absolute -inset-2 rounded-lg bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 blur transition-all duration-300 group-hover:opacity-100' />
                  <div className='relative text-zinc-400 transition-colors duration-200 hover:text-white'>
                    {social.icon}
                  </div>
                </Link>
              ))}
            </div>
          </div>

          {/* Links Sections */}
          <div className='grid grid-cols-3 gap-8 md:col-span-3'>
            {footerLinks.map((section) => (
              <div key={section.title} className='space-y-6'>
                <motion.p
                  initial={{ opacity: 0 }}
                  whileInView={{ opacity: 1 }}
                  className='text-xs font-medium uppercase tracking-widest text-zinc-500'
                >
                  {section.title}
                </motion.p>

                <div className='space-y-4'>
                  {section.links.map((link) => (
                    <motion.div
                      key={link.href}
                      initial={{ opacity: 0, x: -10 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      className='group'
                    >
                      <Link
                        href={link.href}
                        className={cn(
                          'text-sm text-zinc-400',
                          'transition-all duration-200',
                          'hover:text-white'
                        )}
                      >
                        {link.label}
                      </Link>
                    </motion.div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Bottom Bar */}
        <div className='relative flex flex-col items-center justify-between space-y-4 py-8 md:flex-row md:space-y-0'>
          <div className='absolute inset-x-0 top-0'>
            <div className='h-px w-full bg-gradient-to-r from-transparent via-zinc-800 to-transparent' />
          </div>
          <p className='text-xs text-zinc-500'>
            © {new Date().getFullYear()} WYOS. All rights reserved.
          </p>

          <div className='flex space-x-6'>
            <Link
              href='/privacy'
              className='text-xs text-zinc-500 hover:text-white'
            >
              Privacy Policy
            </Link>
            <Link
              href='/terms'
              className='text-xs text-zinc-500 hover:text-white'
            >
              Terms of Service
            </Link>
          </div>
        </div>
      </Container>
    </footer>
  );
}
</file>

<file path="src/components/shared/InfiniteGrid.tsx">
'use client';
import { Button } from '@/components/ui/atoms/button';
import { Loader2 } from 'lucide-react';

export function InfiniteGrid({
  children,
  hasMore,
  isFetching,
  fetchNextAction,
}: {
  children: React.ReactNode;
  hasMore?: boolean;
  isFetching: boolean;
  fetchNextAction: () => void;
}) {
  return (
    <div className='space-y-8'>
      <div className='grid gap-6 sm:grid-cols-2 lg:grid-cols-3'>{children}</div>

      {hasMore && (
        <div className='flex justify-center'>
          <Button
            onClick={fetchNextAction}
            disabled={isFetching}
            variant='outline'
            className='gap-2'
          >
            {isFetching ? <Loader2 className='h-4 w-4 animate-spin' /> : null}
            Load More
          </Button>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/shared/premium-card.tsx">
'use client';

import React from 'react';
import { cn } from '@/lib/utils';
import { Check } from 'lucide-react';

type PremiumCardVariant = 'feature' | 'pricing' | 'list-item';

interface PremiumCardProps
  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title'> {
  variant?: PremiumCardVariant;
  title?: React.ReactNode;
  description?: React.ReactNode;
  icon?: React.ReactNode;
  logos?: React.ReactNode[];
  price?: string;
  features?: string[];
  ctaText?: string;
  ctaAction?: () => void;
  overlineText?: string;
  period?: string;
}

const PremiumCard = React.forwardRef<HTMLDivElement, PremiumCardProps>(
  (
    {
      className,
      variant = 'feature',
      title,
      description,
      icon,
      logos,
      price,
      features,
      ctaText,
      ctaAction,
      overlineText,
      period = '/monthly',
      ...rest
    },
    ref
  ) => {
    const renderFeatureCard = () => {
      return (
        <div className='feature-card'>
          <div className='feature-card-content'>
            <div className='feature-heading'>
              <h3 className='mb-2 text-xl font-medium text-white'>{title}</h3>
              <p className='p-regular text-gray-400'>{description}</p>
            </div>

            {logos && logos.length > 0 ? (
              <div className='logo-loop'>
                <div className='logo-row'>
                  {logos.map((logo, index) => (
                    <div key={index} className='feature-logo'>
                      <div className='feature-icon'>{logo}</div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              icon && (
                <div className='logo-loop'>
                  <div className='logo-row'>
                    <div className='feature-logo'>
                      <div className='feature-icon'>{icon}</div>
                    </div>
                  </div>
                </div>
              )
            )}

            <div className='feature-overlay'></div>
            <div className='light-effect'></div>
          </div>
          <div className='linear-border'></div>
        </div>
      );
    };

    const renderPricingCard = () => {
      return (
        <div className='pricing-card'>
          <div className='pricing-content'>
            {overlineText && <div className='mb-16'>{overlineText}</div>}

            <div className='pricing-block'>
              <div className='monthly-price'>
                <h3 className='gradient-text font-heading text-5xl font-medium tracking-tight'>
                  {price}
                </h3>
                <span className='text-gray-400'>{period}</span>
              </div>

              <p className='mt-2 text-gray-400'>{description}</p>
            </div>

            {ctaText && (
              <div className='pricing-button-wrapper'>
                <button className='button-secondary w-full' onClick={ctaAction}>
                  {ctaText}
                </button>
              </div>
            )}

            {features && features.length > 0 && (
              <>
                <div className='pricing-divider'></div>
                <div className='pricing-features'>
                  {features.map((feature, index) => (
                    <div key={index} className='pricing-checklist-item'>
                      <Check className='check-icon text-blue-900' />
                      <span className='text-gray-400'>{feature}</span>
                    </div>
                  ))}
                </div>
              </>
            )}

            <div className='light-effect pricing-light-effect'></div>
          </div>
          <div className='linear-border'></div>
        </div>
      );
    };

    const renderListItemCard = () => {
      return (
        <div className='list-item-card'>
          <div className='list-card-content'>
            {icon && (
              <div className='list-card-icon'>
                <div className='feature-icon'>{icon}</div>
              </div>
            )}
            <h3 className='list-card-title'>{title}</h3>
            <p className='p-small text-gray-400'>{description}</p>

            <div className='light-effect list-light-effect'></div>
          </div>
          <div className='linear-border'></div>
        </div>
      );
    };

    return (
      <div
        ref={ref}
        className={cn('premium-card animate-card-entrance', className)}
        {...rest}
      >
        {variant === 'feature' && renderFeatureCard()}
        {variant === 'pricing' && renderPricingCard()}
        {variant === 'list-item' && renderListItemCard()}
      </div>
    );
  }
);

PremiumCard.displayName = 'PremiumCard';

export { PremiumCard, type PremiumCardProps };
</file>

<file path="src/components/shared/wyosIcon.tsx">
import Link from 'next/link';
import Image from 'next/image';

export function Icon() {
  return (
    <Link href='/' className='flex items-center'>
      <Image
        src='/images/icon60.svg'
        alt='WYOS Logo'
        width={60}
        height={60}
        className='h-10 w-10 object-contain transition-transform duration-200 hover:scale-105'
      />
    </Link>
  );
}
</file>

<file path="src/components/ui/atoms/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/atoms/badge.tsx">
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="src/components/ui/atoms/breadcrumb.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';
import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
    hasBackground?: boolean;
  }
>(({ className, hasBackground, ...props }, ref) => (
  <nav
    ref={ref}
    aria-label='breadcrumb'
    className={cn(
      'inline-flex items-center',
      hasBackground &&
        'rounded-md border border-zinc-700/30 bg-zinc-900/40 p-3 shadow-sm backdrop-blur-md',
      className
    )}
    {...props}
  />
));
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-xs text-zinc-400',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
    isIcon?: boolean;
  }
>(({ asChild, className, isIcon, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';
  return (
    <Comp
      ref={ref}
      className={cn(
        'relative text-zinc-100 transition-colors duration-200 ease-out',
        'hover:text-zinc-50 focus:outline-none focus:ring-2 focus:ring-white/50 focus:ring-offset-2 focus:ring-offset-transparent',
        'after:absolute after:bottom-0 after:left-0 after:h-[1px] after:w-full after:bg-gradient-to-r after:from-transparent after:via-white/50 after:to-transparent',
        'after:origin-center after:scale-x-0 after:transition-transform after:duration-200 hover:after:scale-x-100',
        isIcon && 'p-1',
        className
      )}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role='link'
    aria-disabled='true'
    aria-current='page'
    className={cn(
      'relative font-light text-zinc-50',
      'after:absolute after:bottom-0 after:left-0 after:h-[1px] after:w-full after:bg-gradient-to-r after:from-transparent after:via-white/50 after:to-transparent',
      className
    )}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role='presentation'
    aria-hidden='true'
    className={cn(
      'flex items-center text-zinc-500 [&>svg]:h-3 [&>svg]:w-3',
      className
    )}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role='presentation'
    aria-hidden='true'
    className={cn(
      'flex h-8 w-8 items-center justify-center text-zinc-400 transition-colors hover:text-zinc-50',
      className
    )}
    {...props}
  >
    <MoreHorizontal className='h-4 w-4' />
    <span className='sr-only'>More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbEllipsis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};
</file>

<file path="src/components/ui/atoms/button.tsx">
// src/components/ui/atoms/button.tsx
'use client';

import { Slot } from '@radix-ui/react-slot';
import { Tooltip } from '@radix-ui/react-tooltip';
import { cva, type VariantProps } from 'class-variance-authority';
import { Loader2 } from 'lucide-react';
import * as React from 'react';
import { motion, type MotionProps } from 'motion/react';
import {
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 transition-colors duration-200',
  {
    variants: {
      variant: {
        default:
          'bg-[var(--button-bg)] text-[var(--button-text)] hover:bg-[var(--button-hover)] shadow-inset-custom rounded-md',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-inset-custom rounded-md',
        outline:
          'border border-input bg-background hover:bg-secondary hover:text-secondary-foreground shadow-inset-custom rounded-md',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-inset-custom rounded-md',
        ghost:
          'bg-transparent text-muted-foreground hover:bg-muted/30 hover:text-foreground  rounded-md p-1', // Explicit overrides
        link: 'bg-transparent text-primary underline-offset-4 hover:underline hover:text-primary/80  rounded-md p-0 h-auto leading-none', // Explicit overrides
        glowingRing:
          'bg-[var(--button-bg)] text-[var(--button-text)] relative overflow-hidden ring-2 ring-primary/50 animate-glow shadow-inset-custom rounded-md',
        shimmer:
          'bg-gradient-to-r from-gray-600 via-gray-400 to-gray-600 bg-[length:200%_100%] bg-[var(--button-bg)] text-[var(--button-text)] animate-shimmer shadow-inset-custom rounded-md',
        perimeterShimmer:
          'bg-[var(--button-bg)] text-[var(--button-text)] relative overflow-hidden before:absolute before:inset-0 before:rounded-md before:border-2 before:border-accent/50 before:bg-transparent before:animate-perimeterShimmer shadow-inset-custom rounded-md',
        hoverGlow:
          'bg-gradient-to-b from-gray-700 to-gray-800 text-white border border-gray-600/40 backdrop-blur-sm shadow-sm rounded-md',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onDrag'>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  loading?: boolean;
  loadingText?: string;
  tooltipText?: string;
}

type MotionButtonProps = MotionProps &
  React.ButtonHTMLAttributes<HTMLButtonElement>;

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant,
      size,
      asChild = false,
      loading,
      loadingText = 'Processing...',
      tooltipText,
      children,
      ...props
    },
    ref
  ) => {
    const animationProps: MotionProps = {
      whileHover: {
        scale: 1.02,
        boxShadow:
          variant === 'hoverGlow'
            ? '0 0 5px rgba(255, 255, 255, 0.3), 0 0 10px rgba(255, 255, 255, 0.2)'
            : 'inset 0 -2px 0.5px rgba(0,0,0,0.4), inset 0 1px 0.5px rgba(255,255,255,0.16), inset 0 0 24px 6px rgba(156,160,171,0.2)',
      },
      whileTap: { scale: 0.98 },
      transition: {
        type: 'spring',
        stiffness: 400,
        damping: 20,
      },
    };

    const Comp = asChild ? Slot : motion.button;

    const content = (
      <motion.span
        key={loading ? 'loading' : 'content'}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.2 }}
        className='flex items-center space-x-2' // Explicit flex for inline alignment
      >
        {loading ? (
          size === 'icon' ? (
            <Loader2 className='h-4 w-4 animate-spin' />
          ) : (
            <>
              <span className='leading-none'>{loadingText}</span>
              <Loader2 className='h-4 w-4 animate-spin' />
            </>
          )
        ) : (
          children
        )}
      </motion.span>
    );

    return tooltipText ? (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Comp
              ref={ref}
              disabled={loading}
              className={cn(buttonVariants({ variant, size }), className)}
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              {...(asChild ? (props as any) : (props as MotionButtonProps))}
              {...(!loading ? animationProps : {})}
            >
              {content}
            </Comp>
          </TooltipTrigger>
          <TooltipContent>{tooltipText}</TooltipContent>
        </Tooltip>
      </TooltipProvider>
    ) : (
      <Comp
        ref={ref}
        disabled={loading}
        className={cn(buttonVariants({ variant, size }), className)}
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        {...(asChild ? (props as any) : (props as MotionButtonProps))}
        {...(!loading ? animationProps : {})}
      >
        {content}
      </Comp>
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };
</file>

<file path="src/components/ui/atoms/card.tsx">
'use client';

import * as React from 'react';
import { motion, type HTMLMotionProps } from 'motion/react';
import { cn } from '@/lib/utils';

const cardVariants = {
  default:
    'bg-gradient-to-br from-neutral-700 to-neutral-800 text-white shadow-[4px_4px_15px_rgba(0,0,0,0.3),-4px_-4px_15px_rgba(255,255,255,0.1)] border border-neutral-600',
  glass:
    'bg-white/5 backdrop-blur-md shadow-[4px_4px_15px_rgba(0,0,0,0.3),-4px_-4px_15px_rgba(255,255,255,0.05)] border border-white/10',
};

interface CardProps extends HTMLMotionProps<'div'> {
  variant?: 'default' | 'glass';
}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant = 'default', ...props }, ref) => (
    <motion.div
      ref={ref}
      className={cn(
        'overflow-hidden rounded-lg transition-all duration-300',
        cardVariants[variant],
        className
      )}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{
        scale: 1.02,
        transition: { type: 'spring', stiffness: 300, damping: 20 },
      }}
      transition={{ type: 'spring', stiffness: 200, damping: 20 }}
      {...props}
    />
  )
);
Card.displayName = 'Card';

// Subcomponents with neomorphic styling
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-2 p-4', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-tight tracking-tight text-white',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm leading-relaxed text-neutral-300', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-4 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'flex items-center justify-end space-x-4 p-4 pt-0',
      className
    )}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="src/components/ui/atoms/checkbox.tsx">
'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, ...props }, ref) => {
  return (
    <input
      type='checkbox'
      ref={ref}
      className={cn(
        'border-1 relative box-border block h-[1.5rem] w-[1.5rem] cursor-pointer appearance-none rounded-md border-[#d9d9d9] bg-slate-200 transition-all duration-300',
        'before:absolute before:left-2/4 before:top-[42%] before:h-[10px] before:w-[6px]',
        'before:-translate-x-2/4 before:-translate-y-2/4 before:rotate-45 before:scale-0',
        'before:border-b-2 before:border-r-2 before:border-solid before:border-b-white before:border-r-white',
        "before:opacity-0 before:transition-all before:delay-100 before:duration-100 before:ease-in before:content-['']",
        'after:absolute after:inset-0 after:rounded-[7px] after:opacity-0',
        "after:shadow-[0_0_0_calc(30px_/_2.5)_#1677ff] after:transition-all after:duration-500 after:ease-in after:content-['']",
        'checked:border-transparent checked:bg-[#1677ff]',
        'checked:before:-translate-x-2/4 checked:before:-translate-y-2/4',
        'checked:before:rotate-45 checked:before:scale-x-[1.4] checked:before:scale-y-[1.4]',
        'checked:before:opacity-100 checked:before:transition-all checked:before:delay-100 checked:before:duration-200',
        'hover:border-[#1677ff] focus:outline-[#1677ff]',
        '[&:active:not(:checked)]:after:opacity-100 [&:active:not(:checked)]:after:shadow-none [&:active:not(:checked)]:after:transition-none',
        className
      )}
      {...props}
    />
  );
});
Checkbox.displayName = 'Checkbox';

const GradientCheckbox = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, ...props }, ref) => {
  return (
    <label className='relative block cursor-pointer select-none rounded-md text-3xl outline-2 outline-offset-1 outline-gray-700 has-[:focus-visible]:outline'>
      <input
        ref={ref}
        type='checkbox'
        className='peer absolute opacity-0'
        {...props}
      />
      <div
        className={cn(
          'relative left-0 top-0 h-[1.6rem] w-[1.6rem] rounded-[0.3em] bg-white transition-all duration-300',
          'after:absolute after:left-0 after:top-0 after:h-[1.6rem] after:w-[1.6rem]',
          'after:rotate-0 after:rounded-[0.3em] after:border-[2px] after:border-[rgba(0,0,0,0.863)]',
          "after:transition-all after:delay-100 after:duration-300 after:content-['']",
          'peer-checked:bg-black',
          'peer-checked:shadow-[-13px_-13px_40px_0px_rgb(17,0,248),13px_-0_40px_0px_rgb(243,11,243),13px_-13px_40px_0px_rgb(253,228,0),13px_0_40px_0px_rgb(107,255,21),13px_13px_40px_0px_rgb(76,0,255),13px_13px_40px_0px_rgb(255,196,0),-13px_13px_40px_0px_rgb(90,105,240)]',
          'peer-checked:after:left-2 peer-checked:after:top-[1px] peer-checked:after:h-[0.6em]',
          'peer-checked:after:w-[0.35em] peer-checked:after:rotate-45 peer-checked:after:rounded-[0em]',
          'peer-checked:after:border-b-[0.1em] peer-checked:after:border-r-[0.1em]',
          'peer-checked:after:border-[rgba(238,238,238,0)_white_white_#fff0]',
          'dark:bg-black dark:after:border-[rgba(255,255,255,0.863)]',
          'dark:peer-checked:bg-white dark:peer-checked:after:border-[rgba(238,238,238,0)_black_black_#fff0]',
          className
        )}
      />
    </label>
  );
});
GradientCheckbox.displayName = 'GradientCheckbox';

const TransformerCheckbox = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, ...props }, ref) => {
  return (
    <label className='relative block h-[1.5rem] w-[1.5rem] cursor-pointer rounded-sm outline-2 outline-offset-1 outline-gray-700 has-[:focus-visible]:outline'>
      <input
        ref={ref}
        type='checkbox'
        className='peer absolute h-0 w-0 opacity-0'
        {...props}
      />
      <span
        className={cn(
          'block h-[inherit] w-[inherit] rounded-md border-[2px] border-black transition-all duration-300',
          'peer-checked:ml-1 peer-checked:h-5 peer-checked:w-3',
          'peer-checked:translate-x-[2px] peer-checked:translate-y-[-1px]',
          'peer-checked:rotate-45 peer-checked:rounded-none',
          'peer-checked:border-b-[2px] peer-checked:border-l-transparent peer-checked:border-t-transparent',
          'dark:border-white',
          className
        )}
      />
    </label>
  );
});
TransformerCheckbox.displayName = 'TransformerCheckbox';

const AnimatedCheckbox = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, ...props }, ref) => {
  return (
    <label className='relative block cursor-pointer select-none rounded-full text-2xl outline-2 outline-offset-1 outline-[#0b6e4f] has-[:checked]:rounded-md has-[:focus-visible]:outline'>
      <input
        ref={ref}
        type='checkbox'
        className='peer absolute h-0 w-0 opacity-0'
        {...props}
      />
      <div
        className={cn(
          'relative left-0 top-0 h-[1.5rem] w-[1.5rem] rounded-[50%] bg-slate-200 transition duration-300',
          'after:absolute after:left-[0.5rem] after:top-1 after:hidden after:h-[0.8rem] after:w-[0.5rem]',
          "after:rotate-45 after:border-b-[0.2rem] after:border-r-[0.2rem] after:content-['']",
          'focus:outline-[#0b6e4f]',
          'peer-checked:animate-pulse peer-checked:rounded-lg peer-checked:bg-[#0b6e4f] peer-checked:after:block',
          className
        )}
      />
    </label>
  );
});
AnimatedCheckbox.displayName = 'AnimatedCheckbox';

export { Checkbox, GradientCheckbox, TransformerCheckbox, AnimatedCheckbox };
</file>

<file path="src/components/ui/atoms/icon.tsx">
import * as React from 'react';
import type { LucideProps } from 'lucide-react';
import { cn } from '@/lib/utils';

interface IconProps {
  name: React.ComponentType<LucideProps>;
  size?: 'sm' | 'md' | 'lg' | number;
  color?: string;
  className?: string;
  strokeWidth?: LucideProps['strokeWidth'];
  absoluteStrokeWidth?: LucideProps['absoluteStrokeWidth'];
  stroke?: LucideProps['stroke'];
  fill?: LucideProps['fill'];
}

const sizeMap = {
  sm: 16,
  md: 24,
  lg: 32,
};

export const Icon = React.forwardRef<SVGSVGElement, IconProps>(
  (
    {
      name: IconComponent,
      size = 'md',
      color = 'currentColor',
      className,
      ...props
    },
    ref
  ) => {
    const iconSize = typeof size === 'number' ? size : sizeMap[size];

    return (
      <IconComponent
        ref={ref}
        className={cn('inline-block', className)}
        width={iconSize}
        height={iconSize}
        color={color}
        {...props}
      />
    );
  }
);

Icon.displayName = 'Icon';
</file>

<file path="src/components/ui/atoms/input.tsx">
'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  showFocusRing?: boolean; // New optional prop
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    { className, type, label, error, id, showFocusRing = false, ...props },
    ref
  ) => {
    const generatedId = React.useId();
    const inputId = id || generatedId;

    if (label) {
      return (
        <div className='group relative w-full'>
          <label
            htmlFor={inputId}
            className={cn(
              'origin-start absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm',
              'text-muted-foreground/70 transition-all',
              'group-focus-within:pointer-events-none group-focus-within:top-0',
              'group-focus-within:cursor-default group-focus-within:text-xs',
              'group-focus-within:font-medium group-focus-within:text-foreground',
              'has-[+input:not(:placeholder-shown)]:pointer-events-none',
              'has-[+input:not(:placeholder-shown)]:top-0',
              'has-[+input:not(:placeholder-shown)]:cursor-default',
              'has-[+input:not(:placeholder-shown)]:text-xs',
              'has-[+input:not(:placeholder-shown)]:font-medium',
              'has-[+input:not(:placeholder-shown)]:text-foreground',
              error && 'text-destructive'
            )}
          >
            <span className='inline-flex bg-background px-2'>{label}</span>
          </label>
          <input
            type={type}
            className={cn(
              'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
              showFocusRing
                ? 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2'
                : 'focus:outline-none focus-visible:outline-none focus-visible:ring-0',
              error && 'border-destructive',
              className
            )}
            ref={ref}
            id={inputId}
            placeholder=''
            aria-describedby={error ? `${inputId}-error` : undefined}
            {...props}
          />
          {error && (
            <span
              id={`${inputId}-error`}
              className='mt-1 text-xs text-destructive'
            >
              {error}
            </span>
          )}
        </div>
      );
    }

    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
          showFocusRing
            ? 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2'
            : 'focus:outline-none focus-visible:outline-none focus-visible:ring-0',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };
</file>

<file path="src/components/ui/atoms/label.tsx">
// src/components/ui/atoms/label.tsx
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';
import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-tight peer-disabled:cursor-not-allowed peer-disabled:opacity-60 transition-all duration-200 bg-gradient-to-r from-foreground/90 to-foreground inline-block bg-clip-text text-transparent',
  {
    variants: {
      variant: {
        default: '',
        required:
          'after:content-["*"] after:ml-1 after:text-transparent after:bg-gradient-to-r after:from-red-400 after:to-red-600 after:bg-clip-text',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface LabelProps
  extends React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>,
    VariantProps<typeof labelVariants> {
  required?: boolean;
}

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  LabelProps
>(({ className, variant, required, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    asChild
    className={cn(
      labelVariants({ variant: required ? 'required' : variant }),
      className
    )}
    {...props}
  >
    <motion.span
      whileHover={{ scale: 1.02 }}
      transition={{ type: 'spring', stiffness: 400, damping: 20 }}
    >
      {props.children}
    </motion.span>
  </LabelPrimitive.Root>
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/atoms/radio-group.tsx">
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';
import { cn } from '@/lib/utils';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-3', className)}
      ref={ref}
      {...props}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'relative h-5 w-5 rounded-full border border-zinc-700/50 bg-zinc-900/40',
        'text-blue-600 shadow-sm transition-all duration-200 ease-out',
        'hover:border-zinc-600 hover:shadow-md focus:outline-none',
        'focus-visible:ring-2 focus-visible:ring-blue-500/50 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900',
        'disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className='flex items-center justify-center'>
        <Circle className='h-2.5 w-2.5 fill-current text-current' />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
</file>

<file path="src/components/ui/atoms/select.tsx">
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className='h-4 w-4 opacity-50' />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className='h-4 w-4' />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className='h-4 w-4' />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className='absolute left-2 flex h-3.5 w-3.5 items-center justify-center'>
      <SelectPrimitive.ItemIndicator>
        <Check className='h-4 w-4' />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="src/components/ui/atoms/skeleton.tsx">
import { cn } from '@/lib/utils';

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-md bg-zinc-800/40',
        'before:absolute before:inset-0 before:bg-gradient-to-r before:from-zinc-800/40 before:via-zinc-700/50 before:to-zinc-800/40',
        'before:animate-shimmer before:bg-[length:200%_100%]',
        className
      )}
      {...props}
    />
  );
}

export { Skeleton };
</file>

<file path="src/components/ui/atoms/spinner.tsx">
import { cn } from '@/lib/utils';
import {
  LoaderCircleIcon,
  LoaderIcon,
  LoaderPinwheelIcon,
  type LucideProps,
} from 'lucide-react';

type SpinnerVariantProps = Omit<SpinnerProps, 'variant'>;

const Default = ({ className, ...props }: SpinnerVariantProps) => (
  <LoaderIcon className={cn('animate-spin', className)} {...props} />
);

const Circle = ({ className, ...props }: SpinnerVariantProps) => (
  <LoaderCircleIcon className={cn('animate-spin', className)} {...props} />
);

const Pinwheel = ({ className, ...props }: SpinnerVariantProps) => (
  <LoaderPinwheelIcon className={cn('animate-spin', className)} {...props} />
);

const CircleFilled = ({
  className,
  size = 24,
  ...props
}: SpinnerVariantProps) => (
  <div className='relative' style={{ width: size, height: size }}>
    <div className='absolute inset-0 rotate-180'>
      <LoaderCircleIcon
        className={cn('animate-spin', className, 'text-foreground opacity-20')}
        size={size}
        {...props}
      />
    </div>
    <LoaderCircleIcon
      className={cn('relative animate-spin', className)}
      size={size}
      {...props}
    />
  </div>
);

const Ellipsis = ({ size = 24, ...props }: SpinnerVariantProps) => {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width={size}
      height={size}
      viewBox='0 0 24 24'
      {...props}
    >
      <title>Loading...</title>
      <circle cx='4' cy='12' r='2' fill='currentColor'>
        <animate
          id='ellipsis1'
          begin='0;ellipsis3.end+0.25s'
          attributeName='cy'
          calcMode='spline'
          dur='0.6s'
          values='12;6;12'
          keySplines='.33,.66,.66,1;.33,0,.66,.33'
        />
      </circle>
      <circle cx='12' cy='12' r='2' fill='currentColor'>
        <animate
          begin='ellipsis1.begin+0.1s'
          attributeName='cy'
          calcMode='spline'
          dur='0.6s'
          values='12;6;12'
          keySplines='.33,.66,.66,1;.33,0,.66,.33'
        />
      </circle>
      <circle cx='20' cy='12' r='2' fill='currentColor'>
        <animate
          id='ellipsis3'
          begin='ellipsis1.begin+0.2s'
          attributeName='cy'
          calcMode='spline'
          dur='0.6s'
          values='12;6;12'
          keySplines='.33,.66,.66,1;.33,0,.66,.33'
        />
      </circle>
    </svg>
  );
};

const Ring = ({ size = 24, ...props }: SpinnerVariantProps) => (
  <svg
    xmlns='http://www.w3.org/2000/svg'
    width={size}
    height={size}
    viewBox='0 0 44 44'
    stroke='currentColor'
    {...props}
  >
    <title>Loading...</title>
    <g fill='none' fillRule='evenodd' strokeWidth='2'>
      <circle cx='22' cy='22' r='1'>
        <animate
          attributeName='r'
          begin='0s'
          dur='1.8s'
          values='1; 20'
          calcMode='spline'
          keyTimes='0; 1'
          keySplines='0.165, 0.84, 0.44, 1'
          repeatCount='indefinite'
        />
        <animate
          attributeName='stroke-opacity'
          begin='0s'
          dur='1.8s'
          values='1; 0'
          calcMode='spline'
          keyTimes='0; 1'
          keySplines='0.3, 0.61, 0.355, 1'
          repeatCount='indefinite'
        />
      </circle>
      <circle cx='22' cy='22' r='1'>
        <animate
          attributeName='r'
          begin='-0.9s'
          dur='1.8s'
          values='1; 20'
          calcMode='spline'
          keyTimes='0; 1'
          keySplines='0.165, 0.84, 0.44, 1'
          repeatCount='indefinite'
        />
        <animate
          attributeName='stroke-opacity'
          begin='-0.9s'
          dur='1.8s'
          values='1; 0'
          calcMode='spline'
          keyTimes='0; 1'
          keySplines='0.3, 0.61, 0.355, 1'
          repeatCount='indefinite'
        />
      </circle>
    </g>
  </svg>
);

const Bars = ({ size = 24, ...props }: SpinnerVariantProps) => (
  <svg
    xmlns='http://www.w3.org/2000/svg'
    width={size}
    height={size}
    viewBox='0 0 24 24'
    {...props}
  >
    <title>Loading...</title>
    <style>{`
      .spinner-bar {
        animation: spinner-bars-animation .8s linear infinite;
        animation-delay: -.8s;
      }
      .spinner-bars-2 {
        animation-delay: -.65s;
      }
      .spinner-bars-3 {
        animation-delay: -0.5s;
      }
      @keyframes spinner-bars-animation {
        0% {
          y: 1px;
          height: 22px;
        }
        93.75% {
          y: 5px;
          height: 14px;
          opacity: 0.2;
        }
      }
    `}</style>
    <rect
      className='spinner-bar'
      x='1'
      y='1'
      width='6'
      height='22'
      fill='currentColor'
    />
    <rect
      className='spinner-bar spinner-bars-2'
      x='9'
      y='1'
      width='6'
      height='22'
      fill='currentColor'
    />
    <rect
      className='spinner-bar spinner-bars-3'
      x='17'
      y='1'
      width='6'
      height='22'
      fill='currentColor'
    />
  </svg>
);

const Infinite = ({ size = 24, ...props }: SpinnerVariantProps) => (
  <svg
    xmlns='http://www.w3.org/2000/svg'
    width={size}
    height={size}
    viewBox='0 0 100 100'
    preserveAspectRatio='xMidYMid'
    {...props}
  >
    <title>Loading...</title>
    <path
      fill='none'
      stroke='currentColor'
      strokeWidth='10'
      strokeDasharray='205.271142578125 51.317785644531256'
      d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z'
      strokeLinecap='round'
      style={{
        transform: 'scale(0.8)',
        transformOrigin: '50px 50px',
      }}
    >
      <animate
        attributeName='stroke-dashoffset'
        repeatCount='indefinite'
        dur='2s'
        keyTimes='0;1'
        values='0;256.58892822265625'
      />
    </path>
  </svg>
);

export type SpinnerProps = LucideProps & {
  variant?:
    | 'default'
    | 'circle'
    | 'pinwheel'
    | 'circle-filled'
    | 'ellipsis'
    | 'ring'
    | 'bars'
    | 'infinite';
};

export const Spinner = ({ variant, ...props }: SpinnerProps) => {
  switch (variant) {
    case 'circle':
      return <Circle {...props} />;
    case 'pinwheel':
      return <Pinwheel {...props} />;
    case 'circle-filled':
      return <CircleFilled {...props} />;
    case 'ellipsis':
      return <Ellipsis {...props} />;
    case 'ring':
      return <Ring {...props} />;
    case 'bars':
      return <Bars {...props} />;
    case 'infinite':
      return <Infinite {...props} />;
    default:
      return <Default {...props} />;
  }
};
</file>

<file path="src/components/ui/atoms/star-rating.tsx">
import type { LucideIcon, LucideProps } from 'lucide-react';
import { StarIcon } from 'lucide-react';
import type { Dispatch, SetStateAction } from 'react';
import type React from 'react';

import { cn } from '@/lib/utils';

interface StarWrapperProps {
  value?: number;
  setValue?: Dispatch<SetStateAction<number>>;
  numStars?: number;
  icon?: LucideIcon;
  disabled?: boolean;
  wrapperProps?: React.HTMLAttributes<HTMLDivElement>;
  iconProps?: LucideProps;
  showcase?: boolean;
}

function StarRating({
  numStars = 5,
  icon,
  setValue,
  value = 0,
  disabled,
  showcase,
  iconProps = {},
  wrapperProps = {},
}: StarWrapperProps) {
  const { className: wrapperClassName, ...restWrapperProps } = wrapperProps;
  const { className: iconClassName, ...restIconProps } = iconProps;
  const IconComponent = icon;

  return (
    <div
      className={cn('flex items-center gap-1', wrapperClassName)}
      {...restWrapperProps}
    >
      {Array.from({ length: numStars }, (_, i) => {
        const isRated = value !== undefined && i < value;
        const styledIconProps: LucideProps = {
          onMouseEnter: () => {
            if (!showcase && !disabled && setValue) {
              setValue(i + 1);
            }
          },
          className: cn(
            'fill-primary stroke-primary size-5',
            {
              'opacity-50 pointer-events-none': disabled,
              'transition-transform duration-300 hover:scale-110':
                !disabled && !showcase,
              '!fill-muted !stroke-muted': !isRated,
            },
            iconClassName
          ),
          ...restIconProps,
        };
        return (
          <div key={i}>
            {IconComponent ? (
              <IconComponent {...styledIconProps} />
            ) : (
              <StarIcon {...styledIconProps} />
            )}
          </div>
        );
      })}
    </div>
  );
}

export { StarRating };
</file>

<file path="src/components/ui/atoms/tabs.tsx">
// components/ui/atoms/tabs.tsx
'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';
import { cn } from '@/lib/utils';

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center rounded-lg border border-zinc-700/30 bg-zinc-900/30 p-1.5 shadow-sm',
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'relative rounded-md px-4 py-2 text-sm font-medium text-zinc-100 transition-all duration-200 ease-out',
      'hover:bg-zinc-800/50 hover:text-zinc-50',
      'focus:outline-none focus:ring-1 focus:ring-white/20 focus:ring-offset-0',
      'data-[state=active]:bg-zinc-800/50 data-[state=active]:text-zinc-50 data-[state=active]:shadow-sm',
      'disabled:pointer-events-none disabled:text-zinc-500 disabled:opacity-40',
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-4 rounded-lg bg-zinc-900/20 p-4 text-zinc-100 shadow-sm',
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="src/components/ui/atoms/textarea.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  hasError?: boolean;
  animatedLabel?: boolean;
  autoGrow?: boolean;
  label?: string;
}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, hasError, animatedLabel, autoGrow, label, ...props }, ref) => {
    const textareaRef = React.useRef<HTMLTextAreaElement>(null);
    const [isFocused, setIsFocused] = React.useState(false);

    React.useEffect(() => {
      if (autoGrow && textareaRef.current) {
        const adjustHeight = () => {
          const textarea = textareaRef.current;
          if (textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = `${textarea.scrollHeight}px`;
          }
        };
        textareaRef.current.addEventListener('input', adjustHeight);
        return () =>
          textareaRef.current?.removeEventListener('input', adjustHeight);
      }
    }, [autoGrow]);

    const textareaClassName = cn(
      'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
      hasError && 'border-destructive focus-visible:ring-destructive',
      autoGrow && 'resize-none',
      animatedLabel && 'pt-6',
      className
    );

    return (
      <div className={cn('relative', animatedLabel && 'group')}>
        {animatedLabel && label && (
          <label
            className={cn(
              'absolute left-3 top-2 text-sm transition-all duration-200',
              isFocused || (textareaRef.current && textareaRef.current.value)
                ? 'top-1 text-xs text-primary'
                : 'text-muted-foreground'
            )}
          >
            {label}
          </label>
        )}
        <textarea
          className={textareaClassName}
          ref={(node) => {
            if (typeof ref === 'function') {
              ref(node);
            } else if (ref) {
              ref.current = node;
            }
            textareaRef.current = node;
          }}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          {...props}
        />
      </div>
    );
  }
);

Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="src/components/ui/atoms/toast.tsx">
// src/components/ui/atoms/toast.tsx
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { CheckCircle, AlertTriangle, Info, X } from 'lucide-react';
import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed bottom-8 left-8 z-[100] flex max-h-screen w-full flex-col gap-6 md:max-w-[450px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group relative flex w-full flex-col gap-4 overflow-hidden rounded-2xl border border-l-4 p-6 shadow-[0_12px_48px_rgba(0,0,0,0.5)] backdrop-blur-xl transition-all duration-400 ease-out data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none',
  {
    variants: {
      variant: {
        default:
          'text-zinc-100 border-l-primary/50 bg-gradient-to-br from-zinc-900/80 to-blue-900/40 [--progress-color-from:hsl(var(--primary))] [--progress-color-to:hsl(var(--primary))/0.3]',
        destructive:
          'text-zinc-100 border-l-destructive/50 bg-gradient-to-br from-zinc-900/80 to-red-900/40 [--progress-color-from:hsl(var(--destructive))] [--progress-color-to:hsl(var(--destructive))/0.3]',
        success:
          'text-zinc-100 border-l-[hsl(var(--chart-1))/0.5] bg-gradient-to-br from-zinc-900/80 to-emerald-900/40 [--progress-color-from:hsl(var(--chart-1))] [--progress-color-to:hsl(var(--chart-1))/0.3]',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants> & { progress?: number }
>(({ className, variant, progress = 1, ...props }, ref) => {
  const Icon =
    variant === 'success'
      ? CheckCircle
      : variant === 'destructive'
        ? AlertTriangle
        : Info;

  return (
    <ToastPrimitives.Root
      ref={ref}
      asChild
      className={cn(toastVariants({ variant }), className)}
      {...props}
    >
      <motion.div
        initial={{ opacity: 0, y: 80 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, x: 150 }}
        transition={{ duration: 0.5, ease: 'easeOut' }}
      >
        <div className='flex flex-col gap-3'>
          <div className='flex items-start gap-3'>
            <Icon className='mt-0.5 h-5 w-5 flex-shrink-0' />
            <div className='flex-1'>{props.children}</div>
          </div>
        </div>
        <motion.div
          className='absolute bottom-0 left-0 h-1.5 rounded-b-2xl bg-gradient-to-r from-[var(--progress-color-from)] to-[var(--progress-color-to)]'
          initial={{ width: '100%' }}
          animate={{ width: `${progress * 100}%` }}
          transition={{ duration: 0.1, ease: 'linear' }}
        />
      </motion.div>
    </ToastPrimitives.Root>
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    asChild
    className={cn(
      'mt-3 inline-flex h-10 w-full items-center justify-center rounded-lg bg-gradient-to-b from-zinc-800/80 to-zinc-700/60 px-5 py-2.5 text-sm font-medium text-zinc-100 shadow-inset-custom transition-all duration-200 hover:bg-zinc-700/80 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 focus:ring-offset-transparent',
      className
    )}
    {...props}
  >
    <motion.button
      whileHover={{ scale: 1.03 }}
      whileTap={{ scale: 0.97 }}
      transition={{ duration: 0.2 }}
    >
      {props.children}
    </motion.button>
  </ToastPrimitives.Action>
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    asChild
    className={cn(
      'absolute right-4 top-4 rounded-full p-2 text-zinc-400 transition-all duration-200 hover:bg-zinc-800/80 hover:text-zinc-100 focus:outline-none focus:ring-2 focus:ring-primary/50',
      className
    )}
    toast-close=''
    {...props}
  >
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      transition={{ duration: 0.2 }}
    >
      <X className='h-4 w-4' />
    </motion.button>
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-base font-medium text-zinc-100', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm leading-relaxed text-zinc-300', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;
type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="src/components/ui/atoms/toggle.tsx">
// src/components/ui/atoms/toggle.tsx
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 gap-2 backdrop-blur-sm',
  {
    variants: {
      variant: {
        default:
          'bg-gradient-to-b from-zinc-800/70 to-zinc-900/70 border border-zinc-700/30 hover:bg-gradient-to-b hover:from-zinc-700/70 hover:to-zinc-800/70 data-[state=on]:bg-gradient-to-b data-[state=on]:from-primary/50 data-[state=on]:to-primary/30 data-[state=on]:border-primary/40 data-[state=on]:text-primary-foreground data-[state=on]:shadow-[0_0_8px_rgba(var(--primary),0.3)]',
        outline:
          'border border-zinc-600/40 bg-transparent hover:bg-zinc-800/20 data-[state=on]:bg-transparent data-[state=on]:border-primary/50 data-[state=on]:hover:bg-primary/10 data-[state=on]:shadow-[0_0_8px_rgba(var(--primary),0.3)]',
      },
      size: {
        default: 'h-10 px-3 min-w-10',
        sm: 'h-9 px-2.5 min-w-9',
        lg: 'h-11 px-5 min-w-11',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    asChild
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  >
    <motion.button
      whileHover={{ scale: 1.03 }}
      whileTap={{ scale: 0.97 }}
      transition={{ type: 'spring', stiffness: 300, damping: 20 }}
    >
      {props.children}
    </motion.button>
  </TogglePrimitive.Root>
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
</file>

<file path="src/components/ui/molecules/accordion.tsx">
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';
import { cn } from '@/lib/utils';

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(
      'relative overflow-hidden rounded-xl border-none bg-gradient-to-b from-[rgba(31,33,40,0.7)] to-[rgba(31,33,40,0.3)]',
      'shadow-[inset_0_1px_2px_rgba(255,255,255,0.05),0_2px_4px_rgba(0,0,0,0.1)]',
      'transition-all duration-300 ease-in-out',
      className
    )}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className='flex'>
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between px-6 py-5 font-heading text-lg text-foreground',
        'transition-colors duration-200',
        '[&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className='h-5 w-5 shrink-0 text-muted-foreground transition-transform duration-300 ease-in-out' />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      'overflow-hidden text-sm text-muted-foreground transition-all',
      'data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',
      className
    )}
    {...props}
  >
    <div className='px-6 py-4'>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
</file>

<file path="src/components/ui/molecules/AuthButtons.tsx">
'use client';

import { Button } from '@/components/ui/atoms/button';
import { LogOut, User } from 'lucide-react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/Auth';
import { cn } from '@/lib/utils';

interface AuthButtonsProps {
  mobile?: boolean;
  onAction?: () => void;
}

export function AuthButtons({
  mobile = false,
  onAction = () => {},
}: AuthButtonsProps) {
  const { session, user, logout } = useAuthStore();
  const router = useRouter();

  const handleLogout = async () => {
    await logout();
    onAction();
    router.push('/');
  };

  const baseButtonStyles =
    'bg-gradient-to-b from-[hsl(var(--muted))/0.8] to-[hsl(var(--background))] glass-effect text-foreground font-thin tracking-wide shadow-[0_2px_6px_rgba(0,0,0,0.1)] hover:shadow-[0_4px_8px_rgba(0,0,0,0.2)] hover-glow transition-all duration-200 rounded-md px-4 py-2';

  const containerStyles = mobile
    ? 'flex flex-col gap-2 pt-2'
    : 'flex items-center gap-2';

  if (session) {
    return (
      <div className={containerStyles}>
        <Button
          variant='ghost'
          className={cn(
            baseButtonStyles,
            mobile ? 'w-full justify-center' : 'w-auto'
          )}
        >
          <User className='mr-2 h-4 w-4' />
          <span>{user?.name}</span>
        </Button>
        <Button
          variant='ghost'
          onClick={handleLogout}
          className={cn(
            baseButtonStyles,
            mobile ? 'w-full justify-center' : 'w-auto'
          )}
        >
          <LogOut className='mr-2 h-4 w-4' />
          <span>Logout</span>
        </Button>
      </div>
    );
  }

  return (
    <div className={containerStyles}>
      <Link href='/login' onClick={mobile ? onAction : undefined}>
        <Button
          variant='ghost'
          className={cn(baseButtonStyles, mobile ? 'w-full' : 'w-auto')}
        >
          Login
        </Button>
      </Link>
      <Link href='/register' onClick={mobile ? onAction : undefined}>
        <Button className={cn(baseButtonStyles, mobile ? 'w-full' : 'w-auto')}>
          Get Started
        </Button>
      </Link>
    </div>
  );
}
</file>

<file path="src/components/ui/molecules/AuthFields.tsx">
'use client';

import { motion } from 'motion/react';
import { InputAnimation } from '@/components/ui/input-with-label-animation';
import { cn } from '@/lib/utils';

interface AuthFieldsProps {
  type: 'login' | 'register';
  isLoading: boolean;
}

export function AuthFields({ type, isLoading }: AuthFieldsProps) {
  const baseInputClasses = cn(
    'bg-[rgba(255,255,255,0.05)] backdrop-blur-sm', // Glass-like background
    'border border-[rgba(255,255,255,0.1)] focus:border-[hsl(var(--primary))] focus:ring-2 focus:ring-[hsl(var(--ring))]', // Subtle border with theme focus
    'placeholder:text-muted-foreground text-foreground', // Theme-consistent text
    'shadow-inset-custom rounded-md p-3', // Skeuomorphic inset shadow
    'transition-all duration-300', // Smooth transitions
    'disabled:opacity-50' // Disabled state
  );

  const fields =
    type === 'login'
      ? [
          {
            label: 'Email',
            name: 'email',
            type: 'email',
            required: true,
            autoComplete: 'email',
          },
          {
            label: 'Password',
            name: 'password',
            type: 'password',
            required: true,
            autoComplete: 'current-password',
          },
        ]
      : [
          {
            label: 'First Name',
            name: 'firstname',
            type: 'text',
            required: true,
            autoComplete: 'given-name',
          },
          {
            label: 'Last Name',
            name: 'lastname',
            type: 'text',
            required: true,
            autoComplete: 'family-name',
          },
          {
            label: 'Email',
            name: 'email',
            type: 'email',
            required: true,
            autoComplete: 'email',
          },
          {
            label: 'Password',
            name: 'password',
            type: 'password',
            required: true,
            autoComplete: 'new-password',
          },
        ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6, ease: 'easeOut' }}
      className={cn('space-y-6', type === 'register' && 'max-w-lg')}
    >
      {type === 'register' && (
        <div className='grid grid-cols-2 gap-4'>
          {fields.slice(0, 2).map((field) => (
            <InputAnimation
              key={field.name}
              label={field.label}
              name={field.name}
              type={field.type}
              disabled={isLoading}
              className={baseInputClasses}
              required={!!field.required}
              autoComplete={field.autoComplete}
            />
          ))}
        </div>
      )}
      {fields.slice(type === 'register' ? 2 : 0).map((field) => (
        <InputAnimation
          key={field.name}
          label={field.label}
          name={field.name}
          type={field.type}
          disabled={isLoading}
          className={baseInputClasses}
          required={!!field.required}
          autoComplete={field.autoComplete}
        />
      ))}
    </motion.div>
  );
}

// Usage:
// <AuthFields type="login" isLoading={false} />
// <AuthFields type="register" isLoading={false} />
</file>

<file path="src/components/ui/molecules/AuthForm.tsx">
'use client';

import Link from 'next/link';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/atoms/button';
import { Input } from '@/components/ui/atoms/input';
import { Label } from '@/components/ui/atoms/label';

interface AuthFormField {
  id: string;
  name: string;
  label: string;
  type: string;
  placeholder?: string;
  required?: boolean;
}

interface AuthFormProps
  extends Omit<React.ComponentPropsWithoutRef<'div'>, 'onSubmit'> {
  type:
    | 'forgot-password'
    | 'request-verification'
    | 'reset-password'
    | 'verify-email';
  title: string;
  description: string;
  fields?: AuthFormField[];
  onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
  onButtonClick?: () => void;
  buttonText?: string;
  successMessage?: string;
  errorMessage?: string;
  isLoading?: boolean;
  linkText?: string;
  linkHref?: string;
  className?: string;
}

export function AuthForm({
  title,
  description,
  fields = [],
  onSubmit,
  onButtonClick,
  buttonText,
  successMessage,
  errorMessage,
  isLoading = false,
  linkText,
  linkHref,
  className,
  ...props
}: AuthFormProps) {
  return (
    <div className={cn('flex flex-col gap-4', className)} {...props}>
      <div className='glass-effect mx-auto w-full max-w-md rounded-xl bg-[hsl(var(--background))] p-6 shadow-[0_4px_8px_rgba(0,0,0,0.2)]'>
        <div className='space-y-2 text-center'>
          <h2 className='bg-gradient-to-b from-[hsl(var(--foreground))/0.9] to-transparent bg-clip-text font-heading text-2xl font-bold tracking-wide text-foreground'>
            {title}
          </h2>
          <p className='text-sm text-muted-foreground'>{description}</p>
        </div>
        <div className='mt-6 space-y-4'>
          {successMessage ? (
            <div className='space-y-2'>
              <div className='glass-effect rounded-md bg-[hsl(var(--chart-1))/0.1] p-3 text-sm text-[hsl(var(--chart-1))] shadow-[0_2px_4px_rgba(0,0,0,0.1)]'>
                {successMessage}
              </div>
              {linkText && linkHref && (
                <div className='text-center text-sm text-muted-foreground'>
                  <Link
                    href={linkHref}
                    className='text-accent-foreground hover:text-accent hover:underline'
                  >
                    {linkText}
                  </Link>
                </div>
              )}
            </div>
          ) : (
            <>
              {errorMessage && (
                <div className='glass-effect rounded-md bg-destructive/10 p-3 text-sm text-destructive shadow-[0_2px_4px_rgba(0,0,0,0.1)]'>
                  {errorMessage}
                </div>
              )}
              {fields.length > 0 && onSubmit ? (
                <form onSubmit={onSubmit} className='space-y-4'>
                  {fields.map((field) => (
                    <div key={field.id} className='space-y-2'>
                      <Label
                        htmlFor={field.id}
                        className='text-sm text-foreground'
                      >
                        {field.label}
                      </Label>
                      <Input
                        id={field.id}
                        name={field.name}
                        type={field.type}
                        placeholder={field.placeholder}
                        required={field.required}
                        disabled={isLoading}
                        className='glass-effect w-full rounded-md border border-[rgba(255,255,255,0.06)] bg-[rgba(122,122,122,0.05)] p-3 text-foreground transition-all duration-300 placeholder:text-muted-foreground focus:border-[hsl(var(--primary))] focus:ring-[hsl(var(--ring))/0.5]'
                      />
                    </div>
                  ))}
                  <Button
                    type='submit'
                    className='glass-effect hover-glow w-full rounded-md bg-gradient-to-b from-[hsl(var(--primary))/0.1] to-[hsl(var(--background))] py-3 font-medium tracking-wide text-foreground shadow-[0_2px_6px_rgba(0,0,0,0.1)] transition-all duration-200 hover:shadow-[0_4px_8px_rgba(0,0,0,0.2)]'
                    disabled={isLoading}
                  >
                    {isLoading ? 'Processing...' : buttonText}
                  </Button>
                  {linkText && linkHref && (
                    <div className='text-center text-sm text-muted-foreground'>
                      <Link
                        href={linkHref}
                        className='text-accent-foreground hover:text-accent hover:underline'
                      >
                        {linkText}
                      </Link>
                    </div>
                  )}
                </form>
              ) : onButtonClick ? (
                <div className='space-y-4'>
                  <Button
                    onClick={onButtonClick}
                    className='glass-effect hover-glow w-full rounded-md bg-gradient-to-b from-[hsl(var(--primary))/0.1] to-[hsl(var(--background))] py-3 font-medium tracking-wide text-foreground shadow-[0_2px_6px_rgba(0,0,0,0.1)] transition-all duration-200 hover:shadow-[0_4px_8px_rgba(0,0,0,0.2)]'
                    disabled={isLoading}
                  >
                    {isLoading ? 'Processing...' : buttonText}
                  </Button>
                  {linkText && linkHref && (
                    <div className='text-center text-sm text-muted-foreground'>
                      <Link
                        href={linkHref}
                        className='text-accent-foreground hover:text-accent hover:underline'
                      >
                        {linkText}
                      </Link>
                    </div>
                  )}
                </div>
              ) : (
                <div className='glass-effect rounded-md bg-muted/10 p-3 text-sm text-muted-foreground shadow-[0_2px_4px_rgba(0,0,0,0.1)]'>
                  Please wait while we process your request...
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/molecules/AuthHeader.tsx">
import Link from 'next/link';
import { motion } from 'motion/react';

interface AuthHeaderProps {
  title: string;
  subtitle: string;
  linkText: string;
  linkHref: string;
  error?: string;
}

export function AuthHeader({
  title,
  subtitle,
  linkText,
  linkHref,
  error,
}: AuthHeaderProps) {
  return (
    <div className='space-y-4 text-center'>
      <motion.h2
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: 'easeOut' }}
        className='bg-gradient-to-r from-[hsl(var(--primary))] to-[hsl(var(--foreground))] bg-clip-text font-heading text-2xl font-bold tracking-wide text-foreground shadow-[0_2px_6px_rgba(0,0,0,0.15)] md:text-3xl'
      >
        {title}
      </motion.h2>
      <p className='glass-effect mx-auto max-w-sm rounded-lg p-3 text-sm text-muted-foreground shadow-inset-custom'>
        {subtitle}{' '}
        <Link
          href={linkHref}
          className='text-accent-foreground underline-offset-4 transition-colors duration-300 hover:text-accent hover:underline'
        >
          {linkText}
        </Link>
      </p>
      {error && (
        <motion.p
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, ease: 'easeOut' }}
          className='mx-auto max-w-sm rounded-md bg-destructive/15 p-2 text-sm text-destructive-foreground shadow-[inset_0_1px_2px_rgba(0,0,0,0.2)]'
        >
          {error}
        </motion.p>
      )}
    </div>
  );
}
</file>

<file path="src/components/ui/molecules/CategoryNav.tsx">
'use client';
import * as React from 'react';
import { motion } from 'motion/react'; // Using motion/react as specified
import { Button } from '@/components/ui/atoms/button'; // Assuming this is your ShadcN Button
import { cn } from '@/lib/utils';

export interface CategoryNavProps {
  categories: { id: string; name: string; slug: string }[];
  selectedCategory: string | null;
  onSelectAction: (slug: string | null) => void;
  className?: string;
}

export const CategoryNav = ({
  categories,
  selectedCategory,
  onSelectAction,
  className,
}: CategoryNavProps) => {
  return (
    <nav
      className={cn(
        'mx-auto flex max-w-5xl justify-center gap-3 overflow-x-auto px-4 py-4',
        className
      )}
    >
      {/* "All" Button */}
      <div className='relative'>
        <Button
          variant='outline'
          onClick={() => onSelectAction(null)}
          className={cn(
            'min-w-[80px] rounded-lg border border-zinc-700/30 bg-zinc-900/40 px-6 py-2 text-sm font-medium text-zinc-100 shadow-sm backdrop-blur-md transition-all duration-200',
            !selectedCategory &&
              'border-primary/40 bg-gradient-to-b from-primary/20 to-primary/10 text-primary shadow-[0_0_8px_rgba(59,130,246,0.2)]',
            selectedCategory && 'hover:bg-zinc-800/60 hover:text-white'
          )}
        >
          All
        </Button>
        {!selectedCategory && (
          <motion.div
            layoutId='category-highlight'
            className='absolute inset-0 -z-10 rounded-lg bg-gradient-to-r from-primary/30 to-transparent blur-md'
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.8 }}
            transition={{ duration: 0.3 }}
          />
        )}
      </div>

      {/* Category Buttons */}
      {categories.map((category) => (
        <div key={category.id} className='relative'>
          <Button
            variant='outline'
            onClick={() => onSelectAction(category.slug)}
            className={cn(
              'min-w-[80px] rounded-lg border border-zinc-700/30 bg-zinc-900/40 px-6 py-2 text-sm font-medium text-zinc-100 shadow-sm backdrop-blur-md transition-all duration-200',
              selectedCategory === category.slug &&
                'border-primary/40 bg-gradient-to-b from-primary/20 to-primary/10 text-primary shadow-[0_0_8px_rgba(59,130,246,0.2)]',
              selectedCategory !== category.slug &&
                'hover:bg-zinc-800/60 hover:text-white'
            )}
          >
            {category.name}
          </Button>
          {selectedCategory === category.slug && (
            <motion.div
              layoutId='category-highlight'
              className='absolute inset-0 -z-10 rounded-lg bg-gradient-to-r from-primary/30 to-transparent blur-md'
              initial={{ opacity: 0 }}
              animate={{ opacity: 0.8 }}
              transition={{ duration: 0.3 }}
            />
          )}
        </div>
      ))}
    </nav>
  );
};

CategoryNav.displayName = 'CategoryNav';
</file>

<file path="src/components/ui/molecules/CommentForm.tsx">
'use client';
import * as React from 'react';
import { Textarea } from '@/components/ui/atoms/textarea';
import { Button } from '@/components/ui/atoms/button'; // Your Button component
import { cn } from '@/lib/utils';

export interface CommentFormProps {
  onSubmitAction: (text: string) => void | Promise<void>;
  className?: string;
}

export const CommentForm = ({
  onSubmitAction,
  className,
}: CommentFormProps) => {
  const [text, setText] = React.useState('');
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const textareaRef = React.useRef<HTMLTextAreaElement>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!text.trim() || isSubmitting) return;
    setIsSubmitting(true);
    try {
      await onSubmitAction(text);
      setText(''); // Clear on success
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form
      onSubmit={handleSubmit}
      className={cn(
        'rounded-lg border border-zinc-700/30 bg-zinc-900/40 p-4 shadow-sm backdrop-blur-md',
        className
      )}
    >
      <Textarea
        ref={textareaRef}
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder='Write your comment...'
        className='min-h-[80px] w-full border-none bg-transparent text-zinc-100 placeholder:text-zinc-500 focus-visible:ring-0'
        disabled={isSubmitting}
      />
      <div className='mt-2 flex justify-end'>
        <Button
          type='submit'
          variant='hoverGlow'
          size='default'
          loading={isSubmitting}
          disabled={!text.trim() || isSubmitting}
          className={cn(
            'bg-gradient-to-b from-primary/70 to-primary/20 text-white',
            'border border-primary/50 backdrop-blur-sm' // Enhance with glassmorphism
          )}
        >
          Post
        </Button>
      </div>
    </form>
  );
};

CommentForm.displayName = 'CommentForm';
</file>

<file path="src/components/ui/molecules/CommentItem.tsx">
'use client';
import * as React from 'react';
import {
  Avatar,
  AvatarImage,
  AvatarFallback,
} from '@/components/ui/atoms/avatar';
import { cn } from '@/lib/utils';
import { formatDistanceToNow } from 'date-fns'; // For readable timestamps

export interface CommentItemProps {
  username: string;
  text: string;
  timestamp: Date | string; // Accept Date or ISO string
  avatar?: string; // URL for avatar image
  className?: string;
}

export const CommentItem = ({
  username,
  text,
  timestamp,
  avatar,
  className,
}: CommentItemProps) => {
  const formattedTimestamp = React.useMemo(
    () => formatDistanceToNow(new Date(timestamp), { addSuffix: true }), // e.g., "2 hours ago"
    [timestamp]
  );

  return (
    <div
      className={cn(
        'flex gap-4 rounded-lg border border-zinc-700/30 bg-zinc-900/40 p-4 shadow-sm backdrop-blur-md',
        'transition-all duration-200 hover:bg-zinc-800/50',
        className
      )}
    >
      {/* Avatar */}
      <Avatar className='h-8 w-8 flex-shrink-0'>
        {avatar && <AvatarImage src={avatar} alt={`${username}'s avatar`} />}
        <AvatarFallback>{username.charAt(0).toUpperCase()}</AvatarFallback>
      </Avatar>

      {/* Content */}
      <div className='flex-1 space-y-1'>
        <div className='flex items-center gap-2'>
          <span className='text-sm font-medium text-zinc-100'>{username}</span>
          <span className='text-xs text-muted-foreground'>
            {formattedTimestamp}
          </span>
        </div>
        <p className='text-sm leading-relaxed text-zinc-200'>{text}</p>
      </div>
    </div>
  );
};

CommentItem.displayName = 'CommentItem';
</file>

<file path="src/components/ui/molecules/dropdown.tsx">
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { ChevronDown } from 'lucide-react';
import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-between rounded-md border border-[rgba(255,255,255,0.05)] bg-[rgba(24,24,27,0.95)] px-3 py-2 text-sm font-medium text-foreground shadow-sm shadow-black/5 transition-colors hover:bg-[rgba(59,130,246,0.05)]',
      'focus:outline-none focus:ring-2 focus:ring-primary/50',
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className='ml-2 h-4 w-4 text-muted-foreground transition-transform duration-200' />
  </DropdownMenuPrimitive.Trigger>
));
DropdownMenuTrigger.displayName = DropdownMenuPrimitive.Trigger.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, align = 'end', ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      align={align}
      className={cn(
        'z-50 min-w-[12rem] overflow-hidden rounded-md border border-[rgba(255,255,255,0.05)] bg-[rgba(24,24,27,0.95)] shadow-lg',
        'animate-fadelnUp gradient-border relative',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    description?: string;
  }
>(({ className, children, description, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-pointer select-none flex-col px-3 py-2 text-sm font-medium text-foreground transition-colors',
      'from-[rgba(59,130,246,0.1)] to-transparent hover:bg-gradient-to-r',
      'from-[rgba(59,130,246,0.15)] to-transparent focus:bg-gradient-to-r',
      'outline-none',
      className
    )}
    {...props}
  >
    <span>{children}</span>
    {description && (
      <span className='mt-1 text-xs text-muted-foreground'>{description}</span>
    )}
  </DropdownMenuPrimitive.Item>
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
};
</file>

<file path="src/components/ui/molecules/FilterBar.tsx">
'use client';
import * as React from 'react';
import { motion } from 'motion/react';
import { Button } from '@/components/ui/atoms/button'; // Your Button
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
} from '@/components/ui/dropdown-menu';
import { SlidersHorizontal } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface FilterOption {
  label: string;
  value: string;
}

export interface FilterBarProps {
  filters: FilterOption[]; // e.g., [{ label: "Books", value: "books" }]
  activeFilters: string[]; // e.g., ["books", "4-stars"]
  sortBy: string | null; // e.g., "name", "date"
  onFilterChangeAction: (updates: {
    activeFilters?: string[];
    sortBy?: string | null;
  }) => void;
  className?: string;
}

export const FilterBar = ({
  filters,
  activeFilters,
  sortBy,
  onFilterChangeAction,
  className,
}: FilterBarProps) => {
  const [open, setOpen] = React.useState(false);

  const handleFilterToggle = (value: string) => {
    const newFilters = activeFilters.includes(value)
      ? activeFilters.filter((f) => f !== value)
      : [...activeFilters, value];
    onFilterChangeAction({ activeFilters: newFilters });
  };

  const handleSortChange = (newSortBy: string) => {
    onFilterChangeAction({ sortBy: newSortBy === sortBy ? null : newSortBy });
  };

  const sortOptions = [
    { label: 'Name (A-Z)', value: 'name' },
    { label: 'Date (Newest)', value: 'date' },
  ];

  return (
    <DropdownMenu open={open} onOpenChange={setOpen}>
      <DropdownMenuTrigger asChild>
        <Button
          variant='hoverGlow' // Premium variant from your Button
          size='sm'
          className={cn(
            'gap-2 rounded-lg border-zinc-700/30 bg-zinc-900/40 text-zinc-100 backdrop-blur-md',
            'hover:bg-zinc-800/60',
            activeFilters.length > 0 &&
              'border-primary/40 bg-gradient-to-b from-primary/20 to-primary/10',
            className
          )}
        >
          <SlidersHorizontal className='h-4 w-4' />
          Filters{' '}
          {activeFilters.length > 0 && (
            <span className='ml-1 text-xs text-primary'>
              ({activeFilters.length})
            </span>
          )}
        </Button>
      </DropdownMenuTrigger>
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: open ? 1 : 0, scale: open ? 1 : 0.95 }}
        transition={{ duration: 0.2, ease: 'easeOut' }}
      >
        <DropdownMenuContent
          align='end'
          className='w-56 border-zinc-700/30 bg-zinc-900/60 text-zinc-100 shadow-lg backdrop-blur-md'
        >
          <DropdownMenuLabel className='text-zinc-200'>
            Filter by
          </DropdownMenuLabel>
          <DropdownMenuSeparator className='bg-zinc-700/50' />
          {filters.map((filter) => (
            <DropdownMenuCheckboxItem
              key={filter.value}
              checked={activeFilters.includes(filter.value)}
              onCheckedChange={() => handleFilterToggle(filter.value)}
              className='text-sm text-zinc-200 hover:bg-zinc-800/50 focus:bg-zinc-800/50'
            >
              <motion.span
                animate={{
                  scale: activeFilters.includes(filter.value) ? 1.05 : 1,
                }}
                transition={{ duration: 0.2 }}
              >
                {filter.label}
              </motion.span>
            </DropdownMenuCheckboxItem>
          ))}
          <DropdownMenuSeparator className='bg-zinc-700/50' />
          <DropdownMenuLabel className='text-zinc-200'>
            Sort by
          </DropdownMenuLabel>
          {sortOptions.map((option) => (
            <DropdownMenuCheckboxItem
              key={option.value}
              checked={sortBy === option.value}
              onCheckedChange={() => handleSortChange(option.value)}
              className='text-sm text-zinc-200 hover:bg-zinc-800/50 focus:bg-zinc-800/50'
            >
              <motion.span
                animate={{ scale: sortBy === option.value ? 1.05 : 1 }}
                transition={{ duration: 0.2 }}
              >
                {option.label}
              </motion.span>
            </DropdownMenuCheckboxItem>
          ))}
        </DropdownMenuContent>
      </motion.div>
    </DropdownMenu>
  );
};

FilterBar.displayName = 'FilterBar';
</file>

<file path="src/components/ui/molecules/FormField.tsx">
'use client';
import * as React from 'react';
import { motion } from 'motion/react';
import { Label } from '@/components/ui/atoms/label'; // Your atom
import { cn } from '@/lib/utils';

// Define props for the child component (e.g., TextInput, Checkbox)
interface ChildInputProps {
  id?: string;
  className?: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [key: string]: any; // Allow additional props
}

export interface FormFieldProps {
  label: string;
  htmlFor: string;
  children: React.ReactElement<ChildInputProps>; // Narrow children to ReactElement
  error?: string;
  className?: string;
}

// Forward ref to HTMLInputElement (common for TextInput, Checkbox)
export const FormField = React.forwardRef<HTMLInputElement, FormFieldProps>(
  ({ label, htmlFor, children, error, className }, ref) => {
    // Ensure children is a single ReactElement
    if (!React.isValidElement(children)) {
      throw new Error('FormField expects a single ReactElement as its child.');
    }

    return (
      <div
        className={cn(
          'space-y-2 rounded-lg border border-zinc-700/30 bg-zinc-900/40 p-4 shadow-sm backdrop-blur-md',
          error && 'border-destructive/50 bg-destructive/10',
          className
        )}
      >
        <Label
          htmlFor={htmlFor}
          className={cn(
            'text-sm font-medium text-zinc-100',
            error && 'text-destructive'
          )}
        >
          {label}
        </Label>
        <motion.div
          initial={{ scale: 1 }}
          whileFocus={{
            scale: 1.01,
            boxShadow: '0 0 8px rgba(59,130,246,0.2)',
          }}
          transition={{ duration: 0.2, ease: 'easeOut' }}
        >
          {React.cloneElement(children, {
            ref, // Forward ref to the child
            id: htmlFor,
            className: cn(
              children.props.className, // Safely access props
              error && 'border-destructive focus-visible:ring-destructive'
            ),
            'aria-invalid': !!error,
          })}
        </motion.div>
        {error && (
          <p className='text-xs font-medium text-destructive'>{error}</p>
        )}
      </div>
    );
  }
);

FormField.displayName = 'FormField';
</file>

<file path="src/components/ui/molecules/InputGroup.tsx">
'use client';
import * as React from 'react';
import { cn } from '@/lib/utils';
import type { InputProps } from '@/components/ui/atoms/input';

export interface InputGroupProps {
  children: React.ReactElement<InputProps>;
  icon: React.ReactNode;
  position?: 'left' | 'right';
  className?: string;
}

export const InputGroup = ({
  children,
  icon,
  position = 'left',
  className,
}: InputGroupProps) => {
  return (
    <div
      className={cn(
        'flex items-center rounded-lg border border-zinc-700/20 bg-zinc-900/30 shadow-sm backdrop-blur-md',
        'transition-colors duration-200 hover:bg-zinc-800/40',
        className
      )}
    >
      {position === 'left' && (
        <span className='flex items-center px-3 text-zinc-400'>{icon}</span>
      )}
      {React.cloneElement(children, {
        ...children.props,
        className: cn(
          children.props.className,
          'border-none bg-transparent w-full h-10 py-2 text-sm placeholder:text-zinc-500',
          position === 'left' ? 'pl-0' : 'pr-0',
          'focus-visible:outline-none focus-visible:ring-0 focus:outline-none' // Triple-check no focus styles
        ),
      })}
      {position === 'right' && (
        <span className='flex items-center px-3 text-zinc-400'>{icon}</span>
      )}
    </div>
  );
};

InputGroup.displayName = 'InputGroup';
</file>

<file path="src/components/ui/molecules/SearchBar.tsx">
'use client';
import * as React from 'react';
import { motion } from 'motion/react';
import { Input } from '@/components/ui/atoms/input';
import { Search, X } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
}

export const SearchBar = React.forwardRef<HTMLInputElement, SearchBarProps>(
  ({ value, onChange, placeholder = 'Search...', className }, ref) => {
    const handleClear = () => onChange('');

    return (
      <motion.div
        className={cn(
          'relative flex w-full max-w-md items-center rounded-lg border border-zinc-700/40 bg-gradient-to-b from-zinc-900/50 to-zinc-800/50 shadow-sm backdrop-blur-md',
          className
        )}
        initial={{ opacity: 0.9 }}
        whileFocus={{ opacity: 1, boxShadow: '0 0 12px rgba(59,130,246,0.3)' }}
        transition={{ duration: 0.2 }}
      >
        <Search className='absolute left-3 h-4 w-4 text-zinc-300' />
        <Input
          ref={ref}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          className='h-10 border-none bg-transparent pl-9 pr-12 text-zinc-100 placeholder:text-zinc-400 focus-visible:ring-0'
          aria-label='Search'
        />
        {value && (
          <button
            onClick={handleClear}
            className='absolute right-3 flex h-6 w-6 items-center justify-center text-zinc-300 hover:text-white'
            aria-label='Clear search'
          >
            <X className='h-4 w-4' />
          </button>
        )}
      </motion.div>
    );
  }
);

SearchBar.displayName = 'SearchBar';
</file>

<file path="src/components/ui/molecules/SocialAuth.tsx">
'use client';

import { Button } from '@/components/ui/atoms/button';
import { useAuthStore } from '@/store/Auth';
import { OAuthProvider } from 'appwrite';
import { cn } from '@/lib/utils';

interface OAuthButtonProps {
  provider: OAuthProvider;
  label: string;
  disabled: boolean;
  icon: React.ReactNode;
}

function OAuthButton({ provider, label, disabled, icon }: OAuthButtonProps) {
  const { createOAuthSession } = useAuthStore();

  const handleOAuthLogin = async () => {
    try {
      await createOAuthSession(provider);
    } catch (error) {
      console.error('OAuth error:', error);
    }
  };

  return (
    <Button
      onClick={handleOAuthLogin}
      variant='outline'
      disabled={disabled}
      className={cn(
        'flex w-full items-center justify-center gap-3 px-4 py-3',
        'glass-effect bg-gradient-to-r from-[hsl(var(--muted))/0.8] to-[hsl(var(--background))]',
        'hover-glow shadow-[0_2px_6px_rgba(0,0,0,0.1)] hover:shadow-[0_4px_8px_rgba(0,0,0,0.2)]',
        'rounded-md font-medium tracking-wide text-foreground transition-all duration-300'
      )}
    >
      {icon}
      <span className='ml-2'>{label}</span>
    </Button>
  );
}

export function SocialAuth({ isLoading }: { isLoading: boolean }) {
  const providers = [
    {
      provider: OAuthProvider.Google,
      label: 'Continue with Google',
      icon: (
        <svg className='h-5 w-5' viewBox='0 0 24 24' fill='currentColor'>
          {/* Placeholder - Replace with official Google icon */}
          <path d='M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z' />
          <path d='M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z' />
          <path d='M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z' />
          <path d='M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z' />
        </svg>
      ),
    },
  ];

  return (
    <div className='space-y-4'>
      <div className='my-4 h-[1px] w-full bg-gradient-to-r from-transparent via-[hsl(var(--muted))/0.5] to-transparent shadow-[0_1px_2px_rgba(0,0,0,0.1)]' />
      <div className='space-y-2'>
        {providers.map(({ provider, label, icon }) => (
          <OAuthButton
            key={provider}
            provider={provider}
            label={label}
            disabled={isLoading}
            icon={icon}
          />
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/organisms/ContentCard.tsx">
'use client';

import Link from 'next/link';
import { motion } from 'motion/react';
import Image from 'next/image';
import { cn } from '@/lib/utils';

// Base content entry interface with common properties
export interface ContentEntry {
  slug: string;
  categorySlug: string;
  title: string;
  summary?: string;
  imageUrl?: string;
  $createdAt: string;
}

interface ContentCardProps<T extends ContentEntry> {
  entry: T;
  baseUrl: string;
  className?: string;
  contentType?: string;
}

export const ContentCard = <T extends ContentEntry>({
  entry,
  baseUrl,
  className,
  contentType = 'content', // Default label for aria
}: ContentCardProps<T>) => {
  return (
    <Link
      href={`${baseUrl}/${entry.categorySlug}/${entry.slug}`}
      aria-label={`View ${entry.title} ${contentType}`}
      className='group block'
    >
      <motion.article
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        whileHover={{ y: -3 }}
        transition={{ duration: 0.2 }}
        className={cn(
          'relative flex h-full flex-col overflow-hidden rounded-lg border bg-card shadow-sm',
          'hover:shadow-lg group-hover:border-primary',
          'transform-gpu backdrop-blur-sm', // Performance boost & subtle glass effect
          className
        )}
      >
        {entry.imageUrl && (
          <div className='relative aspect-video overflow-hidden'>
            <Image
              src={entry.imageUrl}
              alt={`Cover image for ${entry.title}`}
              fill
              className='object-cover transition-transform group-hover:scale-105'
              sizes='(max-width: 768px) 100vw, 33vw'
              unoptimized
            />
            <div className='absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 transition-opacity group-hover:opacity-100' />
          </div>
        )}

        <div className='flex flex-1 flex-col p-6'>
          <div className='flex items-center justify-between gap-2 text-sm text-muted-foreground'>
            <time dateTime={entry.$createdAt} className='font-medium'>
              {new Date(entry.$createdAt).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
              })}
            </time>
          </div>

          <h3 className='mt-2 text-xl font-semibold tracking-tight transition-colors group-hover:text-primary'>
            {entry.title}
          </h3>

          {entry.summary && (
            <p className='mt-2 line-clamp-2 text-muted-foreground'>
              {entry.summary}
            </p>
          )}

          <div className='mt-4 h-0.5 w-0 bg-primary transition-all duration-300 group-hover:w-full' />
        </div>
      </motion.article>
    </Link>
  );
};
</file>

<file path="src/components/ui/organisms/sidebar-nav.tsx">
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';

const navItems = [
  { name: 'Introduction', href: '/design-system' },
  { name: 'Styles', href: '/design-system/styles' },
  { name: 'Atoms', href: '/design-system/atoms' },
  { name: 'Molecules', href: '/design-system/molecules' },
  { name: 'Organisms', href: '/design-system/organisms' },
  { name: 'Sections', href: '/design-system/sections' },
];

export function SidebarNav() {
  const pathname = usePathname();

  return (
    <nav className='mt-8 space-y-1 px-3'>
      {navItems.map((item) => (
        <Link
          key={item.href}
          href={item.href}
          className={`block rounded-md px-3 py-2 ${
            pathname === item.href
              ? 'bg-primary text-primary-foreground'
              : 'hover:bg-muted'
          }`}
        >
          {item.name}
        </Link>
      ))}
    </nav>
  );
}
</file>

<file path="src/components/ui/action-search-bar.tsx">
'use client';

import { useState, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { motion, AnimatePresence } from 'motion/react';
import {
  Search,
  Send,
  BarChart2,
  Globe,
  Video,
  PlaneTakeoff,
  AudioLines,
} from 'lucide-react';

function useDebounce<T>(value: T, delay: number = 500): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);

  return debouncedValue;
}

export type Action = {
  id: string;
  label: string;
  icon: React.ReactNode;
  description?: string;
  short?: string;
  end?: string;
}

interface SearchResult {
  actions: Action[];
}

const allActions = [
  {
    id: '1',
    label: 'Book tickets',
    icon: <PlaneTakeoff className='h-4 w-4 text-blue-500' />,
    description: 'Operator',
    short: '⌘K',
    end: 'Command',
  },
  {
    id: '2',
    label: 'Send message',
    icon: <Send className='h-4 w-4 text-green-500' />,
    description: 'gpt-4o',
    short: '⌘Enter',
    end: 'Command',
  },
  {
    id: '3',
    label: 'View analytics',
    icon: <BarChart2 className='h-4 w-4 text-purple-500' />,
    description: 'View your analytics dashboard',
    short: '',
    end: 'Command',
  },
  {
    id: '4',
    label: 'Join meeting',
    icon: <Video className='h-4 w-4 text-red-500' />,
    description: 'Join the current meeting',
    short: '',
    end: 'Command',
  },
  {
    id: '5',
    label: 'Voice command',
    icon: <AudioLines className='h-4 w-4 text-yellow-500' />,
    description: 'Activate voice assistant',
    short: '',
    end: 'Command',
  },
  {
    id: '6',
    label: 'Browse web',
    icon: <Globe className='h-4 w-4 text-blue-500' />,
    description: 'gpt-4o',
    short: '',
    end: 'Command',
  },
];

function ActionSearchBar({ actions = allActions }: { actions?: Action[] }) {
  const [query, setQuery] = useState('');
  const [result, setResult] = useState<SearchResult | null>(null);
  const [isFocused, setIsFocused] = useState(false);
  const [_isTyping, setIsTyping] = useState(false);
  const [selectedAction, setSelectedAction] = useState<Action | null>(null);
  const debouncedQuery = useDebounce(query, 200);

  useEffect(() => {
    if (!debouncedQuery) {
      setResult({ actions: actions });
      return;
    }

    const searchResults = actions.filter((action) =>
      action.label.toLowerCase().includes(debouncedQuery.toLowerCase())
    );

    setResult({ actions: searchResults });
  }, [debouncedQuery, actions]);

  useEffect(() => {
    if (result && result.actions.length > 0 && !selectedAction) {
      setSelectedAction(result.actions[0]);
    }
  }, [result, selectedAction]);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (!result) return;

    if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (!selectedAction) {
        setSelectedAction(result.actions[0]);
      } else {
        const currentIndex = result.actions.findIndex(
          (action) => action.id === selectedAction.id
        );
        const nextIndex = (currentIndex + 1) % result.actions.length;
        setSelectedAction(result.actions[nextIndex]);
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (!selectedAction) {
        setSelectedAction(
          result.actions[result.actions.length - 1]
        );
      } else {
        const currentIndex = result.actions.findIndex(
          (action) => action.id === selectedAction.id
        );
        const nextIndex =
          (currentIndex - 1 + result.actions.length) % result.actions.length;
        setSelectedAction(result.actions[nextIndex]);
      }
    } else if (e.key === 'Enter' && selectedAction) {
      e.preventDefault();
      // Execute the selected action
      executeAction(selectedAction);
    }
  };

  // Function to execute the selected action
  const executeAction = (_action: Action) => {
    // Implementation of action execution
    // Replace console.log with actual action execution logic
    // For now, just a placeholder until actual implementation
  };

  return (
    <div className='relative w-full max-w-md'>
      <div className='relative'>
        <div className='pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3'>
          <Search className='h-4 w-4 text-gray-400' />
        </div>
        <Input
          type='text'
          placeholder='Search actions...'
          className='pl-10 pr-4 py-2 w-full rounded-lg bg-zinc-900/60 border border-zinc-800 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 text-white placeholder-gray-400'
          value={query}
          onChange={(e) => {
            setQuery(e.target.value);
            setIsTyping(true);
            setTimeout(() => setIsTyping(false), 300);
          }}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setTimeout(() => setIsFocused(false), 100)}
          onKeyDown={handleKeyDown}
        />
      </div>

      <AnimatePresence>
        {isFocused && result && result.actions.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.15 }}
            className='absolute z-10 mt-2 w-full rounded-lg border border-zinc-800 bg-zinc-900/95 shadow-lg backdrop-blur-sm overflow-hidden'
          >
            <ul className='max-h-80 overflow-auto py-1' role="listbox">
              {result.actions.map((action) => (
                <li
                  key={action.id}
                  role="option"
                  aria-selected={selectedAction?.id === action.id}
                  tabIndex={0}
                  onMouseEnter={() => setSelectedAction(action)}
                  onClick={() => executeAction(action)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                      e.preventDefault();
                      executeAction(action);
                    }
                  }}
                  className={`px-4 py-2 cursor-pointer flex items-center justify-between ${
                    selectedAction?.id === action.id
                      ? 'bg-blue-600/20 text-blue-400'
                      : 'hover:bg-zinc-800/80'
                  }`}
                >
                  <div className='flex items-center space-x-3'>
                    <div className='flex-shrink-0 rounded-md bg-zinc-800/50 p-1.5'>
                      {action.icon}
                    </div>
                    <div>
                      <div className='font-medium text-white'>{action.label}</div>
                      {action.description && (
                        <div className='text-xs text-gray-400'>
                          {action.description}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className='flex items-center space-x-2'>
                    {action.short && (
                      <span className='text-xs text-gray-400 bg-zinc-800 px-1.5 py-0.5 rounded'>
                        {action.short}
                      </span>
                    )}
                    {action.end && (
                      <span className='text-xs text-gray-400'>
                        {action.end}
                      </span>
                    )}
                  </div>
                </li>
              ))}
            </ul>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

export { ActionSearchBar };
</file>

<file path="src/components/ui/aurora-background.tsx">
'use client';
import { cn } from '@/lib/utils';
import type { ReactNode } from 'react';
import React from 'react';

interface AuroraBackgroundProps extends React.HTMLProps<HTMLDivElement> {
  children: ReactNode;
  showRadialGradient?: boolean;
}

export const AuroraBackground = ({
  className,
  children,
  showRadialGradient = true,
  ...props
}: AuroraBackgroundProps) => {
  return (
    <main>
      <div
        className={cn(
          'relative flex flex-col  h-[100vh] items-center justify-center bg-zinc-50 dark:bg-zinc-900  text-slate-950 transition-bg',
          className
        )}
        {...props}
      >
        <div className='absolute inset-0 overflow-hidden'>
          <div
            //   I'm sorry but this is what peak developer performance looks like // trigger warning
            className={cn(
              `
            [--white-gradient:repeating-linear-gradient(100deg,var(--white)_0%,var(--white)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--white)_16%)]
            [--dark-gradient:repeating-linear-gradient(100deg,var(--black)_0%,var(--black)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--black)_16%)]
            [--aurora:repeating-linear-gradient(100deg,var(--blue-500)_10%,var(--indigo-300)_15%,var(--blue-300)_20%,var(--violet-200)_25%,var(--blue-400)_30%)]
            [background-image:var(--white-gradient),var(--aurora)]
            dark:[background-image:var(--dark-gradient),var(--aurora)]
            [background-size:300%,_200%]
            [background-position:50%_50%,50%_50%]
            filter blur-[10px] invert dark:invert-0
            after:content-[""] after:absolute after:inset-0 after:[background-image:var(--white-gradient),var(--aurora)] 
            after:dark:[background-image:var(--dark-gradient),var(--aurora)]
            after:[background-size:200%,_100%] 
            after:animate-aurora after:[background-attachment:fixed] after:mix-blend-difference
            pointer-events-none
            absolute -inset-[10px] opacity-50 will-change-transform`,

              showRadialGradient &&
                `[mask-image:radial-gradient(ellipse_at_100%_0%,black_10%,var(--transparent)_70%)]`
            )}
          ></div>
        </div>
        {children}
      </div>
    </main>
  );
};
</file>

<file path="src/components/ui/beams-background.tsx">
"use client";

import { useEffect, useRef } from "react";
import { motion } from "motion/react";
import { cn } from "@/lib/utils";

interface AnimatedGradientBackgroundProps {
    className?: string;
    children?: React.ReactNode;
    intensity?: "subtle" | "medium" | "strong";
}

interface Beam {
    x: number;
    y: number;
    width: number;
    length: number;
    angle: number;
    speed: number;
    opacity: number;
    hue: number;
    pulse: number;
    pulseSpeed: number;
}

function createBeam(width: number, height: number): Beam {
    const angle = -35 + Math.random() * 10;
    return {
        x: Math.random() * width * 1.5 - width * 0.25,
        y: Math.random() * height * 1.5 - height * 0.25,
        width: 30 + Math.random() * 60,
        length: height * 2.5,
        angle: angle,
        speed: 0.6 + Math.random() * 1.2,
        opacity: 0.12 + Math.random() * 0.16,
        hue: 190 + Math.random() * 70,
        pulse: Math.random() * Math.PI * 2,
        pulseSpeed: 0.02 + Math.random() * 0.03,
    };
}

export function BeamsBackground({
    className,
    intensity = "strong",
}: AnimatedGradientBackgroundProps) {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const beamsRef = useRef<Beam[]>([]);
    const animationFrameRef = useRef<number>(0);
    const MINIMUM_BEAMS = 20;

    const opacityMap = {
        subtle: 0.7,
        medium: 0.85,
        strong: 1,
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext("2d");
        if (!ctx) return;

        const updateCanvasSize = () => {
            const dpr = window.devicePixelRatio || 1;
            canvas.width = window.innerWidth * dpr;
            canvas.height = window.innerHeight * dpr;
            canvas.style.width = `${window.innerWidth}px`;
            canvas.style.height = `${window.innerHeight}px`;
            ctx.scale(dpr, dpr);

            const totalBeams = MINIMUM_BEAMS * 1.5;
            beamsRef.current = Array.from({ length: totalBeams }, () =>
                createBeam(canvas.width, canvas.height)
            );
        };

        updateCanvasSize();
        window.addEventListener("resize", updateCanvasSize);

        function resetBeam(beam: Beam, index: number, totalBeams: number) {
            if (!canvas) return beam;
            
            const column = index % 3;
            const spacing = canvas.width / 3;

            beam.y = canvas.height + 100;
            beam.x =
                column * spacing +
                spacing / 2 +
                (Math.random() - 0.5) * spacing * 0.5;
            beam.width = 100 + Math.random() * 100;
            beam.speed = 0.5 + Math.random() * 0.4;
            beam.hue = 190 + (index * 70) / totalBeams;
            beam.opacity = 0.2 + Math.random() * 0.1;
            return beam;
        }

        function drawBeam(ctx: CanvasRenderingContext2D, beam: Beam) {
            ctx.save();
            ctx.translate(beam.x, beam.y);
            ctx.rotate((beam.angle * Math.PI) / 180);

            // Calculate pulsing opacity
            const pulsingOpacity =
                beam.opacity *
                (0.8 + Math.sin(beam.pulse) * 0.2) *
                opacityMap[intensity];

            const gradient = ctx.createLinearGradient(0, 0, 0, beam.length);

            // Enhanced gradient with multiple color stops
            gradient.addColorStop(0, `hsla(${beam.hue}, 85%, 65%, 0)`);
            gradient.addColorStop(
                0.1,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`
            );
            gradient.addColorStop(
                0.4,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`
            );
            gradient.addColorStop(
                0.6,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`
            );
            gradient.addColorStop(
                0.9,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`
            );
            gradient.addColorStop(1, `hsla(${beam.hue}, 85%, 65%, 0)`);

            ctx.fillStyle = gradient;
            ctx.fillRect(-beam.width / 2, 0, beam.width, beam.length);
            ctx.restore();
        }

        function animate() {
            if (!canvas || !ctx) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.filter = "blur(35px)";

            const totalBeams = beamsRef.current.length;
            beamsRef.current.forEach((beam, index) => {
                beam.y -= beam.speed;
                beam.pulse += beam.pulseSpeed;

                // Reset beam when it goes off screen
                if (beam.y + beam.length < -100) {
                    resetBeam(beam, index, totalBeams);
                }

                drawBeam(ctx, beam);
            });

            animationFrameRef.current = requestAnimationFrame(animate);
        }

        animate();

        return () => {
            window.removeEventListener("resize", updateCanvasSize);
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, [intensity]);

    return (
        <div
            className={cn(
                "relative min-h-screen w-full overflow-hidden bg-neutral-950",
                className
            )}
        >
            <canvas
                ref={canvasRef}
                className="absolute inset-0"
                style={{ filter: "blur(15px)" }}
            />

            <motion.div
                className="absolute inset-0 bg-neutral-950/5"
                animate={{
                    opacity: [0.05, 0.15, 0.05],
                }}
                transition={{
                    duration: 10,
                    ease: "easeInOut",
                    repeat: Number.POSITIVE_INFINITY,
                }}
                style={{
                    backdropFilter: "blur(50px)",
                }}
            />

            <div className="relative z-10 flex h-screen w-full items-center justify-center">
                <div className="flex flex-col items-center justify-center gap-6 px-4 text-center">
                    <motion.h1
                        className="text-6xl md:text-7xl lg:text-8xl font-semibold text-white tracking-tighter"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                    >
                        Beams
                        <br />
                        Background
                    </motion.h1>
                    <motion.p
                        className="text-lg md:text-2xl lg:text-3xl text-white/70 tracking-tighter"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                    >
                        For your pleasure
                    </motion.p>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/components/ui/button.test.tsx">
/**
 * @jest-environment jsdom
 */
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './atoms/button';

describe('Button Component', () => {
  it('renders with default variant and size', () => {
    render(<Button>Click Me</Button>);

    const button = screen.getByRole('button', { name: 'Click Me' });
    expect(button).toBeInTheDocument();
    expect(button).toHaveClass('button-base');
    expect(button).toHaveClass('button-default');
  });

  it('applies variant classes correctly', () => {
    render(<Button variant='secondary'>Secondary Button</Button>);

    const button = screen.getByRole('button', { name: 'Secondary Button' });
    expect(button).toHaveClass('button-secondary');
  });

  it('applies size classes correctly', () => {
    render(<Button size='sm'>Small Button</Button>);

    const button = screen.getByRole('button', { name: 'Small Button' });
    expect(button).toHaveClass('text-xs');
    expect(button).toHaveClass('px-4');
    expect(button).toHaveClass('py-1.5');
  });

  it('merges custom className with variant classes', () => {
    render(<Button className='custom-class'>Custom Button</Button>);

    const button = screen.getByRole('button', { name: 'Custom Button' });
    expect(button).toHaveClass('button-default');
    expect(button).toHaveClass('custom-class');
  });

  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Clickable Button</Button>);

    const button = screen.getByRole('button', { name: 'Clickable Button' });
    fireEvent.click(button);

    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('renders as a child component when asChild is true', () => {
    render(
      <Button asChild>
        <a href='https://example.com'>Link Button</a>
      </Button>
    );

    const link = screen.getByRole('link', { name: 'Link Button' });
    expect(link).toBeInTheDocument();
    expect(link).toHaveClass('button-base');
    expect(link).toHaveClass('button-default');
  });

  it('forwards ref to the button element', () => {
    const ref = jest.fn();
    render(<Button ref={ref}>Ref Button</Button>);

    expect(ref).toHaveBeenCalled();
  });

  it('applies disabled state correctly', () => {
    render(<Button disabled>Disabled Button</Button>);

    const button = screen.getByRole('button', { name: 'Disabled Button' });
    expect(button).toBeDisabled();
  });
});
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/container-scroll-animation.tsx">
'use client';
import React, { useRef } from 'react';
import { useScroll, useTransform, motion } from 'motion/react';

interface HeaderProps {
  containerRef: React.RefObject<HTMLDivElement | null>;
  titleComponent: string | React.ReactNode;
}

export const Header = ({ containerRef, titleComponent }: HeaderProps) => {
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });
  const translate = useTransform(scrollYProgress, [0, 1], [0, -100]);

  return (
    <motion.div
      style={{
        translateY: translate,
      }}
      className='div mx-auto max-w-5xl text-center'
    >
      {titleComponent}
    </motion.div>
  );
};

interface CardProps {
  containerRef: React.RefObject<HTMLDivElement | null>;
  isMobile: boolean;
  children: React.ReactNode;
}

export const Card = ({ containerRef, isMobile, children }: CardProps) => {
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start start', 'end start'],
  });

  const rotate = useTransform(scrollYProgress, [0, 1], [20, 0]);
  const scale = useTransform(
    scrollYProgress,
    [0, 1],
    isMobile ? [0.7, 0.9] : [1.05, 1]
  );
  const translate = useTransform(scrollYProgress, [0, 1], [0, -100]);

  return (
    <motion.div
      style={{
        rotateX: rotate,
        scale,
        translateY: translate,
        boxShadow:
          '0 0 #0000004d, 0 9px 20px #0000004a, 0 37px 37px #00000042, 0 84px 50px #00000026, 0 149px 60px #0000000a, 0 233px 65px #00000003',
      }}
      className='mx-auto -mt-12 h-[30rem] w-full max-w-5xl rounded-[30px] border-4 border-[#6C6C6C] bg-[#222222] p-2 shadow-2xl md:h-[40rem] md:p-6'
    >
      <div className='h-full w-full overflow-hidden rounded-2xl bg-gray-100 dark:bg-zinc-900 md:rounded-2xl md:p-4'>
        {children}
      </div>
    </motion.div>
  );
};

export const ContainerScroll = ({
  titleComponent,
  children,
}: {
  titleComponent: string | React.ReactNode;
  children: React.ReactNode;
}) => {
  const containerRef = useRef<HTMLDivElement | null>(null);
  const [isMobile, setIsMobile] = React.useState(false);

  React.useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, []);

  return (
    <div
      className='relative flex h-[60rem] items-center justify-center p-2 md:h-[80rem] md:p-20'
      ref={containerRef}
    >
      <div
        className='relative w-full py-10 md:py-40'
        style={{
          perspective: '1000px',
        }}
      >
        <Header containerRef={containerRef} titleComponent={titleComponent} />
        <Card containerRef={containerRef} isMobile={isMobile}>
          {children}
        </Card>
      </div>
    </div>
  );
};
</file>

<file path="src/components/ui/container.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';

interface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {
  as?: React.ElementType;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
}

const Container = React.forwardRef<HTMLDivElement, ContainerProps>(
  ({ className, as: Component = 'div', size = 'xl', ...props }, ref) => {
    return (
      <Component
        ref={ref}
        className={cn(
          'mx-auto w-full px-4 md:px-6 lg:px-8',
          {
            'max-w-screen-sm': size === 'sm',
            'max-w-screen-md': size === 'md',
            'max-w-screen-lg': size === 'lg',
            'max-w-screen-xl': size === 'xl',
            'max-w-none': size === 'full',
          },
          className
        )}
        {...props}
      />
    );
  }
);
Container.displayName = 'Container';

export { Container };
</file>

<file path="src/components/ui/dialog.tsx">
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className='absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground'>
        <X className='h-4 w-4' />
        <span className='sr-only'>Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
</file>

<file path="src/components/ui/drawer.tsx">
'use client';

import * as React from 'react';
import { Drawer as DrawerPrimitive } from 'vaul';

import { cn } from '@/lib/utils';

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = 'Drawer';

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn('fixed inset-0 z-50 bg-black/80', className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',
        className
      )}
      {...props}
    >
      <div className='mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted' />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = 'DrawerContent';

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}
    {...props}
  />
);
DrawerHeader.displayName = 'DrawerHeader';

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('mt-auto flex flex-col gap-2 p-4', className)}
    {...props}
  />
);
DrawerFooter.displayName = 'DrawerFooter';

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="src/components/ui/dropdown-menu.tsx">
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className='ml-auto h-4 w-4' />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className='absolute left-2 flex h-3.5 w-3.5 items-center justify-center'>
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className='h-4 w-4' />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className='absolute left-2 flex h-3.5 w-3.5 items-center justify-center'>
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className='h-2 w-2 fill-current' />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/fading-divider.tsx">
'use client';

import { cn } from '@/lib/utils';

interface FadingDividerProps {
  className?: string;
  opacity?: number;
}

export function FadingDivider({ className, opacity = 0.1 }: FadingDividerProps) {
  return (
    <div className={cn('relative mx-auto w-full max-w-4xl px-4', className)}>
      <div
        className="h-px w-full"
        style={{
          background: `linear-gradient(
            to right,
            transparent 0%,
            rgba(255, 255, 255, ${opacity}) 50%,
            transparent 100%
          )`
        }}
      />
    </div>
  );
}
</file>

<file path="src/components/ui/form.tsx">
'use client';

import * as React from 'react';
import type * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form';
import { Controller, FormProvider, useFormContext } from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/atoms/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/glowing-effect.tsx">
'use client';

import { memo, useCallback, useEffect, useRef } from 'react';
import { cn } from '@/lib/utils';
import { animate } from 'motion/react';

interface GlowingEffectProps {
  blur?: number;
  inactiveZone?: number;
  proximity?: number;
  spread?: number;
  variant?: 'default' | 'white';
  glow?: boolean;
  className?: string;
  disabled?: boolean;
  movementDuration?: number;
  borderWidth?: number;
}
const GlowingEffect = memo(
  ({
    blur = 0,
    inactiveZone = 0.7,
    proximity = 0,
    spread = 20,
    variant = 'default',
    glow = false,
    className,
    movementDuration = 2,
    borderWidth = 1,
    disabled = true,
  }: GlowingEffectProps) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const lastPosition = useRef({ x: 0, y: 0 });
    const animationFrameRef = useRef<number>(0);

    const handleMove = useCallback(
      (e?: MouseEvent | { x: number; y: number }) => {
        if (!containerRef.current) return;

        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
        }

        animationFrameRef.current = requestAnimationFrame(() => {
          const element = containerRef.current;
          if (!element) return;

          const { left, top, width, height } = element.getBoundingClientRect();
          const mouseX = e?.x ?? lastPosition.current.x;
          const mouseY = e?.y ?? lastPosition.current.y;

          if (e) {
            lastPosition.current = { x: mouseX, y: mouseY };
          }

          const center = [left + width * 0.5, top + height * 0.5];
          const distanceFromCenter = Math.hypot(
            mouseX - center[0],
            mouseY - center[1]
          );
          const inactiveRadius = 0.5 * Math.min(width, height) * inactiveZone;

          if (distanceFromCenter < inactiveRadius) {
            element.style.setProperty('--active', '0');
            return;
          }

          const isActive =
            mouseX > left - proximity &&
            mouseX < left + width + proximity &&
            mouseY > top - proximity &&
            mouseY < top + height + proximity;

          element.style.setProperty('--active', isActive ? '1' : '0');

          if (!isActive) return;

          const currentAngle =
            parseFloat(element.style.getPropertyValue('--start')) || 0;
          const targetAngle =
            (180 * Math.atan2(mouseY - center[1], mouseX - center[0])) /
              Math.PI +
            90;

          const angleDiff = ((targetAngle - currentAngle + 180) % 360) - 180;
          const newAngle = currentAngle + angleDiff;

          animate(currentAngle, newAngle, {
            duration: movementDuration,
            ease: [0.16, 1, 0.3, 1],
            onUpdate: (value) => {
              element.style.setProperty('--start', String(value));
            },
          });
        });
      },
      [inactiveZone, proximity, movementDuration]
    );

    useEffect(() => {
      if (disabled) return;

      const handleScroll = () => handleMove();
      const handlePointerMove = (e: PointerEvent) => handleMove(e);

      window.addEventListener('scroll', handleScroll, { passive: true });
      document.body.addEventListener('pointermove', handlePointerMove, {
        passive: true,
      });

      return () => {
        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
        }
        window.removeEventListener('scroll', handleScroll);
        document.body.removeEventListener('pointermove', handlePointerMove);
      };
    }, [handleMove, disabled]);

    return (
      <>
        <div
          className={cn(
            'pointer-events-none absolute -inset-px hidden rounded-[inherit] border opacity-0 transition-opacity',
            glow && 'opacity-100',
            variant === 'white' && 'border-white',
            disabled && '!block'
          )}
        />
        <div
          ref={containerRef}
          style={
            {
              '--blur': `${blur}px`,
              '--spread': spread,
              '--start': '0',
              '--active': '0',
              '--glowingeffect-border-width': `${borderWidth}px`,
              '--repeating-conic-gradient-times': '5',
              '--gradient':
                variant === 'white'
                  ? `repeating-conic-gradient(
                  from 236.84deg at 50% 50%,
                  var(--black),
                  var(--black) calc(25% / var(--repeating-conic-gradient-times))
                )`
                  : `radial-gradient(circle, #dd7bbb 10%, #dd7bbb00 20%),
                radial-gradient(circle at 40% 40%, #d79f1e 5%, #d79f1e00 15%),
                radial-gradient(circle at 60% 60%, #5a922c 10%, #5a922c00 20%), 
                radial-gradient(circle at 40% 60%, #4c7894 10%, #4c789400 20%),
                repeating-conic-gradient(
                  from 236.84deg at 50% 50%,
                  #dd7bbb 0%,
                  #d79f1e calc(25% / var(--repeating-conic-gradient-times)),
                  #5a922c calc(50% / var(--repeating-conic-gradient-times)), 
                  #4c7894 calc(75% / var(--repeating-conic-gradient-times)),
                  #dd7bbb calc(100% / var(--repeating-conic-gradient-times))
                )`,
            } as React.CSSProperties
          }
          className={cn(
            'pointer-events-none absolute inset-0 rounded-[inherit] opacity-100 transition-opacity',
            glow && 'opacity-100',
            blur > 0 && 'blur-[var(--blur)] ',
            className,
            disabled && '!hidden'
          )}
        >
          <div
            className={cn(
              'glow',
              'rounded-[inherit]',
              'after:content-[""] after:rounded-[inherit] after:absolute after:inset-[calc(-1*var(--glowingeffect-border-width))]',
              'after:[border:var(--glowingeffect-border-width)_solid_transparent]',
              'after:[background:var(--gradient)] after:[background-attachment:fixed]',
              'after:opacity-[var(--active)] after:transition-opacity after:duration-300',
              'after:[mask-clip:padding-box,border-box]',
              'after:[mask-composite:intersect]',
              'after:[mask-image:linear-gradient(#0000,#0000),conic-gradient(from_calc((var(--start)-var(--spread))*1deg),#00000000_0deg,#fff,#00000000_calc(var(--spread)*2deg))]'
            )}
          />
        </div>
      </>
    );
  }
);

GlowingEffect.displayName = 'GlowingEffect';

export { GlowingEffect };
</file>

<file path="src/components/ui/hover-border-gradient.tsx">
'use client';
import React, { useState, useEffect, useCallback } from 'react';

import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

type Direction = 'TOP' | 'LEFT' | 'BOTTOM' | 'RIGHT';

export function HoverBorderGradient({
  children,
  containerClassName,
  className,
  as: Tag = 'button',
  duration = 1,
  clockwise = true,
  ...props
}: React.PropsWithChildren<
  {
    as?: React.ElementType;
    containerClassName?: string;
    className?: string;
    duration?: number;
    clockwise?: boolean;
  } & React.HTMLAttributes<HTMLElement>
>) {
  const [hovered, setHovered] = useState<boolean>(false);
  const [direction, setDirection] = useState<Direction>('TOP');

  const rotateDirection = useCallback(
    (currentDirection: Direction): Direction => {
      const directions: Direction[] = ['TOP', 'LEFT', 'BOTTOM', 'RIGHT'];
      const currentIndex = directions.indexOf(currentDirection);
      const nextIndex = clockwise
        ? (currentIndex - 1 + directions.length) % directions.length
        : (currentIndex + 1) % directions.length;
      return directions[nextIndex];
    },
    [clockwise]
  );

  const movingMap: Record<Direction, string> = {
    TOP: 'radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',
    LEFT: 'radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',
    BOTTOM:
      'radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',
    RIGHT:
      'radial-gradient(16.2% 41.199999999999996% at 100% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',
  };

  const highlight =
    'radial-gradient(75% 181.15942028985506% at 50% 50%, #3275F8 0%, rgba(255, 255, 255, 0) 100%)';

  useEffect(() => {
    const interval = setInterval(() => {
      setDirection((prevState) => rotateDirection(prevState));
    }, duration * 1000);

    return () => clearInterval(interval);
  }, [duration, rotateDirection, hovered]);

  const handleMouseEnter = () => {
    setHovered(true);
  };

  return (
    <Tag
      onMouseEnter={handleMouseEnter}
      onMouseLeave={() => setHovered(false)}
      className={cn(
        'relative flex h-min w-fit flex-col flex-nowrap content-center items-center justify-center gap-10 overflow-visible rounded-full border bg-black/20 decoration-clone p-px transition duration-500 hover:bg-black/10 dark:bg-white/20',
        containerClassName
      )}
      {...props}
    >
      <div
        className={cn(
          'z-10 w-auto rounded-[inherit] bg-black px-4 py-2 text-white',
          className
        )}
      >
        {children}
      </div>
      <motion.div
        className={cn(
          'absolute inset-0 z-0 flex-none overflow-hidden rounded-[inherit]'
        )}
        style={{
          filter: 'blur(2px)',
          position: 'absolute',
          width: '100%',
          height: '100%',
        }}
        initial={{ background: movingMap[direction] }}
        animate={{
          background: hovered
            ? [movingMap[direction], highlight]
            : movingMap[direction],
        }}
        transition={{ ease: 'linear', duration: duration ?? 1 }}
      />
      <div className='z-1 absolute inset-[2px] flex-none rounded-[100px] bg-black' />
    </Tag>
  );
}
</file>

<file path="src/components/ui/hover-button.tsx">
"use client"

import * as React from "react"
import { cn } from "@/lib/utils"

interface HoverButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode
}

const HoverButton = React.forwardRef<HTMLButtonElement, HoverButtonProps>(
  ({ className, children, ...props }, forwardedRef) => {
    const buttonRef = React.useRef<HTMLButtonElement>(null)
    const [isListening, setIsListening] = React.useState(false)
    const [circles, setCircles] = React.useState<Array<{
      id: number
      x: number
      y: number
      color: string
      fadeState: "in" | "out" | null
    }>>([])
    const lastAddedRef = React.useRef(0)

    const createCircle = React.useCallback((x: number, y: number) => {
      const buttonWidth = buttonRef.current?.offsetWidth || 0
      const xPos = x / buttonWidth
      const color = `linear-gradient(to right, var(--circle-start) ${xPos * 100}%, var(--circle-end) ${
        xPos * 100
      }%)`

      setCircles((prev) => [
        ...prev,
        { id: Date.now(), x, y, color, fadeState: null },
      ])
    }, [])

    const handlePointerMove = React.useCallback(
      (event: React.PointerEvent<HTMLButtonElement>) => {
        if (!isListening) return
        
        const currentTime = Date.now()
        if (currentTime - lastAddedRef.current > 100) {
          lastAddedRef.current = currentTime
          const rect = event.currentTarget.getBoundingClientRect()
          const x = event.clientX - rect.left
          const y = event.clientY - rect.top
          createCircle(x, y)
        }
      },
      [isListening, createCircle]
    )

    const handlePointerEnter = React.useCallback(() => {
      setIsListening(true)
    }, [])

    const handlePointerLeave = React.useCallback(() => {
      setIsListening(false)
    }, [])

    React.useEffect(() => {
      circles.forEach((circle) => {
        if (!circle.fadeState) {
          setTimeout(() => {
            setCircles((prev) =>
              prev.map((c) =>
                c.id === circle.id ? { ...c, fadeState: "in" } : c
              )
            )
          }, 0)

          setTimeout(() => {
            setCircles((prev) =>
              prev.map((c) =>
                c.id === circle.id ? { ...c, fadeState: "out" } : c
              )
            )
          }, 1000)

          setTimeout(() => {
            setCircles((prev) => prev.filter((c) => c.id !== circle.id))
          }, 2200)
        }
      })
    }, [circles])

    return (
      <button
        ref={(element) => {
          buttonRef.current = element;
          if (typeof forwardedRef === 'function') {
            forwardedRef(element);
          } else if (forwardedRef) {
            forwardedRef.current = element;
          }
        }}
        className={cn(
          "relative isolate px-8 py-3 rounded-md",
          "text-foreground font-medium text-base leading-6",
          "backdrop-blur-lg bg-[rgba(43,55,80,0.1)]",
          "cursor-pointer overflow-hidden",
          "before:content-[''] before:absolute before:inset-0",
          "before:rounded-[inherit] before:pointer-events-none",
          "before:z-[1]",
          "before:shadow-[inset_0_0_0_1px_rgba(170,202,255,0.2),inset_0_0_16px_0_rgba(170,202,255,0.1),inset_0_-3px_12px_0_rgba(170,202,255,0.15),0_1px_3px_0_rgba(0,0,0,0.50),0_4px_12px_0_rgba(0,0,0,0.45)]",
          "before:mix-blend-multiply before:transition-transform before:duration-300",
          "active:before:scale-[0.975]",
          className
        )}
        onPointerMove={handlePointerMove}
        onPointerEnter={handlePointerEnter}
        onPointerLeave={handlePointerLeave}
        {...props}
        style={{
          ["--circle-start" as string]: "var(--tw-gradient-from, #a0d9f8)",
          ["--circle-end" as string]: "var(--tw-gradient-to, #3a5bbf)",
        } as React.CSSProperties}
      >
        {circles.map(({ id, x, y, color, fadeState }) => (
          <div
            key={id}
            className={cn(
              "absolute w-3 h-3 -translate-x-1/2 -translate-y-1/2 rounded-full",
              "blur-lg pointer-events-none z-[-1] transition-opacity duration-300",
              fadeState === "in" && "opacity-75",
              fadeState === "out" && "opacity-0 duration-[1.2s]",
              !fadeState && "opacity-0"
            )}
            style={{
              left: x,
              top: y,
              background: color,
            }}
          />
        ))}
        {children}
      </button>
    )
  }
)

HoverButton.displayName = "HoverButton"

export { HoverButton }
</file>

<file path="src/components/ui/input-with-label-animation.tsx">
'use client';

import * as React from 'react';
import { Input } from '@/components/ui/atoms/input';
import { cn } from '@/lib/utils';

interface InputAnimationProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  error?: string;
  className?: string;
}

const InputAnimation = React.forwardRef<HTMLInputElement, InputAnimationProps>(
  ({ label, error, className, id, ...props }, ref) => {
    const generatedId = React.useId();
    const inputId = id || generatedId;

    return (
      <div className='group relative w-full'>
        <label
          htmlFor={inputId}
          className={cn(
            'origin-start absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm',
            'text-muted-foreground/70 transition-all',
            'group-focus-within:pointer-events-none group-focus-within:top-0',
            'group-focus-within:cursor-default group-focus-within:text-xs',
            'group-focus-within:font-medium group-focus-within:text-foreground',
            'has-[+input:not(:placeholder-shown)]:pointer-events-none',
            'has-[+input:not(:placeholder-shown)]:top-0',
            'has-[+input:not(:placeholder-shown)]:cursor-default',
            'has-[+input:not(:placeholder-shown)]:text-xs',
            'has-[+input:not(:placeholder-shown)]:font-medium',
            'has-[+input:not(:placeholder-shown)]:text-foreground',
            error && 'text-destructive'
          )}
        >
          <span className='inline-flex bg-background px-2'>{label}</span>
        </label>
        <Input
          ref={ref}
          id={inputId}
          placeholder=''
          className={cn(error && 'border-destructive', className)}
          aria-describedby={error ? `${inputId}-error` : undefined}
          {...props}
        />
        {error && (
          <span
            id={`${inputId}-error`}
            className='mt-1 text-xs text-destructive'
          >
            {error}
          </span>
        )}
      </div>
    );
  }
);

InputAnimation.displayName = 'InputAnimation';

export { InputAnimation };
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/loading-spinner.tsx">
'use client';

import { cn } from '@/lib/utils';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export function LoadingSpinner({
  size = 'md',
  className,
}: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
  };

  return (
    <div
      role="status"
      className={cn(
        'animate-spin rounded-full border-2 border-current border-t-transparent',
        sizeClasses[size],
        className
      )}
    />
  );
}
</file>

<file path="src/components/ui/magic-card.tsx">
"use client";

import { motion, useMotionTemplate, useMotionValue } from "motion/react";
import React, { useCallback, useEffect, useRef } from "react";

import { cn } from "@/lib/utils";

interface MagicCardProps extends React.HTMLAttributes<HTMLDivElement> {
  gradientSize?: number;
  gradientColor?: string;
  gradientOpacity?: number;
  gradientFrom?: string;
  gradientTo?: string;
}

export function MagicCard({
  children,
  className,
  gradientSize = 200,
  gradientColor = "#262626",
  gradientOpacity = 0.8,
  gradientFrom = "#9E7AFF",
  gradientTo = "#FE8BBB",
}: MagicCardProps) {
  const cardRef = useRef<HTMLDivElement>(null);
  const mouseX = useMotionValue(-gradientSize);
  const mouseY = useMotionValue(-gradientSize);

  const handleMouseMove = useCallback(
    (e: MouseEvent) => {
      if (cardRef.current) {
        const { left, top } = cardRef.current.getBoundingClientRect();
        const clientX = e.clientX;
        const clientY = e.clientY;
        mouseX.set(clientX - left);
        mouseY.set(clientY - top);
      }
    },
    [mouseX, mouseY],
  );

  const handleMouseOut = useCallback(
    (e: MouseEvent) => {
      if (!e.relatedTarget) {
        document.removeEventListener("mousemove", handleMouseMove);
        mouseX.set(-gradientSize);
        mouseY.set(-gradientSize);
      }
    },
    [handleMouseMove, mouseX, gradientSize, mouseY],
  );

  const handleMouseEnter = useCallback(() => {
    document.addEventListener("mousemove", handleMouseMove);
    mouseX.set(-gradientSize);
    mouseY.set(-gradientSize);
  }, [handleMouseMove, mouseX, gradientSize, mouseY]);

  useEffect(() => {
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseout", handleMouseOut);
    document.addEventListener("mouseenter", handleMouseEnter);

    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseout", handleMouseOut);
      document.removeEventListener("mouseenter", handleMouseEnter);
    };
  }, [handleMouseEnter, handleMouseMove, handleMouseOut]);

  useEffect(() => {
    mouseX.set(-gradientSize);
    mouseY.set(-gradientSize);
  }, [gradientSize, mouseX, mouseY]);

  return (
    <div
      ref={cardRef}
      className={cn("group relative flex size-full rounded-xl", className)}
    >
      <div className="absolute inset-px z-10 rounded-xl bg-background" />
      <div className="relative z-30">{children}</div>
      <motion.div
        className="pointer-events-none absolute inset-px z-10 rounded-xl opacity-0 transition-opacity duration-300 group-hover:opacity-100"
        style={{
          background: useMotionTemplate`
            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px, ${gradientColor}, transparent 100%)
          `,
          opacity: gradientOpacity,
        }}
      />
      <motion.div
        className="pointer-events-none absolute inset-0 rounded-xl bg-border duration-300 group-hover:opacity-100"
        style={{
          background: useMotionTemplate`
            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px,
              ${gradientFrom}, 
              ${gradientTo}, 
              hsl(var(--border)) 100%
            )
          `,
        }}
      />
    </div>
  );
}
</file>

<file path="src/components/ui/modal-pricing.tsx">
'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
} from '@/components/ui/dialog';

import { Button } from '@/components/ui/atoms/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/atoms/radio-group';
import { Check, Sparkles, Zap } from 'lucide-react';

interface PlanOption {
  id: string;
  name: string;
  price: string;
  description: string;
  features: string[];
}

const plansSample: PlanOption[] = [
  {
    id: 'basic',
    name: 'Basic',
    price: '$9',
    description: 'Perfect for side projects',
    features: ['5 projects', 'Basic analytics', '24h support'],
  },
  {
    id: 'pro',
    name: 'Pro',
    price: '$19',
    description: 'For professional developers',
    features: ['Unlimited projects', 'Advanced analytics', 'Priority support'],
  },
];

function ModalPricing({ plans = plansSample }: { plans: PlanOption[] }) {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState('pro');

  return (
    <>
      <div className='flex justify-center'>
        <Button
          onClick={() => setIsOpen(true)}
          className='bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-zinc-900 dark:hover:bg-zinc-100'
        >
          <Sparkles className='mr-2 h-4 w-4' />
          Upgrade Plan
        </Button>
      </div>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className='border border-zinc-200 bg-white dark:border-zinc-800 dark:bg-zinc-900 sm:max-w-[425px]'>
          <DialogHeader>
            <DialogTitle className='flex items-center gap-2 text-xl font-semibold text-zinc-900 dark:text-white'>
              <Zap className='h-5 w-5 text-zinc-900 dark:text-white' />
              Choose Your Plan
            </DialogTitle>
            <p className='text-sm text-zinc-600 dark:text-zinc-300'>
              Select the perfect plan for your needs. Upgrade or downgrade at
              any time.
            </p>
          </DialogHeader>

          <RadioGroup
            defaultValue={selectedPlan}
            onValueChange={setSelectedPlan}
            className='gap-4 py-4'
          >
            {plans.map((plan) => (
              <label
                key={plan.id}
                className={`relative flex cursor-pointer flex-col rounded-xl border-2 p-4 transition-all ${
                  selectedPlan === plan.id
                    ? 'border-zinc-900 bg-zinc-50 dark:border-white dark:bg-zinc-800/50'
                    : 'border-zinc-200 hover:border-zinc-300 dark:border-zinc-800 dark:hover:border-zinc-700'
                }`}
              >
                <RadioGroupItem value={plan.id} className='sr-only' />
                <div className='mb-2 flex items-center justify-between'>
                  <div>
                    <h3 className='text-sm font-semibold text-zinc-900 dark:text-white'>
                      {plan.name}
                    </h3>
                    <p className='text-sm text-zinc-600 dark:text-zinc-400'>
                      {plan.description}
                    </p>
                  </div>
                  <div className='flex items-baseline'>
                    <span className='text-2xl font-bold text-zinc-900 dark:text-white'>
                      {plan.price}
                    </span>
                    <span className='ml-1 text-zinc-500 dark:text-zinc-400'>
                      /mo
                    </span>
                  </div>
                </div>
                <ul className='mt-4 space-y-2'>
                  {plan.features.map((feature, index) => (
                    <li
                      key={index}
                      className='flex items-center text-sm text-zinc-600 dark:text-zinc-300'
                    >
                      <Check className='mr-2 h-4 w-4 text-zinc-900 dark:text-white' />
                      {feature}
                    </li>
                  ))}
                </ul>
                {selectedPlan === plan.id && (
                  <div className='absolute -right-2 -top-2'>
                    <span className='flex h-4 w-4 items-center justify-center rounded-full bg-zinc-900 dark:bg-white'>
                      <Check className='h-3 w-3 text-white dark:text-zinc-900' />
                    </span>
                  </div>
                )}
              </label>
            ))}
          </RadioGroup>

          <DialogFooter className='flex flex-col gap-2'>
            <Button
              onClick={() => setIsOpen(false)}
              className='w-full bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-zinc-900 dark:hover:bg-zinc-100'
            >
              Confirm Selection
            </Button>
            <Button
              variant='ghost'
              onClick={() => setIsOpen(false)}
              className='w-full text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white'
            >
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}

export { ModalPricing, PlanOption };
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn('absolute left-0 top-full flex justify-center')}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-lg border border-zinc-800 bg-zinc-900/95 text-zinc-400 shadow-lg backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 md:w-[var(--radix-navigation-menu-viewport-width)]',
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      'relative z-10 flex max-w-max flex-1 items-center justify-center',
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      'group flex flex-1 list-none items-center justify-center space-x-1',
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-10 w-max items-center justify-center text-sm font-medium transition-colors focus:outline-none disabled:pointer-events-none disabled:opacity-50'
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), 'group', className)}
    {...props}
  >
    {children}{' '}
    <ChevronDown
      className='relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180'
      aria-hidden='true'
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      'absolute left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:w-auto',
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
      className
    )}
    {...props}
  >
    <div className='relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm border-l border-t border-zinc-800 bg-zinc-900/95 shadow-md' />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
</file>

<file path="src/components/ui/section.tsx">
'use client'

import * as React from 'react'
import { cn } from '@/lib/utils'
import { Container } from './container'

interface SectionProps extends React.HTMLAttributes<HTMLElement> {
  as?: 'section' | 'aside' | 'div'
  container?: boolean
  spacing?: 'none' | 'sm' | 'md' | 'lg'
  background?: 'none' | 'primary' | 'secondary' | 'gradient'
}

const backgroundVariants = {
  none: '',
  primary: 'bg-background',
  secondary: 'bg-secondary/5',
  gradient: [
    'relative',
    'before:absolute before:inset-0',
    'before:bg-[radial-gradient(circle_at_center,rgba(30,58,138,0.15),transparent_50%)]',
  ].join(' '),
}

const spacingVariants = {
  none: '',
  sm: 'py-8 md:py-12',
  md: 'py-16 md:py-24',
  lg: 'py-24 md:py-32',
}

export function Section({
  as: Component = 'section',
  container = true,
  spacing = 'md',
  background = 'none',
  className,
  children,
  ...props
}: SectionProps) {
  const content = (
    <Component
      className={cn(
        backgroundVariants[background],
        spacingVariants[spacing],
        className
      )}
      {...props}
    >
      {children}
    </Component>
  )

  if (container) {
    return <Container>{content}</Container>
  }

  return content
}
</file>

<file path="src/components/ui/separator.tsx">
'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="src/components/ui/sheet.tsx">
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className='absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary'>
        <X className='h-4 w-4' />
        <span className='sr-only'>Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="src/components/ui/shiny-button.tsx">
'use client';

import { cn } from '@/lib/utils';
import type { MotionProps } from 'motion/react';
import { motion, type AnimationProps } from 'motion/react';
import React from 'react';

const animationProps = {
  initial: { '--x': '100%', scale: 0.8 },
  animate: { '--x': '-100%', scale: 1 },
  whileTap: { scale: 0.95 },
  transition: {
    repeat: Infinity,
    repeatType: 'loop',
    repeatDelay: 1,
    type: 'spring',
    stiffness: 20,
    damping: 15,
    mass: 2,
    scale: {
      type: 'spring',
      stiffness: 200,
      damping: 5,
      mass: 0.5,
    },
  },
} as AnimationProps;

interface ShinyButtonProps
  extends Omit<React.HTMLAttributes<HTMLElement>, keyof MotionProps>,
    MotionProps {
  children: React.ReactNode;
  className?: string;
}

export const ShinyButton = React.forwardRef<
  HTMLButtonElement,
  ShinyButtonProps
>(({ children, className, ...props }, ref) => {
  return (
    <motion.button
      ref={ref}
      className={cn(
        'relative whitespace-nowrap rounded-lg px-6 py-3 font-medium backdrop-blur-xl transition-shadow duration-300 ease-in-out hover:shadow dark:bg-[radial-gradient(circle_at_50%_0%,hsl(var(--primary)/10%)_0%,transparent_60%)] dark:hover:shadow-[0_0_20px_hsl(var(--primary)/10%)]',
        className
      )}
      {...animationProps}
      {...props}
    >
      <span
        className='relative block size-full text-sm uppercase tracking-wide text-[rgb(0,0,0,65%)] dark:font-light dark:text-[rgb(255,255,255,90%)]'
        style={{
          maskImage:
            'linear-gradient(-75deg,hsl(var(--primary)) calc(var(--x) + 20%),transparent calc(var(--x) + 30%),hsl(var(--primary)) calc(var(--x) + 100%))',
          whiteSpace: 'nowrap',
        }}
      >
        {children}
      </span>
      <span
        style={{
          mask: 'linear-gradient(rgb(0,0,0), rgb(0,0,0)) content-box,linear-gradient(rgb(0,0,0), rgb(0,0,0))',
          maskComposite: 'exclude',
        }}
        className='absolute inset-0 z-10 block rounded-[inherit] bg-[linear-gradient(-75deg,hsl(var(--primary)/10%)_calc(var(--x)+20%),hsl(var(--primary)/50%)_calc(var(--x)+25%),hsl(var(--primary)/10%)_calc(var(--x)+100%))] p-px'
      ></span>
    </motion.button>
  );
});

ShinyButton.displayName = 'ShinyButton';
</file>

<file path="src/components/ui/spotlight.tsx">
'use client';
import React from 'react';
import { motion } from 'motion/react';

type SpotlightProps = {
  gradientFirst?: string;
  gradientSecond?: string;
  gradientThird?: string;
  translateY?: number;
  width?: number;
  height?: number;
  smallWidth?: number;
  duration?: number;
  xOffset?: number;
};

export const Spotlight = ({
  gradientFirst = 'radial-gradient(68.54% 68.72% at 55.02% 31.46%, hsla(210, 100%, 85%, .08) 0, hsla(210, 100%, 55%, .02) 50%, hsla(210, 100%, 45%, 0) 80%)',
  gradientSecond = 'radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .06) 0, hsla(210, 100%, 55%, .02) 80%, transparent 100%)',
  gradientThird = 'radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .04) 0, hsla(210, 100%, 45%, .02) 80%, transparent 100%)',
  translateY = -350,
  width = 560,
  height = 1380,
  smallWidth = 240,
  duration = 7,
  xOffset = 100,
}: SpotlightProps = {}) => {
  return (
    <motion.div
      initial={{
        opacity: 0,
      }}
      animate={{
        opacity: 1,
      }}
      transition={{
        duration: 1.5,
      }}
      className='pointer-events-none absolute inset-0 h-full w-full'
    >
      <motion.div
        animate={{
          x: [0, xOffset, 0],
        }}
        transition={{
          duration,
          repeat: Infinity,
          repeatType: 'reverse',
          ease: 'easeInOut',
        }}
        className='absolute top-0 left-0 w-screen h-screen z-40 pointer-events-none'
      >
        <div
          style={{
            transform: `translateY(${translateY}px) rotate(-45deg)`,
            background: gradientFirst,
            width: `${width}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 left-0'
        />

        <div
          style={{
            transform: 'rotate(-45deg) translate(5%, -50%)',
            background: gradientSecond,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 left-0 origin-top-left'
        />

        <div
          style={{
            transform: 'rotate(-45deg) translate(-180%, -70%)',
            background: gradientThird,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 left-0 origin-top-left'
        />
      </motion.div>

      <motion.div
        animate={{
          x: [0, -xOffset, 0],
        }}
        transition={{
          duration,
          repeat: Infinity,
          repeatType: 'reverse',
          ease: 'easeInOut',
        }}
        className='absolute top-0 right-0 w-screen h-screen z-40 pointer-events-none'
      >
        <div
          style={{
            transform: `translateY(${translateY}px) rotate(45deg)`,
            background: gradientFirst,
            width: `${width}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 right-0'
        />

        <div
          style={{
            transform: 'rotate(45deg) translate(-5%, -50%)',
            background: gradientSecond,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 right-0 origin-top-right'
        />

        <div
          style={{
            transform: 'rotate(45deg) translate(180%, -70%)',
            background: gradientThird,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className='absolute top-0 right-0 origin-top-right'
        />
      </motion.div>
    </motion.div>
  );
};
</file>

<file path="src/components/ui/text-effect.tsx">
'use client';

import { cn } from '@/lib/utils';
import type { TargetAndTransition, Variants } from 'motion/react';
import { AnimatePresence, motion } from 'motion/react';
import React from 'react';

type PresetType = 'blur' | 'shake' | 'scale' | 'fade' | 'slide';

type TextEffectProps = {
  children: string;
  per?: 'word' | 'char' | 'line';
  as?: keyof React.JSX.IntrinsicElements;
  variants?: {
    container?: Variants;
    item?: Variants;
  };
  className?: string;
  preset?: PresetType;
  delay?: number;
  trigger?: boolean;
  onAnimationComplete?: () => void;
  segmentWrapperClassName?: string;
};

const defaultStaggerTimes: Record<'char' | 'word' | 'line', number> = {
  char: 0.03,
  word: 0.05,
  line: 0.1,
};

const defaultContainerVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.05,
    },
  },
  exit: {
    transition: { staggerChildren: 0.05, staggerDirection: -1 },
  },
};

const defaultItemVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
  },
  exit: { opacity: 0 },
};

const presetVariants: Record<
  PresetType,
  { container: Variants; item: Variants }
> = {
  blur: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, filter: 'blur(12px)' },
      visible: { opacity: 1, filter: 'blur(0px)' },
      exit: { opacity: 0, filter: 'blur(12px)' },
    },
  },
  shake: {
    container: defaultContainerVariants,
    item: {
      hidden: { x: 0 },
      visible: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.5 } },
      exit: { x: 0 },
    },
  },
  scale: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, scale: 0 },
      visible: { opacity: 1, scale: 1 },
      exit: { opacity: 0, scale: 0 },
    },
  },
  fade: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0 },
      visible: { opacity: 1 },
      exit: { opacity: 0 },
    },
  },
  slide: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, y: 20 },
      visible: { opacity: 1, y: 0 },
      exit: { opacity: 0, y: 20 },
    },
  },
};

const AnimationComponent: React.FC<{
  segment: string;
  variants: Variants;
  per: 'line' | 'word' | 'char';
  segmentWrapperClassName?: string;
}> = React.memo(({ segment, variants, per, segmentWrapperClassName }) => {
  const content =
    per === 'line' ? (
      <motion.span variants={variants} className='block'>
        {segment}
      </motion.span>
    ) : per === 'word' ? (
      <motion.span
        aria-hidden='true'
        variants={variants}
        className='inline-block whitespace-pre'
      >
        {segment}
      </motion.span>
    ) : (
      <motion.span className='inline-block whitespace-pre'>
        {segment.split('').map((char) => (
          <motion.span
            key={`text-char-${char}-${segment.indexOf(char)}-${Math.random().toString(36).substr(2, 5)}`}
            aria-hidden='true'
            variants={variants}
            className='inline-block whitespace-pre'
          >
            {char}
          </motion.span>
        ))}
      </motion.span>
    );

  if (!segmentWrapperClassName) {
    return content;
  }

  const defaultWrapperClassName = per === 'line' ? 'block' : 'inline-block';

  return (
    <span className={cn(defaultWrapperClassName, segmentWrapperClassName)}>
      {content}
    </span>
  );
});

AnimationComponent.displayName = 'AnimationComponent';

export function TextEffect({
  children,
  per = 'word',
  as = 'p',
  variants,
  className,
  preset,
  delay = 0,
  trigger = true,
  onAnimationComplete,
  segmentWrapperClassName,
}: TextEffectProps) {
  let segments: string[];

  if (per === 'line') {
    segments = children.split('\n');
  } else if (per === 'word') {
    segments = children.split(/(\s+)/);
  } else {
    segments = children.split('');
  }

  const MotionTag = motion[as as keyof typeof motion] as typeof motion.div;
  const selectedVariants = preset
    ? presetVariants[preset]
    : { container: defaultContainerVariants, item: defaultItemVariants };
  const containerVariants = variants?.container || selectedVariants.container;
  const itemVariants = variants?.item || selectedVariants.item;
  const ariaLabel = per === 'line' ? undefined : children;

  const stagger = defaultStaggerTimes[per];

  const delayedContainerVariants: Variants = {
    hidden: containerVariants.hidden,
    visible: {
      ...containerVariants.visible,
      transition: {
        ...(containerVariants.visible as TargetAndTransition)?.transition,
        staggerChildren:
          (containerVariants.visible as TargetAndTransition)?.transition
            ?.staggerChildren || stagger,
        delayChildren: delay,
      },
    },
    exit: containerVariants.exit,
  };

  return (
    <AnimatePresence mode='popLayout'>
      {trigger && (
        <MotionTag
          initial='hidden'
          animate='visible'
          exit='exit'
          variants={delayedContainerVariants}
          className={className}
          aria-label={ariaLabel}
          onAnimationComplete={onAnimationComplete}
        >
          {segments.map((segment) => (
            <AnimationComponent
              key={`text-segment-${segment.trim()}`}
              segment={segment}
              variants={itemVariants}
              per={per}
              segmentWrapperClassName={segmentWrapperClassName}
            />
          ))}
        </MotionTag>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/ui/text-reveal.tsx">
'use client';

import {
  motion,
  type MotionValue,
  useScroll,
  useTransform,
} from 'motion/react';
import type { ComponentPropsWithoutRef, FC, ReactNode } from 'react';
import { useRef } from 'react';
import { cn } from '@/lib/utils';

interface WordProps {
  children: ReactNode;
  progress: MotionValue<number>;
  range: [number, number];
}

const Word: FC<WordProps> = ({ children, progress, range }) => {
  const opacity = useTransform(
    progress,
    [range[0], range[0] + 0.015, range[1]],
    [0, 1, 1]
  );

  return (
    <motion.span
      style={{
        opacity,
      }}
      className='text-white'
    >
      {children}
    </motion.span>
  );
};

export interface TextRevealProps extends ComponentPropsWithoutRef<'div'> {
  text: string;
  progress?: MotionValue<number>;
  start?: number;
  end?: number;
}

export const TextReveal: FC<TextRevealProps> = ({
  text,
  className,
  progress,
  start = 0,
  end = 1,
}) => {
  const targetRef = useRef<HTMLDivElement | null>(null);
  const { scrollYProgress } = useScroll({
    target: targetRef,
    offset: ['start start', 'end start'],
  });

  const scrollProgress = progress || scrollYProgress;
  const words = text.split(' ');
  const totalDuration = end - start;
  const wordDuration = totalDuration / words.length;

  return (
    <div ref={targetRef} className={cn('relative', className)}>
      <p className='text-xl font-medium md:text-2xl'>
        {words.map((word, i) => {
          const wordStart = start + i * wordDuration;
          const wordEnd = wordStart + wordDuration;

          return (
            <span key={`${word}-${wordStart}`}>
              <Word progress={scrollProgress} range={[wordStart, wordEnd]}>
                {word}
              </Word>{' '}
            </span>
          );
        })}
      </p>
    </div>
  );
};
</file>

<file path="src/components/ui/toaster.tsx">
'use client';

import { useToast } from '@/lib/hooks/shared/useToast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/atoms/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className='grid gap-1'>
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="src/components/ui/tooltip.tsx">
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="src/components/ui/typography.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface TypographyProps extends React.HTMLAttributes<HTMLElement> {
  children: React.ReactNode;
  className?: string;
}

export function H1({ children, className, ...props }: TypographyProps) {
  return (
    <h1
      className={cn(
        "font-heading text-4xl font-bold tracking-tight",
        className
      )}
      {...props}
    >
      {children}
    </h1>
  );
}

export function H2({ children, className, ...props }: TypographyProps) {
  return (
    <h2
      className={cn(
        "font-heading text-3xl font-semibold tracking-tight",
        className
      )}
      {...props}
    >
      {children}
    </h2>
  );
}

export function H3({ children, className, ...props }: TypographyProps) {
  return (
    <h3
      className={cn(
        "font-heading text-2xl font-semibold tracking-tight",
        className
      )}
      {...props}
    >
      {children}
    </h3>
  );
}

export function H4({ children, className, ...props }: TypographyProps) {
  return (
    <h4
      className={cn(
        "font-heading text-xl font-semibold tracking-tight",
        className
      )}
      {...props}
    >
      {children}
    </h4>
  );
}

export function P({ children, className, ...props }: TypographyProps) {
  return (
    <p
      className={cn("text-base leading-7", className)}
      {...props}
    >
      {children}
    </p>
  );
}

export function Lead({ children, className, ...props }: TypographyProps) {
  return (
    <p
      className={cn("text-xl text-muted-foreground", className)}
      {...props}
    >
      {children}
    </p>
  );
}

export function Large({ children, className, ...props }: TypographyProps) {
  return (
    <p
      className={cn("text-lg font-semibold", className)}
      {...props}
    >
      {children}
    </p>
  );
}

export function Small({ children, className, ...props }: TypographyProps) {
  return (
    <small
      className={cn("text-sm font-medium leading-none", className)}
      {...props}
    >
      {children}
    </small>
  );
}

export function Subtle({ children, className, ...props }: TypographyProps) {
  return (
    <p
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    >
      {children}
    </p>
  );
}

export function Overline({ children, className, ...props }: TypographyProps) {
  return (
    <p
      className={cn(
        "text-sm uppercase tracking-widest font-medium",
        className
      )}
      {...props}
    >
      {children}
    </p>
  );
}

export function GradientText({ children, className, ...props }: TypographyProps) {
  return (
    <span
      className={cn("gradient-text", className)}
      {...props}
    >
      {children}
    </span>
  );
}
</file>

<file path="src/lib/api/knowledge/hooks.ts">
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import { KnowledgeService } from '@/models/server/knowledge';
import { useKnowledgeStore } from '@/store/useKnowledgeStore';
import type {
  KnowledgeEntry,
  KnowledgeCategory,
  PaginatedResult,
} from '@/types/core/knowledge';

export const useMainCategories = () => {
  return useQuery<KnowledgeCategory[]>({
    queryKey: ['knowledge', 'main-categories'],
    queryFn: () => KnowledgeService.getMainCategories(),
    staleTime: 60 * 1000, // 1 minute
    gcTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useSubcategories = (mainCategoryId: string) => {
  return useQuery<KnowledgeCategory[]>({
    queryKey: ['knowledge', 'subcategories', mainCategoryId],
    queryFn: () => KnowledgeService.getSubcategories(mainCategoryId),
    enabled: !!mainCategoryId,
    staleTime: 30 * 1000,
  });
};

export const useKnowledgeEntries = () => {
  const { selectedCategory, searchQuery } = useKnowledgeStore();
  return useInfiniteQuery<PaginatedResult<KnowledgeEntry>>({
    queryKey: ['knowledge', 'entries', selectedCategory, searchQuery],
    queryFn: ({ pageParam = 1 }) =>
      KnowledgeService.listKnowledgeEntries({
        categoryId: selectedCategory || undefined,
        searchQuery: searchQuery || undefined,
        page: pageParam as number,
      }),
    getNextPageParam: (lastPage) => lastPage.nextPage,
    initialPageParam: 1,
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

export function useKnowledgeEntry(slug: string) {
  return useQuery<KnowledgeEntry | null, Error>({
    queryKey: ['knowledge', 'entry', slug],
    queryFn: async () => {
      const entry = await KnowledgeService.getEntryBySlug(slug);
      if (!entry) throw new Error('Entry not found');
      return entry;
    },
    enabled: !!slug,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}

export const useFeaturedKnowledge = (_limit = 3) => {
  return useQuery({
    queryKey: ['knowledge', 'featured'],
    queryFn: () => KnowledgeService.listFeaturedEntries(),
  });
};
</file>

<file path="src/lib/api/resources/hooks.ts">
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import { ResourceService } from '@/models/server/resources';
import { useResourcesStore } from '@/store/useResourcesStore';
import type {
  ResourceEntry,
  ResourceCategory,
  PaginatedResult,
} from '@/types/core/resources';

export const useMainCategories = () => {
  return useQuery<ResourceCategory[]>({
    queryKey: ['resources', 'main-categories'],
    queryFn: () => ResourceService.getMainCategories(),
    staleTime: 60 * 1000, // 1 minute
    gcTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useSubcategories = (mainCategoryId: string) => {
  return useQuery<ResourceCategory[]>({
    queryKey: ['resources', 'subcategories', mainCategoryId],
    queryFn: () => ResourceService.getSubcategories(mainCategoryId),
    enabled: !!mainCategoryId,
    staleTime: 30 * 1000,
  });
};

export const useResourceEntries = () => {
  const { selectedCategory, searchQuery } = useResourcesStore();
  return useInfiniteQuery<PaginatedResult<ResourceEntry>>({
    queryKey: ['resources', 'entries', selectedCategory, searchQuery],
    queryFn: ({ pageParam = 1 }) =>
      ResourceService.listResourceEntries({
        categoryId: selectedCategory || undefined,
        searchQuery: searchQuery || undefined,
        page: pageParam as number,
      }),
    getNextPageParam: (lastPage) => lastPage.nextPage,
    initialPageParam: 1,
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

export function useResourceEntry(slug: string) {
  return useQuery({
    queryKey: ['resources', 'entry', slug],
    queryFn: async () => {
      const entry = await ResourceService.getEntryBySlug(slug);
      if (!entry) throw new Error('Resource not found');
      return entry;
    },
    enabled: !!slug,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}

export const useFeaturedResources = (limit = 3) => {
  return useQuery<ResourceEntry[]>({
    queryKey: ['resources', 'featured', limit],
    queryFn: () => ResourceService.listFeaturedEntries(limit),
    select: (data) => data.slice(0, limit),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};
</file>

<file path="src/lib/config/env.ts">
const env = {
  appwrite: {
    endpoint: String(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT),
    projectId: String(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID),
    apikey: String(process.env.APPWRITE_API_KEY),
  },
};

export default env;
</file>

<file path="src/lib/hooks/auth/useForgotPassword.ts">
import { useState } from 'react';
import { useAuthStore } from '@/store/Auth';
import { z } from 'zod';

const forgotPasswordSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
});

export function useForgotPasswordForm() {
  const { requestPasswordReset } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const email = formData.get('email') as string;

    try {
      forgotPasswordSchema.parse({ email });
      setIsLoading(true);
      setError('');

      const response = await requestPasswordReset(email);
      if (response.error) {
        setError(response.error.message);
      } else {
        setSuccess(true);
      }
    } catch (err) {
      if (err instanceof z.ZodError) {
        setError(err.errors[0].message);
      } else {
        setError('An unexpected error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return { isLoading, error, success, handleSubmit };
}
</file>

<file path="src/lib/hooks/auth/useLogin.ts">
import { useState } from 'react';
import { z } from 'zod';
import { useAuthStore } from '@/store/Auth';

const loginSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(1, 'Password is required'),
});

export type LoginFormData = z.infer<typeof loginSchema>;

export function useLoginForm() {
  const { login } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const formValues = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
    };

    try {
      loginSchema.parse(formValues);
      setIsLoading(true);
      setError('');

      const loginResponse = await login(formValues.email, formValues.password);
      if (loginResponse.error) {
        setError(loginResponse.error.message);
      }
    } catch (err) {
      if (err instanceof z.ZodError) {
        setError(err.errors[0].message);
      } else {
        setError('An unexpected error occurred');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return { isLoading, error, handleSubmit };
}
</file>

<file path="src/lib/hooks/auth/useRegister.ts">
import { useState } from 'react';
import { z } from 'zod';
import { useAuthStore } from '@/store/Auth';

const registerSchema = z.object({
  firstname: z.string().min(2, 'First name must be at least 2 characters'),
  lastname: z.string().min(2, 'Last name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  password: z
    .string()
    .min(8, 'Password must be at least 8 characters')
    .regex(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
      'Password must contain at least one uppercase letter, one lowercase letter, and one number'
    ),
});

export type RegisterFormData = z.infer<typeof registerSchema>;

export function useRegisterForm() {
  const { createAccount, login } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const formValues = {
      firstname: formData.get('firstname') as string,
      lastname: formData.get('lastname') as string,
      email: formData.get('email') as string,
      password: formData.get('password') as string,
    };

    try {
      registerSchema.parse(formValues);
      setIsLoading(true);
      setError('');

      const response = await createAccount(
        `${formValues.firstname} ${formValues.lastname}`,
        formValues.email,
        formValues.password
      );

      if (response.error) {
        setError(response.error.message);
        return;
      }

      const loginResponse = await login(formValues.email, formValues.password);
      if (loginResponse.error) {
        setError(loginResponse.error.message);
      }
    } catch (err) {
      if (err instanceof z.ZodError) {
        setError(err.errors[0].message);
      } else {
        setError('An unexpected error occurred');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return { isLoading, error, handleSubmit };
}
</file>

<file path="src/lib/hooks/auth/useResetPassword.ts">
import { useState } from 'react';
import { useAuthStore } from '@/store/Auth';
import { z } from 'zod';

const resetPasswordSchema = z
  .object({
    password: z
      .string()
      .min(8, 'Password must be at least 8 characters')
      .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
      .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
      .regex(/[0-9]/, 'Password must contain at least one number'),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
  });

export function useResetPasswordForm(userId: string, secret: string) {
  const { confirmPasswordReset } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const password = formData.get('password') as string;
    const confirmPassword = formData.get('confirmPassword') as string;

    try {
      resetPasswordSchema.parse({ password, confirmPassword });
      setIsLoading(true);
      setError('');

      const response = await confirmPasswordReset(userId, secret, password);
      if (response.error) {
        setError(response.error.message);
      } else {
        setSuccess(true);
      }
    } catch (err) {
      if (err instanceof z.ZodError) {
        setError(err.errors[0].message);
      } else {
        setError('An unexpected error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return { isLoading, error, success, handleSubmit };
}
</file>

<file path="src/lib/hooks/auth/useVerifyEmail.ts">
import { useState, useEffect } from 'react';
import { useAuthStore } from '@/store/Auth';

export function useVerifyEmailForm(userId: string, secret: string) {
  const { verifyEmail } = useAuthStore();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    const verifyEmailToken = async () => {
      try {
        const response = await verifyEmail(userId, secret);
        if (response.error) {
          setError(response.error.message);
        } else {
          setSuccess(true);
        }
      } catch (err) {
        setError(
          err instanceof Error
            ? err.message
            : 'Failed to verify email. Please try again.'
        );
      } finally {
        setIsLoading(false);
      }
    };

    if (userId && secret) {
      void verifyEmailToken();
    } else {
      setError('Invalid verification link');
      setIsLoading(false);
    }
  }, [userId, secret, verifyEmail]);

  return { isLoading, error, success };
}
</file>

<file path="src/lib/hooks/shared/useDebounce.ts">
'use client';

import { useEffect, useState } from 'react';

export function useDebounce<T>(value: T, delay?: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);
    return () => clearTimeout(timer);
  }, [value, delay]);

  return debouncedValue;
}
</file>

<file path="src/lib/hooks/shared/useMobile.ts">
import _React, { useEffect, useState } from 'react';

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = useState<boolean | undefined>(undefined);

  useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener('change', onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener('change', onChange);
  }, []);

  return !!isMobile;
}
</file>

<file path="src/lib/hooks/shared/useOutsideClick.tsx">
import type React from 'react';
import { useEffect } from 'react';

export const useOutsideClick = (
  ref: React.RefObject<HTMLDivElement>,
  callback: (event: MouseEvent | TouchEvent) => void
) => {
  useEffect(() => {
    const listener = (event: MouseEvent | TouchEvent) => {
      // DO NOTHING if the element being clicked is the target element or their children
      if (!ref.current || ref.current.contains(event.target as Node)) {
        return;
      }
      callback(event);
    };

    document.addEventListener('mousedown', listener);
    document.addEventListener('touchstart', listener);

    return () => {
      document.removeEventListener('mousedown', listener);
      document.removeEventListener('touchstart', listener);
    };
  }, [ref, callback]);
};
</file>

<file path="src/lib/hooks/shared/useScroll.ts">
import { useState, useEffect } from 'react';

export function useScroll(threshold = 20) {
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > threshold);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [threshold]);

  return isScrolled;
}
</file>

<file path="src/lib/hooks/shared/useScrollDirection.ts">
'use client';

import { useEffect, useState } from 'react';

export function useScrollDirection() {
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      setIsVisible(currentScrollY <= lastScrollY || currentScrollY < 20);
      setLastScrollY(currentScrollY);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [lastScrollY]);

  return { isVisible };
}
</file>

<file path="src/lib/hooks/shared/useToast.ts">
'use client';

// Inspired by react-hot-toast library
import * as React from 'react';

import type {
  ToastActionElement,
  ToastProps,
} from '@/components/ui/atoms/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const _actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof _actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };
</file>

<file path="src/lib/hooks/useKnowledgeRevalidation.ts">
import { useMutation } from '@tanstack/react-query';

export function useKnowledgeRevalidation() {
  return useMutation({
    mutationFn: async (tags: string[]) => {
      const responses = await Promise.all(
        tags.map((tag) =>
          fetch(`/api/revalidate?tag=${encodeURIComponent(tag)}`)
        )
      );
      return responses.every((res) => res.ok);
    },
  });
}
</file>

<file path="src/lib/hooks/useResourcesRevalidation.ts">
import { useMutation } from '@tanstack/react-query';

export function useResourcesRevalidation() {
  return useMutation({
    mutationFn: async (tags: string[]) => {
      const responses = await Promise.all(
        tags.map((tag) =>
          fetch(`/api/revalidate?tag=${encodeURIComponent(tag)}`)
        )
      );
      return responses.every((res) => res.ok);
    },
  });
}
</file>

<file path="src/lib/providers/query-provider.tsx">
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useState } from 'react';

export function QueryProvider({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            staleTime: 60 * 1000,
            refetchOnWindowFocus: false,
          },
        },
      })
  );

  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
}
</file>

<file path="src/lib/providers/smooth-scroll.tsx">
'use client';

import Lenis from 'lenis';
import { useEffect } from 'react';

export function SmoothScroll() {
  useEffect(() => {
    const lenis = new Lenis({
      duration: 1.2,
      easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
      orientation: 'vertical',
      gestureOrientation: 'vertical',
      smoothWheel: true,
      wheelMultiplier: 1,
      touchMultiplier: 2,
    });

    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);

    // Cleanup
    return () => {
      lenis.destroy();
    };
  }, []);

  return null;
}
</file>

<file path="src/lib/repositories/core/appwrite-base.repository.ts">
import { ID, type Models } from 'appwrite';
import { databases } from '@/models/client/config';
import type { IRepository } from './types';
import { DataAccessError } from './errors';
import type { PaginatedResult } from '@/types/core/knowledge/query';

export abstract class AppwriteBaseRepository<T> implements IRepository<T> {
  constructor(
    protected readonly databaseId: string,
    protected readonly collectionId: string
  ) {}

  protected abstract mapDocument(document: Models.Document): T;

  async create(
    entity: Omit<T, '$id' | '$createdAt' | '$updatedAt'>
  ): Promise<T> {
    try {
      const response = await databases.createDocument(
        this.databaseId,
        this.collectionId,
        ID.unique(),
        entity
      );
      return this.mapDocument(response);
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }

  async update(id: string, entity: Partial<T>): Promise<T> {
    try {
      const response = await databases.updateDocument(
        this.databaseId,
        this.collectionId,
        id,
        entity
      );
      return this.mapDocument(response);
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }

  async delete(id: string): Promise<void> {
    try {
      await databases.deleteDocument(this.databaseId, this.collectionId, id);
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }

  async findById(id: string): Promise<T> {
    try {
      const response = await databases.getDocument(
        this.databaseId,
        this.collectionId,
        id
      );
      return this.mapDocument(response);
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }

  async findAll(
    filters: Record<string, unknown> = {},
    options: {
      queries?: string[];
      page?: number;
      pageSize?: number;
    } = {}
  ): Promise<PaginatedResult<T>> {
    try {
      const pageSize = options.pageSize || 9;
      const page = options.page || 1;
      const offset = (page - 1) * pageSize;

      const queries = [
        `limit(${pageSize})`,
        `offset(${offset})`,
        ...(options.queries || []),
      ];

      Object.entries(filters).forEach(([key, value]) => {
        if (value) queries.push(`equal(${key}, ${value})`);
      });

      const response = await databases.listDocuments(
        this.databaseId,
        this.collectionId,
        queries
      );

      return {
        documents: response.documents.map((document) =>
          this.mapDocument(document)
        ),
        total: response.total,
        hasMore: response.total > offset + pageSize,
        nextPage: page + 1,
      };
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }

  async findBySlug(slug: string): Promise<T> {
    try {
      const response = await databases.listDocuments(
        this.databaseId,
        this.collectionId,
        [`equal(slug, ${slug})`, 'limit(1)']
      );

      if (response.documents.length === 0) {
        throw new DataAccessError(404, `Document with slug ${slug} not found`);
      }

      return this.mapDocument(response.documents[0]);
    } catch (error) {
      throw new DataAccessError(
        error instanceof Error && 'code' in error
          ? (error.code as number)
          : 500,
        error instanceof Error ? error.message : 'Unknown error occurred'
      );
    }
  }
}
</file>

<file path="src/lib/repositories/core/errors.ts">
export class DataAccessError extends Error {
  constructor(
    public readonly code: number,
    message: string
  ) {
    super(message);
    this.name = 'DataAccessError';
  }
}
</file>

<file path="src/lib/repositories/core/types.ts">
import type { PaginatedResult } from '@/types/core/knowledge';

export interface IRepository<T> {
  create(entity: Omit<T, '$id' | '$createdAt' | '$updatedAt'>): Promise<T>;
  update(id: string, entity: Partial<T>): Promise<T>;
  delete(id: string): Promise<void>;
  findById(id: string): Promise<T>;
  findAll(
    filters?: Record<string, unknown>,
    options?: {
      queries?: string[];
      page?: number;
      pageSize?: number;
    }
  ): Promise<PaginatedResult<T>>;
  findBySlug(slug: string): Promise<T>;
}
</file>

<file path="src/lib/repositories/knowledge/knowledge.repository.ts">
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import type { KnowledgeCategory } from '@/types/core/knowledge/category';
import {
  db,
  knowledgeCollection,
  knowledgeCategoriesCollection,
} from '@/models/name';
import { AppwriteBaseRepository } from '../core/appwrite-base.repository';
import type { Models } from 'appwrite';

export class KnowledgeEntryRepository extends AppwriteBaseRepository<KnowledgeEntry> {
  constructor() {
    super(db, knowledgeCollection);
  }

  protected mapDocument(document: Models.Document): KnowledgeEntry {
    return {
      $id: document.$id,
      title: document.title,
      slug: document.slug,
      type: document.type,
      summary: document.summary,
      content: document.content,
      categoryId: document.knowledgeCategoryIds ?? '',
      categorySlug:
        document.knowledgeCategorySlug ?? document.knowledgeCategoryIds ?? '',
      featured: document.featured,
      imageUrl: document.imageUrl,
      $createdAt: new Date(document.$createdAt).toISOString(),
      $updatedAt: new Date(document.$updatedAt).toISOString(),
      $permissions: document.$permissions,
    };
  }

  async listFeaturedEntries(limit = 3): Promise<KnowledgeEntry[]> {
    const result = await this.findAll(
      { featured: true },
      {
        queries: ['orderDesc($createdAt)', `limit(${limit})`],
      }
    );
    return result.documents;
  }
}

export class KnowledgeCategoryRepository extends AppwriteBaseRepository<KnowledgeCategory> {
  constructor() {
    super(db, knowledgeCategoriesCollection);
  }

  protected mapDocument(document: Models.Document): KnowledgeCategory {
    return {
      $id: document.$id,
      name: document.name,
      slug: document.slug,
      description: document.description,
      order: document.order,
      isActive: document.isActive,
      iconUrl: document.iconUrl,
      imageUrl: document.imageUrl,
      $createdAt: new Date(document.$createdAt).toISOString(),
      $updatedAt: new Date(document.$updatedAt).toISOString(),
    };
  }

  async listActiveCategories(): Promise<KnowledgeCategory[]> {
    const result = await this.findAll(
      { isActive: true },
      {
        queries: ['orderAsc(order)'],
      }
    );
    return result.documents;
  }
}
</file>

<file path="src/lib/repositories/resources/resource.repository.ts">
import type { ResourceEntry } from '@/types/core/resources/entry';
import type { ResourceCategory } from '@/types/core/resources/category';
import {
  db,
  resourcesCollection,
  resourceCategoriesCollection,
} from '@/models/name';
import { AppwriteBaseRepository } from '@/lib/repositories/core/appwrite-base.repository';
import type { Models } from 'appwrite';
import { Query } from 'appwrite';

export class ResourceRepository extends AppwriteBaseRepository<ResourceEntry> {
  constructor() {
    super(db, resourcesCollection);
  }

  protected mapDocument(document: Models.Document): ResourceEntry {
    return {
      $id: document.$id,
      title: document.title,
      slug: document.slug,
      type: document.type,
      summary: document.summary,
      content: document.content,
      imageUrl: document.imageUrl,
      featured: document.featured,
      categoryId: document.categoryId,
      categorySlug: document.categorySlug,
      $createdAt: document.$createdAt,
      $updatedAt: document.$updatedAt,
      $permissions: document.$permissions,
    };
  }

  async listFeaturedEntries(limit = 3): Promise<ResourceEntry[]> {
    const result = await this.findAll({
      queries: [
        Query.equal('featured', true),
        Query.orderDesc('$createdAt'),
        Query.limit(limit),
      ],
    });
    return result.documents;
  }
}

export class ResourceCategoryRepository extends AppwriteBaseRepository<ResourceCategory> {
  constructor() {
    super(db, resourceCategoriesCollection);
  }

  protected mapDocument(document: Models.Document): ResourceCategory {
    return {
      $id: document.$id,
      name: document.name,
      slug: document.slug,
      description: document.description,
      imageUrl: document.imageUrl,
      iconUrl: document.iconUrl,
      mainCategoryId: document.mainCategoryId,
      order: document.order,
      isActive: document.isActive,
      type: document.type,
      $createdAt: document.$createdAt,
      $updatedAt: document.$updatedAt,
    };
  }

  async listActiveCategories(): Promise<ResourceCategory[]> {
    const result = await this.findAll({
      queries: [Query.equal('isActive', true), Query.orderAsc('order')],
    });
    return result.documents;
  }
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}
</file>

<file path="src/lib/webhooks.ts">
export const validateRequest = (req: Request) => {
  const headers = Object.fromEntries(req.headers.entries());
  return (
    headers['x-appwrite-webhook-secret'] === process.env.APPWRITE_WEBHOOK_SECRET
  );
};
</file>

<file path="src/models/client/config.ts">
import env from '@/lib/config/env';

import { Client, Account, Databases, Storage } from 'appwrite';

const client = new Client()
  .setEndpoint(env.appwrite.endpoint)
  .setProject(env.appwrite.projectId);

const databases = new Databases(client);
const account = new Account(client);
const storage = new Storage(client);

export { client, account, databases, storage };
</file>

<file path="src/models/server/api.ts">
import { Client, Account, Databases, type Models, Query } from 'appwrite';
import env from '@/lib/config/env';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import { knowledgeCategoriesCollection } from '@/models/name';

if (!env.appwrite.projectId) {
  throw new Error('NEXT_PUBLIC_APPWRITE_PROJECT_ID is not defined');
}

if (!env.appwrite.endpoint) {
  throw new Error('NEXT_PUBLIC_APPWRITE_ENDPOINT is not defined');
}

if (!process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_DATABASE_ID) {
  throw new Error('NEXT_PUBLIC_APPWRITE_KNOWLEDGE_DATABASE_ID is not defined');
}

if (!process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_COLLECTION_ID) {
  throw new Error(
    'NEXT_PUBLIC_APPWRITE_KNOWLEDGE_COLLECTION_ID is not defined'
  );
}

export const client = new Client()
  .setEndpoint(env.appwrite.endpoint)
  .setProject(env.appwrite.projectId);

export const account = new Account(client);
export const databases = new Databases(client);

export const knowledgeApi = {
  async fetchKnowledgeEntries(params: {
    categoryId?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
  }) {
    const { categoryId, page = 1, limit = 9, sortBy = 'latest' } = params;

    const queries = [];

    if (categoryId) {
      queries.push(Query.equal('knowledgeCategoryIds', categoryId));
    }

    if (sortBy === 'latest') {
      queries.push(Query.orderDesc('$createdAt'));
    } else if (sortBy === 'popular') {
      queries.push(Query.orderDesc('views'));
    }

    queries.push(Query.limit(limit));
    queries.push(Query.offset((page - 1) * limit));
    queries.push(
      Query.select([
        '$id',
        'title',
        'slug',
        'summary',
        'content',
        'knowledgeCategoryIds',
        'featured',
        'imageUrl',
      ])
    );

    const response = await databases.listDocuments<
      Models.Document & KnowledgeEntry
    >(
      process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_DATABASE_ID || '',
      process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_COLLECTION_ID || '',
      queries
    );

    // Add category slug mapping logic
    const entries = await Promise.all(
      response.documents.map(async (doc) => {
        const categorySlug = await this.getCategorySlug(
          doc.knowledgeCategoryIds
        );
        return {
          ...doc,
          categorySlug,
        };
      })
    );

    return {
      entries,
      total: response.total,
    };
  },

  async getCategorySlug(categoryId: string): Promise<string> {
    const response = await databases.listDocuments(
      process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_DATABASE_ID || '',
      knowledgeCategoriesCollection,
      [Query.equal('$id', categoryId), Query.select(['slug'])]
    );
    return response.documents[0]?.slug || 'uncategorized';
  },
};
</file>

<file path="src/models/server/config.ts">
import env from '@/lib/config/env';

import { Client, Databases, Storage, Users } from 'node-appwrite';

const client = new Client();

client
  .setEndpoint(env.appwrite.endpoint)
  .setProject(env.appwrite.projectId)
  .setKey(env.appwrite.apikey);

const databases = new Databases(client);
const users = new Users(client);
const storage = new Storage(client);

export { client, users, databases, storage };
</file>

<file path="src/models/server/dbSetup.ts">
import { databases } from './config';
import { db } from '../name';

export default async function getOrCreateDB() {
  try {
    // Verify the database exists; we assume your collections are already setup.
    await databases.get(db);
  } catch (error) {
    console.error(
      'Database error. Make sure your database exists in Appwrite.',
      error
    );
    throw error;
  }
  return databases;
}
</file>

<file path="src/models/server/knowledge.ts">
import { Query, type Models, AppwriteException } from 'appwrite'; // <-- added AppwriteException here
import { databases } from '@/models/client/config';
import {
  db,
  mainCategoriesCollection,
  knowledgeCategoriesCollection,
  knowledgeCollection,
} from '@/models/name';
import type { KnowledgeEntry } from '@/types/core/knowledge/entry';
import type { KnowledgeCategory } from '@/types/core/knowledge/category';
import type { PaginatedResult } from '@/types/core/shared/pagination';

type KnowledgeDocument = Models.Document & KnowledgeEntry;
type KnowledgeCategoryDocument = Models.Document & KnowledgeCategory;

export class KnowledgeError extends Error {
  constructor(
    public code: number,
    message: string,
    public type: string = 'KnowledgeError'
  ) {
    super(message);
    this.name = 'KnowledgeError';
  }
}

/**
 * Helper to look up a category’s slug by its ID.
 * Returns 'uncategorized' if not found.
 */
const _getCategorySlugById = async (id: string): Promise<string> => {
  try {
    const response = await databases.listDocuments<KnowledgeDocument>(
      db,
      knowledgeCategoriesCollection,
      [Query.equal('$id', id), Query.select(['slug'])]
    );
    return response.documents[0]?.slug || 'uncategorized';
  } catch {
    return 'uncategorized';
  }
};

export const KnowledgeService = {
  async getMainCategories(): Promise<KnowledgeCategory[]> {
    try {
      const response = await databases.listDocuments<KnowledgeCategoryDocument>(
        db,
        mainCategoriesCollection,
        [Query.equal('isActive', true), Query.orderAsc('order')]
      );
      return response.documents;
    } catch {
      throw new KnowledgeError(500, 'Failed to fetch main categories');
    }
  },

  async getSubcategories(mainCategoryId: string): Promise<KnowledgeCategory[]> {
    try {
      const response = await databases.listDocuments<KnowledgeCategoryDocument>(
        db,
        knowledgeCategoriesCollection,
        [
          Query.equal('mainCategoryId', mainCategoryId),
          Query.equal('isActive', true),
          Query.orderAsc('order'),
        ]
      );
      return response.documents;
    } catch {
      throw new KnowledgeError(500, 'Failed to fetch subcategories');
    }
  },

  async getKnowledgeCategories(): Promise<KnowledgeCategory[]> {
    try {
      if (!db || !knowledgeCategoriesCollection) {
        throw new KnowledgeError(
          500,
          'Missing required environment variables for knowledge categories'
        );
      }

      const response = await databases.listDocuments<KnowledgeCategoryDocument>(
        db,
        knowledgeCategoriesCollection,
        [
          Query.equal('isActive', true),
          Query.orderAsc('order'),
          Query.select([
            '$id',
            'name',
            'slug',
            'description',
            'order',
            'isActive',
            'iconUrl',
            'imageUrl',
            'mainCategoryId',
            '$createdAt',
            '$updatedAt',
          ]),
        ]
      );
      return response.documents;
    } catch (error) {
      console.error('Error fetching knowledge categories:', error);
      throw new KnowledgeError(500, 'Failed to fetch knowledge categories');
    }
  },

  async listKnowledgeEntries({
    categoryId,
    searchQuery,
    page = 1,
    pageSize = 9,
  }: {
    categoryId?: string;
    searchQuery?: string;
    page?: number;
    pageSize?: number;
  }): Promise<PaginatedResult<KnowledgeEntry>> {
    try {
      const queries = [];

      if (categoryId) {
        queries.push(Query.equal('knowledgeCategoryIds', [categoryId]));
      }

      if (searchQuery) {
        queries.push(Query.search('title', searchQuery));
      }

      queries.push(Query.orderDesc('$createdAt'));
      queries.push(Query.limit(pageSize));
      queries.push(Query.offset((page - 1) * pageSize));
      queries.push(
        Query.select([
          '$id',
          'title',
          'slug',
          'summary',
          'content',
          'featured',
          'imageUrl',
          'mainCategoryId',
          'knowledgeCategoryIds',
          '$createdAt',
          '$updatedAt',
          '$permissions',
        ])
      );

      const response = await databases.listDocuments<KnowledgeDocument>(
        db,
        knowledgeCollection,
        queries
      );

      return {
        documents: response.documents,
        total: response.total,
        hasMore: response.total > page * pageSize,
        nextPage: page + 1,
      };
    } catch (error) {
      console.error('Error in listKnowledgeEntries:', error);
      return {
        documents: [],
        total: 0,
        hasMore: false,
        nextPage: 1,
      };
    }
  },

  async getEntryBySlug(slug: string): Promise<KnowledgeEntry | null> {
    try {
      const response = await databases.listDocuments<KnowledgeDocument>(
        db,
        knowledgeCollection,
        [Query.equal('slug', slug)]
      );
      if (response.documents.length === 0) {
        return null;
      }
      return response.documents[0];
    } catch {
      return null;
    }
  },

  async listFeaturedEntries(): Promise<KnowledgeEntry[]> {
    try {
      const response = await databases.listDocuments<KnowledgeDocument>(
        db,
        knowledgeCollection,
        [Query.equal('featured', true), Query.limit(3)]
      );
      return response.documents;
    } catch {
      throw new KnowledgeError(500, 'Failed to fetch featured entries');
    }
  },

  async getMainCategoryBySlug(slug: string): Promise<KnowledgeCategory> {
    try {
      const response = await databases.listDocuments<KnowledgeCategoryDocument>(
        db,
        mainCategoriesCollection,
        [Query.equal('slug', slug), Query.equal('isActive', true)]
      );

      if (response.documents.length === 0) {
        throw new KnowledgeError(404, `Main category not found: ${slug}`);
      }

      return response.documents[0] as unknown as KnowledgeCategory;
    } catch {
      throw new KnowledgeError(500, `Failed to fetch main category: ${slug}`);
    }
  },

  async getCategoryBySlug(slug: string): Promise<KnowledgeCategory | null> {
    try {
      const response = await databases.listDocuments<KnowledgeCategoryDocument>(
        db,
        knowledgeCategoriesCollection,
        [
          Query.equal('slug', slug),
          Query.equal('isActive', true),
          Query.limit(1),
          Query.select([
            '$id',
            'name',
            'slug',
            'description',
            'order',
            'isActive',
            'iconUrl',
            'imageUrl',
            'mainCategoryId',
            '$createdAt',
            '$updatedAt',
          ]),
        ]
      );

      if (response.documents.length === 0) {
        return null;
      }

      return response.documents[0];
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else if (error instanceof Error) {
        console.error('Unknown error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new KnowledgeError(500, 'Failed to fetch knowledge category');
    }
  },

  async updateKnowledgeEntry(
    id: string,
    data: Partial<KnowledgeEntry>
  ): Promise<KnowledgeEntry | null> {
    try {
      const response = await databases.updateDocument<KnowledgeDocument>(
        db,
        knowledgeCollection,
        id,
        {
          ...data,
          categoryId: data.categoryId || '',
        }
      );
      return response;
    } catch {
      return null;
    }
  },
};
</file>

<file path="src/models/server/resources.ts">
import { databases } from '@/models/client/config';
import {
  db,
  resourcesCollection,
  resourceCategoriesCollection,
  mainCategoriesCollection,
} from '@/models/name';
import { Query, type Models, AppwriteException } from 'appwrite';
import type { ResourceEntry } from '@/types/core/resources/entry';
import type { ResourceCategory } from '@/types/core/resources/category';
import type { PaginatedResult } from '@/types/core/shared/pagination';

type ResourceDocument = Models.Document & ResourceEntry;
type ResourceCategoryDocument = Models.Document & ResourceCategory;

class ResourceError extends Error {
  constructor(
    public code: number,
    message: string
  ) {
    super(message);
  }
}

/**
 * Helper to look up a category’s slug by its ID.
 * Returns 'uncategorized' if not found.
 */
async function getCategorySlugById(categoryId: string): Promise<string> {
  try {
    const catResponse = await databases.listDocuments(
      db,
      resourceCategoriesCollection,
      [Query.equal('$id', categoryId), Query.select(['slug']), Query.limit(1)]
    );
    if (catResponse.documents.length > 0) {
      const catDoc = catResponse.documents[0] as ResourceCategoryDocument;
      return catDoc.slug;
    }
    return 'uncategorized';
  } catch (error: unknown) {
    if (error instanceof AppwriteException) {
      console.error('Appwrite error:', error.message);
    } else {
      console.error('Unknown error:', error);
    }
    return 'uncategorized';
  }
}

export const ResourceService = {
  async getMainCategories(): Promise<ResourceCategory[]> {
    try {
      const response = await databases.listDocuments<ResourceCategoryDocument>(
        db,
        mainCategoriesCollection,
        [Query.equal('isActive', true), Query.orderAsc('order')]
      );
      return response.documents;
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      return [];
    }
  },

  /**
   * NEW: Fetch subcategories (i.e. resource categories that belong to a given main category).
   * Uses the "mainCategoryId" field in the resource-categories collection.
   */
  async getSubcategories(mainCategoryId: string): Promise<ResourceCategory[]> {
    try {
      const response = await databases.listDocuments<ResourceCategoryDocument>(
        db,
        resourceCategoriesCollection,
        [
          Query.equal('mainCategoryId', mainCategoryId),
          Query.equal('isActive', true),
          Query.orderAsc('order'),
        ]
      );

      return response.documents;
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new ResourceError(500, 'Failed to fetch subcategories');
    }
  },

  /**
   * Fetch all resource categories.
   */
  async getResourceCategories(): Promise<ResourceCategory[]> {
    try {
      if (!db || !resourceCategoriesCollection) {
        throw new Error(
          'Missing required environment variables for resources categories'
        );
      }

      const response = await databases.listDocuments<ResourceCategoryDocument>(
        db,
        resourceCategoriesCollection,
        [
          Query.equal('isActive', true),
          Query.orderAsc('order'),
          Query.select([
            '$id',
            'name',
            'slug',
            'order',
            'isActive',
            'description',
            'imageUrl',
            'iconUrl',
            'mainCategoryId',
            'type',
            '$createdAt',
            '$updatedAt',
          ]),
        ]
      );

      return response.documents;
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new ResourceError(500, 'Failed to fetch resource categories');
    }
  },

  /**
   * Get a main category by its slug
   */
  async getMainCategoryBySlug(slug: string): Promise<ResourceCategory> {
    try {
      const response = await databases.listDocuments<ResourceCategoryDocument>(
        db,
        mainCategoriesCollection,
        [Query.equal('slug', slug)]
      );

      if (response.documents.length === 0) {
        throw new ResourceError(404, `Main category not found: ${slug}`);
      }

      return response.documents[0];
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new ResourceError(500, `Failed to fetch main category: ${slug}`);
    }
  },

  async listResourceEntries({
    categoryId,
    searchQuery,
    page = 1,
    pageSize = 9,
  }: {
    categoryId?: string;
    searchQuery?: string;
    page?: number;
    pageSize?: number;
  }): Promise<PaginatedResult<ResourceEntry>> {
    try {
      const queries = [];

      if (categoryId) {
        queries.push(Query.equal('resourcesCategoryIds', categoryId));
      }

      if (searchQuery) {
        queries.push(Query.search('title', searchQuery));
      }

      queries.push(Query.orderDesc('$createdAt'));
      queries.push(Query.limit(pageSize));
      queries.push(Query.offset((page - 1) * pageSize));
      queries.push(
        Query.select([
          '$id',
          'title',
          'slug',
          'summary',
          'content',
          'featured',
          'imageUrl',
          'mainCategoryId',
          'resourcesCategoryIds',
          '$createdAt',
          '$updatedAt',
          '$permissions',
        ])
      );

      const response = await databases.listDocuments<ResourceDocument>(
        db,
        resourcesCollection,
        queries
      );

      return {
        documents: response.documents,
        total: response.total,
        hasMore: response.total > page * pageSize,
        nextPage: page + 1,
      };
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      return {
        documents: [],
        total: 0,
        hasMore: false,
        nextPage: 1,
      };
    }
  },

  async getEntryBySlug(slug: string): Promise<ResourceEntry | null> {
    try {
      const response = await databases.listDocuments<ResourceDocument>(
        db,
        resourcesCollection,
        [
          Query.equal('slug', slug),
          Query.limit(1),
          Query.select([
            '$id',
            'title',
            'slug',
            'summary',
            'content',
            'featured',
            'imageUrl',
            'resourcesCategoryIds',
            '$createdAt',
            '$updatedAt',
            '$permissions',
          ]),
        ]
      );
      if (response.documents.length === 0) {
        throw new ResourceError(404, 'Resource entry not found');
      }
      const doc = response.documents[0];
      const catId =
        Array.isArray(doc.resourcesCategoryIds) &&
        doc.resourcesCategoryIds.length > 0
          ? doc.resourcesCategoryIds[0]
          : '';
      let categorySlug = 'uncategorized';
      if (catId) {
        categorySlug = await getCategorySlugById(catId);
      }
      return {
        $id: doc.$id,
        title: doc.title,
        slug: doc.slug,
        type: doc.type,
        summary: doc.summary,
        content: doc.content,
        featured: doc.featured,
        imageUrl: doc.imageUrl,
        $createdAt: doc.$createdAt,
        $updatedAt: doc.$updatedAt,
        $permissions: doc.$permissions,
        categoryId: catId,
        categorySlug,
      };
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new ResourceError(500, 'Failed to fetch resource entry');
    }
  },

  async listFeaturedEntries(limit = 3): Promise<ResourceEntry[]> {
    try {
      const response = await databases.listDocuments<ResourceDocument>(
        db,
        resourcesCollection,
        [
          Query.equal('featured', true),
          Query.orderDesc('$createdAt'),
          Query.limit(limit),
        ]
      );
      const getFirstCategoryId = (doc: ResourceDocument): string =>
        Array.isArray(doc.resourcesCategoryIds) &&
        doc.resourcesCategoryIds.length > 0
          ? doc.resourcesCategoryIds[0]
          : '';

      const categoryIds = [
        ...new Set(
          response.documents
            .map(getFirstCategoryId)
            .filter((id): id is string => Boolean(id))
        ),
      ];

      const categoryMap: Record<string, string> = {};
      for (const id of categoryIds) {
        categoryMap[id] = await getCategorySlugById(id);
      }

      const enrichedEntries = await Promise.all(
        response.documents.map((doc) => {
          const catId = getFirstCategoryId(doc);
          return {
            ...doc,
            categoryId: catId,
            categorySlug: categoryMap[catId] || 'uncategorized',
          };
        })
      );
      return enrichedEntries;
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
        throw new ResourceError(error.code, error.message);
      } else {
        console.error('Unknown error:', error);
        throw new ResourceError(500, 'Failed to fetch featured entries');
      }
    }
  },

  /**
   * (Optional) Fetch a specific category by its slug.
   */
  async getCategoryBySlug(slug: string): Promise<ResourceCategory | null> {
    try {
      const response = await databases.listDocuments<ResourceCategoryDocument>(
        db,
        resourceCategoriesCollection,
        [
          Query.equal('slug', slug),
          Query.equal('isActive', true),
          Query.limit(1),
          Query.select([
            '$id',
            'name',
            'slug',
            'description',
            'order',
            'isActive',
            'iconUrl',
            'imageUrl',
            'mainCategoryId',
            '$createdAt',
            '$updatedAt',
          ]),
        ]
      );

      if (response.documents.length === 0) {
        return null;
      }
      return response.documents[0];
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      throw new ResourceError(500, 'Failed to fetch resource category');
    }
  },

  async getResourceEntry(slug: string): Promise<ResourceEntry | null> {
    try {
      const response = await databases.listDocuments<ResourceDocument>(
        db,
        resourcesCollection,
        [Query.equal('slug', slug)]
      );
      if (response.documents.length === 0) {
        return null;
      }
      return response.documents[0];
    } catch (error: unknown) {
      if (error instanceof AppwriteException) {
        console.error('Appwrite error:', error.message);
      } else {
        console.error('Unknown error:', error);
      }
      return null;
    }
  },
};
</file>

<file path="src/models/server/storageSetup.ts">
import { Client, Storage, Permission, Role } from 'node-appwrite';
import {
  knowledgeAttachmentsBucket,
  resourcesAttachmentsBucket,
  knowledgeCategoryImagesBucket,
  knowledgeCategoryIconsBucket,
} from '../name';

// Initialize Appwrite Client
const client = new Client();

if (
  !process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT ||
  !process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID ||
  !process.env.APPWRITE_API_KEY
) {
  throw new Error('Missing required Appwrite environment variables');
}

client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const storage = new Storage(client);

let isStorageInitialized = false;

export default async function getOrCreateStorage() {
  if (isStorageInitialized) return;

  try {
    // Define your buckets with proper configuration.
    const buckets = [
      {
        id: knowledgeAttachmentsBucket,
        name: 'Knowledge Attachments',
        allowedFileExtensions: [
          'jpg',
          'jpeg',
          'png',
          'gif',
          'svg',
          'webp',
          'heic',
        ],
        maxFileSize: 5 * 1024 * 1024, // 5MB in bytes
      },
      {
        id: resourcesAttachmentsBucket,
        name: 'Resource Attachments',
        allowedFileExtensions: [
          'jpg',
          'jpeg',
          'png',
          'gif',
          'svg',
          'webp',
          'heic',
        ],
        maxFileSize: 5 * 1024 * 1024,
      },
      {
        id: knowledgeCategoryImagesBucket,
        name: 'Category Images',
        allowedFileExtensions: [
          'jpg',
          'jpeg',
          'png',
          'gif',
          'svg',
          'webp',
          'heic',
        ],
        maxFileSize: 5 * 1024 * 1024,
      },
      {
        id: knowledgeCategoryIconsBucket,
        name: 'Category Icons',
        allowedFileExtensions: [
          'jpg',
          'jpeg',
          'png',
          'gif',
          'svg',
          'webp',
          'heic',
          'ico',
          'icns',
        ],
        maxFileSize: 5 * 1024 * 1024,
      },
    ];

    // For each bucket, check if it exists; if not, create it.
    for (const bucket of buckets) {
      try {
        await storage.getBucket(bucket.id);
      } catch {
        // If bucket does not exist, create it.
        // The permissions must be provided as an array of strings.
        try {
          // Create bucket first
          await storage.createBucket(bucket.id, bucket.name, [
            Permission.read(Role.any()),
          ]);

          // Then update its configuration
          await storage.updateBucket(
            bucket.id,
            bucket.name,
            [Permission.read(Role.any())],
            undefined, // fileSecurity
            true, // enabled
            bucket.maxFileSize,
            bucket.allowedFileExtensions,
            undefined, // compression
            true, // encryption
            true // antivirus
          );
          console.warn(`Created bucket: ${bucket.name}`);
        } catch (error) {
          console.error(`Error creating bucket ${bucket.name}:`, error);
        }
      }
    }

    isStorageInitialized = true;
  } catch (error) {
    console.error('Error setting up storage:', error);
    throw error;
  }
}
</file>

<file path="src/models/name.ts">
export const db = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID!;
export const mainCategoriesCollection =
  process.env.NEXT_PUBLIC_APPWRITE_MAIN_CATEGORIES_COLLECTION_ID!;
export const knowledgeCategoriesCollection =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_CATEGORIES_COLLECTION_ID!;
export const resourceCategoriesCollection =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_CATEGORIES_COLLECTION_ID!;
export const knowledgeCollection =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_COLLECTION_ID!;
export const resourcesCollection =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_COLLECTION_ID!;
export const tagsCollection =
  process.env.NEXT_PUBLIC_APPWRITE_TAGS_COLLECTION_ID!;

export const knowledgeCategoryImagesBucket =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_CATEGORY_IMAGES_BUCKET_ID!;
export const knowledgeCategoryIconsBucket =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_CATEGORY_ICONS_BUCKET_ID!;
export const knowledgeImagesBucket =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_IMAGES_BUCKET_ID!;
export const knowledgeAttachmentsBucket =
  process.env.NEXT_PUBLIC_APPWRITE_KNOWLEDGE_ATTACHMENTS_BUCKET_ID!;
export const resourcesCategoryImagesBucket =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_CATEGORIES_IMAGES_BUCKET_ID!;
export const resourcesCategoryIconsBucket =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_CATEGORIES_ICONS_BUCKET_ID!;
export const resourcesImagesBucket =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_IMAGES_BUCKET_ID!;
export const resourcesAttachmentsBucket =
  process.env.NEXT_PUBLIC_APPWRITE_RESOURCES_ATTACHMENTS_BUCKET_ID!;
export const appAssetsBucket =
  process.env.NEXT_PUBLIC_APPWRITE_APP_ASSETS_BUCKET_ID!;
</file>

<file path="src/store/Auth.ts">
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { persist } from 'zustand/middleware';
import type { OAuthProvider } from 'appwrite';
import { AppwriteException, ID, type Models } from 'appwrite';
import { account } from '@/models/client/config';

export interface UserPrefs {
  reputation: number;
  theme: 'light' | 'dark';
  emailNotifications: boolean;
  lastActiveAt: string;
}

interface AuthResponse {
  success: boolean;
  error?: {
    code: number;
    message: string;
    type: string;
  } | null;
}

interface IAuthStore {
  session: Models.Session | null;
  jwt: string | null;
  user: Models.User<UserPrefs> | null;
  hydrated: boolean;

  setHydrated(): void;
  verifySession(): Promise<void>;
  login(email: string, password: string): Promise<AuthResponse>;
  createAccount(
    name: string,
    email: string,
    password: string
  ): Promise<AuthResponse>;
  logout(): Promise<void>;
  requestPasswordReset(email: string): Promise<AuthResponse>;
  confirmPasswordReset(
    userId: string,
    secret: string,
    password: string
  ): Promise<AuthResponse>;
  verifyEmail(userId: string, secret: string): Promise<AuthResponse>;
  requestEmailVerification(): Promise<AuthResponse>;
  createOAuthSession(provider: OAuthProvider): Promise<AuthResponse>;
}

export const useAuthStore = create<IAuthStore>()(
  persist(
    immer((set) => ({
      session: null,
      jwt: null,
      user: null,
      hydrated: false,

      setHydrated() {
        set({ hydrated: true });
      },

      async verifySession() {
        try {
          // Try multiple times with a delay to handle race conditions
          for (let i = 0; i < 3; i++) {
            try {
              const session = await account.getSession('current');
              const [user, { jwt }] = await Promise.all([
                account.get<UserPrefs>(),
                account.createJWT(),
              ]);
              set({ session, jwt, user });
              return;
            } catch (error) {
              if (i < 2) {
                await new Promise((resolve) => setTimeout(resolve, 1000));
                continue;
              }
              throw error;
            }
          }
        } catch (error) {
          set({ session: null, jwt: null, user: null });
          console.error('Session verification failed:', error);
        }
      },

      async login(email: string, password: string) {
        try {
          const session = await account.createEmailPasswordSession(
            email,
            password
          );
          const [user, { jwt }] = await Promise.all([
            account.get<UserPrefs>(),
            account.createJWT(),
          ]);
          if (!user.prefs?.reputation) {
            await account.updatePrefs<UserPrefs>({ reputation: 0 });
          }
          set({ session, jwt, user });
          return { success: true };
        } catch (error) {
          console.error('Login failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async createAccount(name: string, email: string, password: string) {
        try {
          await account.create(ID.unique(), email, password, name);
          return { success: true };
        } catch (error) {
          console.error('Account creation failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async logout() {
        try {
          await account.deleteSessions();
          set({ session: null, jwt: null, user: null });
        } catch (error) {
          console.error('Logout failed:', error);
        }
      },

      async requestPasswordReset(email: string) {
        try {
          await account.createRecovery(
            email,
            `${window.location.origin}/reset-password`
          );
          return { success: true };
        } catch (error) {
          console.error('Password reset request failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async confirmPasswordReset(
        userId: string,
        secret: string,
        password: string
      ) {
        try {
          await account.updateRecovery(userId, secret, password);
          return { success: true };
        } catch (error) {
          console.error('Password reset confirmation failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async verifyEmail(userId: string, secret: string) {
        try {
          await account.updateVerification(userId, secret);
          return { success: true };
        } catch (error) {
          console.error('Email verification failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async requestEmailVerification() {
        try {
          await account.createVerification(
            `${window.location.origin}/verify-email`
          );
          return { success: true };
        } catch (error) {
          console.error('Email verification request failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },

      async createOAuthSession(provider: OAuthProvider) {
        try {
          await account.createOAuth2Session(
            provider,
            `${window.location.origin}/auth/callback`,
            `${window.location.origin}/login`
          );
          return { success: true };
        } catch (error) {
          console.error('OAuth session creation failed:', error);
          return {
            success: false,
            error: error instanceof AppwriteException ? error : null,
          };
        }
      },
    })),
    {
      name: 'auth',
      onRehydrateStorage() {
        return (state, error) => {
          if (!error) state?.setHydrated();
        };
      },
    }
  )
);
</file>

<file path="src/store/Content.ts">
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';

interface ContentState {
  selectedCategory: string | null;
  isFetching: boolean;
  searchQuery: string;
  sortBy: string;
}

interface ContentActions {
  setCategory: (categoryId: string | null) => void;
  setIsFetching: (isFetching: boolean) => void;
  setSearchQuery: (query: string) => void;
  setSortBy: (sort: string) => void;
  reset: () => void; // Optional: reset to initial state
}

const initialState: ContentState = {
  selectedCategory: null,
  isFetching: false,
  searchQuery: '',
  sortBy: 'latest',
};

export const useContentStore = create<ContentState & ContentActions>()(
  immer((set) => ({
    ...initialState,
    setCategory: (categoryId) => set({ selectedCategory: categoryId }),
    setIsFetching: (isFetching) => set({ isFetching }),
    setSearchQuery: (query) => set({ searchQuery: query }),
    setSortBy: (sort) => set({ sortBy: sort }),
    reset: () => set(initialState),
  }))
);
</file>

<file path="src/store/Ui.ts">
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { persist } from 'zustand/middleware';

interface UIState {
  theme: 'light' | 'dark';
  isMobileMenuOpen: boolean;
}

interface UIActions {
  toggleTheme: () => void;
  openMobileMenu: () => void;
  closeMobileMenu: () => void;
}

export const useUIStore = create<UIState & UIActions>()(
  persist(
    immer((set) => ({
      // Initial state
      theme: 'dark',
      isMobileMenuOpen: false,

      // Actions
      toggleTheme() {
        set((state) => {
          state.theme = state.theme === 'dark' ? 'light' : 'dark';
        });
      },
      openMobileMenu() {
        set((state) => {
          state.isMobileMenuOpen = true;
        });
      },
      closeMobileMenu() {
        set((state) => {
          state.isMobileMenuOpen = false;
        });
      },
    })),
    {
      name: 'ui-store', // Key for localStorage
    }
  )
);
</file>

<file path="src/store/useKnowledgeStore.ts">
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';

interface KnowledgeState {
  selectedCategory: string | null;
  isFetching: boolean;
  searchQuery: string;
  sortBy: string;
}

interface KnowledgeActions {
  setCategory: (categoryId: string | null) => void;
  setIsFetching: (isFetching: boolean) => void;
  setSearchQuery: (query: string) => void;
  setSortBy: (sort: string) => void;
}

export const useKnowledgeStore = create<KnowledgeState & KnowledgeActions>()(
  immer((set) => ({
    selectedCategory: null,
    isFetching: false,
    searchQuery: '',
    sortBy: 'latest',
    setCategory: (categoryId) => set({ selectedCategory: categoryId }),
    setIsFetching: (isFetching) => set({ isFetching }),
    setSearchQuery: (query) => set({ searchQuery: query }),
    setSortBy: (sort) => set({ sortBy: sort }),
  }))
);
</file>

<file path="src/store/useResourcesStore.ts">
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';

interface ResourcesState {
  selectedCategory: string | null;
  isFetching: boolean;
  searchQuery: string;
  sortBy: string;
}

interface ResourcesActions {
  setCategory: (categoryId: string | null) => void;
  setIsFetching: (isFetching: boolean) => void;
  setSearchQuery: (query: string) => void;
  setSortBy: (sort: string) => void;
}

export const useResourcesStore = create<ResourcesState & ResourcesActions>()(
  immer((set) => ({
    selectedCategory: null,
    isFetching: false,
    searchQuery: '',
    sortBy: 'latest',
    setCategory: (categoryId) => set({ selectedCategory: categoryId }),
    setIsFetching: (isFetching) => set({ isFetching }),
    setSearchQuery: (query) => set({ searchQuery: query }),
    setSortBy: (sort) => set({ sortBy: sort }),
  }))
);
</file>

<file path="src/types/auth/auth.ts">
import type { Models } from 'appwrite';

export type AppwriteUser = Models.User<Models.Preferences>;

export type AuthResponse<T = unknown> = {
  success: boolean;
  data?: T;
  error?: string;
};

export type LoginCredentials = {
  email: string;
  password: string;
};

export type SignUpCredentials = LoginCredentials & {
  name: string;
};

export class AuthError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'AuthError';
  }
}
</file>

<file path="src/types/core/knowledge/category.ts">
export interface KnowledgeCategory {
  $id: string;
  name: string;
  slug: string;
  description?: string;
  order: number;
  isActive: boolean;
  imageUrl?: string;
  iconUrl?: string;
  mainCategoryId?: string;
  $createdAt: string;
  $updatedAt: string;
}
</file>

<file path="src/types/core/knowledge/entry.ts">
import type { KnowledgeCategory } from './category';

export interface KnowledgeEntry {
  $id: string;
  title: string;
  slug: string;
  type: string; // Article, Video, HowTo, Infographic
  summary: string;
  content: string;
  categoryId: string;
  categorySlug: string;
  featured: boolean;
  imageUrl?: string;
  $createdAt: string;
  $updatedAt: string;
  $permissions: string[];
}

export interface KnowledgeEntryWithRelations extends KnowledgeEntry {
  category?: KnowledgeCategory;
  relatedEntries?: KnowledgeEntry[];
}
</file>

<file path="src/types/core/knowledge/index.ts">
export * from './category';
export * from './entry';
export * from './query';
</file>

<file path="src/types/core/knowledge/query.ts">
export interface PaginatedResult<T> {
  documents: T[];
  total: number;
  hasMore: boolean;
  nextPage: number;
}

export interface QueryFilters {
  categoryId?: string;
  searchQuery?: string;
  featuredOnly?: boolean;
}
</file>

<file path="src/types/core/resources/category.ts">
export type ResourceCategoryType =
  | 'app'
  | 'book'
  | 'course'
  | 'podcast'
  | 'software'
  | 'youtube';

export interface ResourceCategory {
  $id: string;
  name: string;
  slug: string;
  order: number;
  isActive: boolean;
  description?: string;
  imageUrl?: string;
  iconUrl?: string;
  mainCategoryId: string;
  type: ResourceCategoryType;
  $createdAt: string;
  $updatedAt: string;
}
</file>

<file path="src/types/core/resources/entry.ts">
import type { ResourceCategory } from './category';

export interface ResourceEntry {
  $id: string;
  title: string;
  slug: string;
  type: 'app' | 'book' | 'course' | 'podcast' | 'software' | 'youtube' | string;
  summary: string;
  content: string;
  featured: boolean;
  imageUrl: string;
  categoryId: string;
  categorySlug: string;
  $createdAt: string;
  $updatedAt: string;
  $permissions: string[];
}

export interface ResourceEntryWithRelations extends ResourceEntry {
  category?: ResourceCategory;
  relatedEntries?: ResourceEntry[];
}
</file>

<file path="src/types/core/resources/index.ts">
export * from './category';
export * from './entry';
export * from './query';
</file>

<file path="src/types/core/resources/query.ts">
export interface PaginatedResult<T> {
  documents: T[];
  total: number;
  hasMore: boolean;
  nextPage: number;
}

export interface QueryFilters {
  categoryId?: string;
  searchQuery?: string;
  featuredOnly?: boolean;
}
</file>

<file path="src/types/core/shared/pagination.ts">
export interface PaginatedResult<T> {
  documents: T[];
  total: number;
  hasMore: boolean;
  nextPage: number;
}

export interface QueryFilters {
  categoryId?: string;
  searchQuery?: string;
  featuredOnly?: boolean;
}
</file>

<file path="src/types/marketing/pricing.ts">
/**
 * Represents a billing interval for a pricing plan
 */
export type BillingInterval = 'monthly' | 'annual';

/**
 * Represents an individual benefit item in a pricing plan
 */
export interface BenefitItem {
  id: string;
  title: string;
  description?: string;
}

/**
 * Type for Stripe Price IDs
 */
export type StripePriceId = `price_${string}`;

/**
 * Represents a complete pricing plan configuration
 */
export interface PricingPlan {
  id: string;
  name: string;
  description: string;
  interval: BillingInterval;
  price: number;
  priceDisplay: string;
  secondaryPriceDisplay?: string;
  isPopular?: boolean;
  benefits: BenefitItem[];
  stripePriceId: StripePriceId;
}

/**
 * Represents a FAQ item in the pricing section
 */
export interface FaqItem {
  id: string;
  question: string;
  answer: string;
}

/**
 * Props for the PricingSection component
 */
export interface PricingSectionProps {
  plans?: PricingPlan[];
  showComparison?: boolean;
}

/**
 * Props for the PricingCard component
 */
export interface PricingCardProps {
  plan: PricingPlan;
  className?: string;
}

/**
 * Props for the PricingFaq component
 */
export interface PricingFaqProps {
  faqs?: FaqItem[];
  className?: string;
}
</file>

<file path="src/types/shared/animations.ts">
import type { Variants } from 'motion/react';

export interface AnimationConfig {
  initial?: string | object;
  animate?: string | object;
  exit?: string | object;
  transition?: {
    duration?: number;
    delay?: number;
    ease?: string | number[];
  };
}

export interface MotionVariants {
  hidden: object;
  visible: object;
  exit?: object;
}

export const defaultTransition = {
  duration: 0.3,
  ease: [0.25, 0.1, 0.25, 1.0],
};

export const fadeInVariants: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: defaultTransition,
  },
};

export const staggerChildrenVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
    },
  },
};
</file>

<file path="src/types/shared/appwrite.ts">
export interface AppwriteDocument {
  $id: string;
  $createdAt: string;
  $updatedAt: string;
  $permissions: string[];
}

export interface AppwriteResponse<T> {
  documents: T[];
  total: number;
}
</file>

<file path="src/types/shared/collections.ts">
export type CollectionConfig = {
  id: string;
  name: string;
  attributes: AttributeConfig[];
  indexes: IndexConfig[];
};

export type AttributeConfig = {
  name: string;
  type: 'string' | 'boolean' | 'integer' | 'float' | 'enum';
  size?: number;
  required: boolean;
  default?: unknown;
};

export type IndexConfig = {
  id: string;
  type: 'key' | 'unique' | 'fulltext';
  attributes: string[];
  orders?: ('asc' | 'desc')[];
};
</file>

<file path="src/types/shared/layout.ts">
export type Pattern = 'dots' | 'lines' | 'squares' | null;

export interface PageHeaderProps {
  /**
   * The main title of the page
   */
  title: string;

  /**
   * Optional description text displayed below the title
   */
  description?: string;

  /**
   * Optional background pattern style
   * @default 'dots'
   */
  pattern?: Pattern;

  /**
   * Optional additional CSS classes
   */
  className?: string;

  /**
   * Optional alignment for the content
   * @default 'center'
   */
  align?: 'left' | 'center';

  /**
   * Optional size variant for the title
   * @default 'default'
   */
  size?: 'small' | 'default' | 'large';
}
</file>

<file path="src/middleware.ts">
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import getOrCreateDB from './models/server/dbSetup';
import { Account, Client } from 'node-appwrite';
import { AppwriteException } from 'node-appwrite';

// Define protected paths that require the user to be logged in.
const protectedPaths = ['/(subscription)', '/(core)'];
// Public paths that never require login.
const publicPaths = ['/login', '/register', '/reset-password', '/verify-email'];

if (!process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT) {
  throw new Error('Missing NEXT_PUBLIC_APPWRITE_ENDPOINT environment variable');
}

if (!process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID) {
  throw new Error(
    'Missing NEXT_PUBLIC_APPWRITE_PROJECT_ID environment variable'
  );
}

if (!process.env.APPWRITE_API_KEY) {
  throw new Error('Missing APPWRITE_API_KEY environment variable');
}

// Create a new Appwrite client and account instance.
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const account = new Account(client);

export async function middleware(request: NextRequest) {
  // STEP 2: Run checks to verify DB and Storage exist.
  await Promise.all([getOrCreateDB()]);

  // STEP 3: Get the current pathname and search parameters from the URL.
  const { pathname, search } = request.nextUrl;

  // STEP 4: If the pathname starts with one of the public paths, continue without checking login.
  if (publicPaths.some((path) => pathname.startsWith(path))) {
    return NextResponse.next();
  }

  // STEP 5: Check if the path is protected.
  const isProtectedPath = protectedPaths.some((path) =>
    pathname.startsWith(path)
  );
  if (!isProtectedPath) {
    return NextResponse.next();
  }

  // STEP 6: Get user session cookie.
  // The cookie name is built using the Appwrite project ID.
  const sessionName = `a_session_${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`;
  const sessionId = request.cookies.get(sessionName)?.value;

  // STEP 7: If there is a session, try validating it.
  try {
    if (sessionId) {
      // Ask Appwrite to get the "current" session. If it works, the session is valid.
      await account.getSession('current');
      return NextResponse.next();
    }
  } catch (error) {
    if (error instanceof AppwriteException) {
      console.error('Auth error code:', error.code);
    }
  }

  // STEP 8: If there is no valid session, redirect the user to the login page.
  const loginUrl = new URL('/login', request.url);
  loginUrl.searchParams.set('redirect', pathname + search);
  return NextResponse.redirect(loginUrl);
}

// STEP 9: Define the matcher so that the middleware only runs on the specified paths.
export const config = {
  matcher: [
    // Match all paths except static files and API routes.
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.).*)',
    // Protect all paths under these:
    '/(subscription)/:path*',
    '/(core)/:path*',
    '/knowledge/:path*',
    '/resources/:path*',
  ],
};
</file>

<file path=".deepsource.toml">
version = 1

[[analyzers]]
name = "test-coverage"

[[analyzers]]
name = "javascript"

  [analyzers.meta]
  plugins = ["react"]
  environment = [
    "jest",
    "browser",
    "nodejs"
  ]

[[transformers]]
name = "prettier"
</file>

<file path=".gitignore">
# version control
.git/**
.hg/**
.hgignore
.svn/**

# Dependency directories
**/node_modules/**
**/bower_components/**
**/jspm_packages/**
**/vendor/**
**/.bundle/**
**/.gradle/**
target/**

# Logs
logs/**
**/*.log
**/npm-debug.log*
**/yarn-debug.log*
**/yarn-error.log*

# Runtime data
pids/**
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov/**

# Coverage directory used by tools like istanbul
coverage/**

# nyc test coverage
.nyc_output/**

# Grunt intermediate storage
.grunt/**

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release/**

# TypeScript v1 declaration files
typings/**

# Optional npm cache directory
**/.npm/**

# Cache directories
.eslintcache
.rollup.cache/**
.webpack.cache/**
.parcel-cache/**
.sass-cache/**
*.cache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn files
**/.yarn/**

# Yarn Integrity file
**/.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next/**

# Serverless directories
.serverless/**

# TypeScript output
dist/**

# OS generated files
**/.DS_Store
**/Thumbs.db

# Editor directories and files
.idea/**
.vscode/**
**/*.swp
**/*.swo
**/*.swn
**/*.bak

# Build outputs
build/**
out/**

# Temporary files
tmp/**
temp/**

# repomix output
**/repomix-output.*
**/repopack-output.* # Legacy

# Essential Node.js-related entries
**/package-lock.json
**/yarn-error.log
**/yarn.lock
**/pnpm-lock.yaml
**/bun.lockb

# Project-specific ignores
public/**
.windsurfrules
.clinerules
CLAUDE.md
nyxbui.json
memory-bank/**

# Test files and configurations
**/__tests__/**
**/*.test.js
**/*.spec.js
**/*.test.ts
**/*.spec.ts
jest.config.ts
jest.config.js
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# windsurf rules
.windsurfrules
</file>

<file path=".prettierrc">
{
  "trailingComma": "es5",
  "semi": true,
  "tabWidth": 2,
  "singleQuote": true,
  "jsxSingleQuote": true,
  "printWidth": 80,
  "bracketSpacing": true,
  "bracketSameLine": false,
  "arrowParens": "always",
  "endOfLine": "lf",
  "plugins": ["prettier-plugin-tailwindcss"]
}
</file>

<file path="appwrite.json">
{
    "projectId": "6771757c001f6ca5aa45",
    "projectName": "WYOS",
    "settings": {
        "services": {
            "account": true,
            "avatars": true,
            "databases": true,
            "locale": true,
            "health": true,
            "storage": true,
            "teams": true,
            "users": true,
            "functions": true,
            "graphql": true,
            "messaging": true
        },
        "auth": {
            "methods": {
                "jwt": true,
                "phone": false,
                "invites": false,
                "anonymous": true,
                "email-otp": false,
                "magic-url": false,
                "email-password": true
            },
            "security": {
                "duration": 5184000,
                "limit": 0,
                "sessionsLimit": 20,
                "passwordHistory": 5,
                "passwordDictionary": true,
                "personalDataCheck": true,
                "sessionAlerts": false,
                "mockNumbers": []
            }
        }
    },
    "functions": [
        {
            "$id": "679952910004c720b239",
            "execute": [
                "any"
            ],
            "name": "stripe-subscriptions",
            "enabled": true,
            "logging": true,
            "runtime": "node-18.0",
            "scopes": [
                "sessions.write",
                "users.read",
                "users.write"
            ],
            "events": [],
            "schedule": "",
            "timeout": 15,
            "entrypoint": "src/main.js",
            "commands": "npm install",
            "path": "functions/stripe-subscriptions"
        }
    ],
    "databases": [
        {
            "$id": "wyos",
            "name": "wyos",
            "enabled": true
        }
    ],
    "collections": [
        {
            "$id": "resources",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "resources",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "title",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                }
            ],
            "indexes": []
        },
        {
            "$id": "knowledge-categories",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "knowledge-categories",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "order",
                    "type": "integer",
                    "required": false,
                    "array": false,
                    "min": -9223372036854775808,
                    "max": 9223372036854775807,
                    "default": 0
                },
                {
                    "key": "isActive",
                    "type": "boolean",
                    "required": false,
                    "array": false,
                    "default": true
                },
                {
                    "key": "description",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "size": 250,
                    "default": null
                },
                {
                    "key": "imageUrl",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                },
                {
                    "key": "icon",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                }
            ],
            "indexes": [
                {
                    "key": "slug_idx",
                    "type": "unique",
                    "status": "available",
                    "attributes": [
                        "slug"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "order_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "order",
                        "isActive"
                    ],
                    "orders": [
                        "ASC",
                        "ASC"
                    ]
                }
            ]
        },
        {
            "$id": "tags",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "tags",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 32,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 32,
                    "default": null
                }
            ],
            "indexes": []
        },
        {
            "$id": "main-categories",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "main-categories",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "order",
                    "type": "integer",
                    "required": false,
                    "array": false,
                    "min": -9223372036854775808,
                    "max": 9223372036854775807,
                    "default": 0
                },
                {
                    "key": "isActive",
                    "type": "boolean",
                    "required": false,
                    "array": false,
                    "default": true
                },
                {
                    "key": "description",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "size": 250,
                    "default": null
                },
                {
                    "key": "imageUrl",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                },
                {
                    "key": "icon",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                }
            ],
            "indexes": [
                {
                    "key": "order_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "order"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "slug_idx",
                    "type": "unique",
                    "status": "available",
                    "attributes": [
                        "slug"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "isActive_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "isActive"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "createdAt_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "$createdAt"
                    ],
                    "orders": [
                        "DESC"
                    ]
                }
            ]
        },
        {
            "$id": "resource-categories",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "resource-categories",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "order",
                    "type": "integer",
                    "required": false,
                    "array": false,
                    "min": -9223372036854775808,
                    "max": 9223372036854775807,
                    "default": 0
                },
                {
                    "key": "isActive",
                    "type": "boolean",
                    "required": false,
                    "array": false,
                    "default": true
                },
                {
                    "key": "description",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "size": 250,
                    "default": null
                },
                {
                    "key": "imageUrl",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                },
                {
                    "key": "icon",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                }
            ],
            "indexes": [
                {
                    "key": "slug_idx",
                    "type": "unique",
                    "status": "available",
                    "attributes": [
                        "slug"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "order_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "order",
                        "isActive"
                    ],
                    "orders": [
                        "ASC",
                        "ASC"
                    ]
                }
            ]
        },
        {
            "$id": "knowledge",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")",
                "read(\"any\")"
            ],
            "databaseId": "wyos",
            "name": "knowledge",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "title",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "slug",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "isActive",
                    "type": "boolean",
                    "required": false,
                    "array": false,
                    "default": true
                },
                {
                    "key": "summary",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "size": 1000,
                    "default": null
                },
                {
                    "key": "content",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "size": 5000,
                    "default": null
                },
                {
                    "key": "imageUrl",
                    "type": "string",
                    "required": false,
                    "array": false,
                    "format": "url",
                    "default": null
                },
                {
                    "key": "featured",
                    "type": "boolean",
                    "required": false,
                    "array": false,
                    "default": false
                }
            ],
            "indexes": [
                {
                    "key": "slug_idx",
                    "type": "unique",
                    "status": "available",
                    "attributes": [
                        "slug"
                    ],
                    "orders": [
                        "ASC"
                    ]
                },
                {
                    "key": "title_summary_idx",
                    "type": "fulltext",
                    "status": "available",
                    "attributes": [
                        "title",
                        "summary"
                    ],
                    "orders": [
                        "ASC",
                        "ASC"
                    ]
                },
                {
                    "key": "featured_idx",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "featured"
                    ],
                    "orders": [
                        "ASC"
                    ]
                }
            ]
        },
        {
            "$id": "679856d00029e5e2057e",
            "$permissions": [
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")"
            ],
            "databaseId": "wyos",
            "name": "user-subscriptions",
            "enabled": true,
            "documentSecurity": true,
            "attributes": [
                {
                    "key": "userId",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 36,
                    "default": null
                },
                {
                    "key": "subscriptionStatus",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 20,
                    "default": null
                },
                {
                    "key": "priceId",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "subscriptionId",
                    "type": "string",
                    "required": true,
                    "array": false,
                    "size": 50,
                    "default": null
                },
                {
                    "key": "currentPeriodEnd",
                    "type": "datetime",
                    "required": true,
                    "array": false,
                    "format": "",
                    "default": null
                }
            ],
            "indexes": [
                {
                    "key": "user_id",
                    "type": "key",
                    "status": "available",
                    "attributes": [
                        "userId"
                    ],
                    "orders": [
                        "ASC"
                    ]
                }
            ]
        }
    ],
    "buckets": [
        {
            "$id": "category-images",
            "$permissions": [
                "read(\"any\")",
                "create(\"users\")",
                "read(\"users\")",
                "update(\"users\")",
                "delete(\"users\")"
            ],
            "fileSecurity": false,
            "name": "Category Images",
            "enabled": true,
            "maximumFileSize": 1000000000,
            "allowedFileExtensions": [
                "jpg",
                "jpeg",
                "png",
                "gif",
                "svg",
                "webp",
                "heic"
            ],
            "compression": "zstd",
            "encryption": true,
            "antivirus": true
        },
        {
            "$id": "resources-attachments",
            "$permissions": [
                "read(\"any\")",
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")"
            ],
            "fileSecurity": false,
            "name": "Resource Attachments",
            "enabled": true,
            "maximumFileSize": 1000000000,
            "allowedFileExtensions": [
                "jpg",
                "jpeg",
                "png",
                "gif",
                "svg",
                "webp",
                "heic",
                "pdf",
                "html",
                "mp4",
                "mp3"
            ],
            "compression": "zstd",
            "encryption": true,
            "antivirus": true
        },
        {
            "$id": "category-icons",
            "$permissions": [
                "read(\"any\")",
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")"
            ],
            "fileSecurity": false,
            "name": "Category Icons",
            "enabled": true,
            "maximumFileSize": 1000000000,
            "allowedFileExtensions": [
                "jpg",
                "jpeg",
                "png",
                "gif",
                "svg",
                "webp",
                "heic",
                "ico",
                "icns"
            ],
            "compression": "zstd",
            "encryption": true,
            "antivirus": true
        },
        {
            "$id": "knowledge-attachments",
            "$permissions": [
                "read(\"any\")",
                "create(\"team:67760a70003892be3ea7\")",
                "read(\"team:67760a70003892be3ea7\")",
                "update(\"team:67760a70003892be3ea7\")",
                "delete(\"team:67760a70003892be3ea7\")"
            ],
            "fileSecurity": false,
            "name": "Knowledge Attachments",
            "enabled": true,
            "maximumFileSize": 1000000000,
            "allowedFileExtensions": [
                "jpg",
                "jpeg",
                "png",
                "gif",
                "svg",
                "webp",
                "heic",
                "pdf",
                "html",
                "mp4",
                "mp3"
            ],
            "compression": "zstd",
            "encryption": true,
            "antivirus": true
        }
    ],
    "teams": [
        {
            "$id": "67760a70003892be3ea7",
            "name": "Admin"
        },
        {
            "$id": "677b22b8000f80b5e63f",
            "name": "Members"
        }
    ]
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from 'path';
import { fileURLToPath } from 'url';
import { FlatCompat } from '@eslint/eslintrc';
import eslintConfigPrettier from 'eslint-config-prettier';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const config = [
  ...compat.extends(
    'next/core-web-vitals',
    'next/typescript',
    'plugin:@tanstack/eslint-plugin-query/recommended'
  ),
  eslintConfigPrettier,
  {
    rules: {
      // TanStack Query rules:
      '@tanstack/query/exhaustive-deps': 'error',
      '@tanstack/query/stable-query-client': 'error',

      // TypeScript rules:
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-non-null-assertion': 'warn',
      '@typescript-eslint/no-empty-interface': 'error',
      '@typescript-eslint/consistent-type-imports': [
        'error',
        {
          prefer: 'type-imports',
        },
      ],
      '@typescript-eslint/explicit-function-return-type': 'off',

      // React rules:
      'react/prop-types': 'off',
      'react/react-in-jsx-scope': 'off',
      'react/display-name': 'error',
      'react/jsx-curly-brace-presence': ['error', 'never'],
      'react/no-unescaped-entities': 'off',
      '@next/next/no-img-element': 'off',

      // Console & Debug rules:
      'no-console': ['warn', { allow: ['warn', 'error'] }],

      // Accessibility rules:
      'jsx-a11y/alt-text': 'error',
      'jsx-a11y/aria-props': 'error',
      'jsx-a11y/aria-proptypes': 'error',
      'jsx-a11y/role-has-required-aria-props': 'error',
      'jsx-a11y/click-events-have-key-events': 'error',
      'jsx-a11y/no-static-element-interactions': 'error',
    },
  },
  {
    files: ['**/src/models/name.ts'],
    rules: {
      '@typescript-eslint/no-non-null-assertion': 'off',
    },
  },
];

export default config;
</file>

<file path="next.config.ts">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'cloud.appwrite.io',
        pathname: '/v1/storage/buckets/**',
      },
    ],
  },
};

module.exports = nextConfig;
</file>

<file path="package.json">
{
  "name": "wyos",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@phosphor-icons/react": "^2.1.7",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.5",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@shadcn/ui": "^0.0.4",
    "@tabler/icons-react": "^3.28.1",
    "@tanstack/react-query": "^5.64.2",
    "@tanstack/react-query-devtools": "^5.64.2",
    "appwrite": "^16.1.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dompurify": "^3.2.4",
    "framer-motion": "^12.4.10",
    "immer": "^10.1.1",
    "lenis": "^1.1.20",
    "lucide-react": "^0.471.1",
    "motion": "^12.4.3",
    "next": "15.1.4",
    "node-appwrite": "^14.1.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "stripe": "^17.6.0",
    "swiper": "^11.2.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tanstack/eslint-plugin-query": "^5.64.2",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.13",
    "@types/react": "^19.0.7",
    "@types/react-dom": "^19",
    "@typescript-eslint/eslint-plugin": "^8.20.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.1.4",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.5.1",
    "prettier": "^3.4.2",
    "prettier-plugin-tailwindcss": "^0.6.10",
    "repomix": "^0.2.34",
    "tailwindcss": "^3.4.17",
    "ts-jest": "^29.2.6",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  },
  "overrides": {
    "@radix-ui/react": {
      "react": "^19.0.0",
      "react-dom": "^19.0.0"
    }
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# WYOS (Writing Your Own Story)

A subscription-based membership platform for personal and professional development built with Next.js 15, focusing on authentic guidance through curated knowledge and resources.

## **Tech Stack**

### **Core Technologies**

- Next.js 15.1.3 with App Router
- React 19
- TypeScript 5.3.3
- Appwrite 16.1.0 (Backend)
- Zustand with Immer (State Management)
- TanStack Query v5 (Data Fetching)

### **UI & Styling**

- Tailwind CSS 3.4.17
- ShadcN UI
- Framer Motion 11.18.0
- Magic UI
- Aceternity UI

### **Development Tools**

- ESLint
- Prettier
- DeepSource
- WSL2 with Ubuntu 22.04.3 LTS
- PNPM Package Manager

## **Project Structure**

```markdown
src/
├── app/ # Next.js App Router routes
│ ├── (auth)/ # Authentication routes
│ ├── (core)/ # Protected features
│ └── (marketing)/ # Public pages
├── components/ # React components
│ ├── auth/ # Auth components
│ ├── core/ # Feature components
│ ├── marketing/ # Marketing components
│ ├── shared/ # Shared components
│ └── ui/ # UI components
├── lib/ # Utility functions
│ ├── actions/ # Server actions
│ ├── config/ # App configurations
│ ├── hooks/ # Custom React hooks
│ ├── providers/ # React providers
│ └── utils/ # Utility functions
├── models/ # Appwrite models
│ ├── client/ # Client-side config
│ └── server/ # Server-side config
├── store/ # State management
├── types/ # TypeScript types
└── middleware.ts # Next.js middleware
```

### **Development Setup**

1. Install dependencies:

```bash
pnpm install
```

1. Configure environment variables:

```tsx
# Appwrite
NEXT_PUBLIC_APPWRITE_PROJECT_ID=
NEXT_PUBLIC_APPWRITE_ENDPOINT=
APPWRITE_API_KEY=

# Teams
NEXT_PUBLIC_APPWRITE_TEAMS_ADMIN=
NEXT_PUBLIC_APPWRITE_TEAMS_MEMBERS=

# Stripe
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=
NEXT_PUBLIC_STRIPE_SECRET_KEY=
NEXT_PUBLIC_STRIPE_PRICE_ID=
NEXT_PUBLIC_STRIPE_WEBHOOK_SECRET=

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

1. Run development server:
2.

```tsx
pnpm dev
```

### **Project Documentation**

Refer to the `/docs` folder for detailed documentation:

- **`auth-flow.md`**: Authentication implementation
- **`component-guidelines.md`**: Component development standards
- **`project-structure.md`**: Project organization
- **`coding-standards.md`**: Development guidelines

### **CSS Organization Guidelines**

## Structure

Our global CSS is organized into these clear sections:

1. **CSS Reset & Base Styles**: Normalize browser styles and set basics
2. **Typography**: Text styles for headings, paragraphs, links
3. **Layout & Containers**: Flex, grid, and layout utilities
4. **Spacing Utilities**: Margin and padding helper classes
5. **Buttons & Form Elements**: Form controls styling
6. **Cards & Component Styles**: Reusable component styles
7. **Utility Classes**: Display, text alignment, etc.
8. **Responsive Utilities**: Mobile breakpoints
9. **Theme Variables**: CSS variables for theming

## Naming Conventions

- Use kebab-case for component classes (e.g., `.card-header`)
- Use utility classes with shorthand (e.g., `.mb-4` for margin-bottom: 1rem)
- Prefix responsive utilities with breakpoint (e.g., `.md\:hidden`)

## Best Practices

- Keep related styles grouped together
- Add comments to mark sections
- Avoid deep nesting of selectors
- Use CSS variables for theming and consistent values
- Consolidate duplicate properties
- Maintain alphabetical order within rule sets when possible

## How to Add New Styles

1. Identify which section your style belongs to
2. Check if a similar style already exists
3. Add your style to the appropriate section
4. Add comments for complex styles
5. Consider if the style should be a utility or component
</file>

<file path="repomix.config.json">
{
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": ["**/*"],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>

<file path="tailwind.config.ts">
import tailwindAnimate from 'tailwindcss-animate';
import type { Config } from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-open-sans)', 'system-ui', 'sans-serif'],
        heading: ['var(--font-cinzel)', 'serif'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      backgroundImage: {
        'gradient-hero':
          'linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,1) 100%)',
        'gradient-bridge':
          'radial-gradient(circle at center, rgba(30,30,30,1), rgba(10,10,10,1))',
      },
      boxShadow: {
        'inset-custom':
          'inset 0 -2px 0.5px rgba(0,0,0,0.4), inset 0 1px 0.5px rgba(255,255,255,0.16)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
        fadeInUp: {
          from: {
            opacity: '0',
            transform: 'translateY(20px)',
          },
          to: {
            opacity: '1',
            transform: 'translateY(0)',
          },
        },
        'fade-out': {
          '0%': {
            backgroundColor: 'inherit',
            outline: '1px solid currentColor',
          },
          '30%': {
            background: 'transparent',
          },
          '100%': {
            outline: '1px solid transparent',
          },
        },
        lift: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-4px)' },
        },
        rippling: {
          '0%': {
            opacity: '1',
          },
          '100%': {
            transform: 'scale(2)',
            opacity: '0',
          },
        },
        spin: {
          to: {
            transform: 'rotate(360deg)',
          },
        },
        glow: {
          '0%, 100%': {
            boxShadow:
              '0 0 5px rgba(52, 211, 153, 0.5), 0 0 10px rgba(52, 211, 153, 0.3)',
          },
          '50%': {
            boxShadow:
              '0 0 10px rgba(52, 211, 153, 0.8), 0 0 20px rgba(52, 211, 153, 0.5)',
          },
        },
        shimmer: {
          '0%': {
            backgroundPosition: '200% 0',
          },
          '100%': {
            backgroundPosition: '-200% 0',
          },
        },
        perimeterShimmer: {
          '0%, 100%': {
            clipPath: 'inset(0 0 calc(100% - 2px) 0)',
          },
          '25%': {
            clipPath: 'inset(0 0 0 calc(100% - 2px))',
          },
          '50%': {
            clipPath: 'inset(calc(100% - 2px) 0 0 0)',
          },
          '75%': {
            clipPath: 'inset(0 calc(100% - 2px) 0 0)',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        lift: 'lift 1.5s ease-in-out infinite',
        rippling: 'rippling var(--duration) ease-out',
        spin: 'spin 3s linear infinite',
        fadeInUp: 'fadeInUp 0.6s ease-out',
        'fade-out': 'fade-out 0.8s ease',
        glow: 'glow 2s ease-in-out infinite',
        shimmer: 'shimmer 3s linear infinite',
        perimeterShimmer: 'perimeterShimmer 4s linear infinite',
      },
    },
  },
  plugins: [tailwindAnimate],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,

    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
