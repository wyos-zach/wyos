# Development Guidelines

## Core Principles

- Write clean, maintainable, and scalable code
- Follow SOLID principles
- Prefer functional and declarative patterns
- Emphasize type safety
- Practice component-driven development

## Code Style

- Use tabs for indentation
- Use single quotes for strings
- Omit semicolons (unless required)
- Use strict equality (===)
- Limit line length to 80 characters
- Use trailing commas in multiline literals

## Naming Conventions

- PascalCase: Components, Types, Interfaces
- kebab-case: Directories, Files
- camelCase: Variables, Functions, Methods, Hooks, Props
- UPPERCASE: Environment Variables, Constants

## React & Next.js

- Use functional components with TypeScript
- Default to Server Components
- Use 'use client' only when needed
- Implement proper cleanup in useEffect
- Use Next.js built-in components
- Optimize with useCallback and useMemo
- Avoid inline functions in JSX

## TypeScript

- Enable strict mode
- Define clear interfaces
- Use type guards for null/undefined
- Prefer interface over type
- Use TypeScript utility types

## UI & Styling

- Use Shadcn UI and Radix UI
- Follow Tailwind CSS practices
- Design mobile-first
- Ensure accessibility standards
- Maintain consistent spacing

## State Management

Local:

- useState for simple state
- useReducer for complex state
- useContext for shared state

Global (Redux):

- Use Redux Toolkit
- Normalize state structure
- Use feature-based slices
- Implement selectors

## Testing

- Write unit tests (Jest/RTL)
- Follow Arrange-Act-Assert
- Mock external dependencies
- Test user workflows
- Use snapshot testing sparingly

## Accessibility

- Use semantic HTML
- Apply ARIA attributes
- Ensure keyboard navigation
- Maintain color contrast
- Provide clear error feedback

## Security & i18n

- Sanitize inputs (DOMPurify)
- Implement proper auth
- Support RTL layouts
- Format numbers/dates/currency
